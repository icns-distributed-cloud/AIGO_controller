
AIGO_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000933c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  080094d0  080094d0  000194d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009980  08009980  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009980  08009980  00019980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009988  08009988  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009988  08009988  00019988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800998c  0800998c  0001998c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000914  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000af8  20000af8  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000100c6  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000257e  00000000  00000000  000302da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00032858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ce8  00000000  00000000  00033638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000227f5  00000000  00000000  00034320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f903  00000000  00000000  00056b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccd88  00000000  00000000  00066418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001331a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c34  00000000  00000000  001331f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094b4 	.word	0x080094b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080094b4 	.word	0x080094b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <MX_DMA_Init+0x88>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a1e      	ldr	r2, [pc, #120]	; (8000f28 <MX_DMA_Init+0x88>)
 8000eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <MX_DMA_Init+0x88>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_DMA_Init+0x88>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a17      	ldr	r2, [pc, #92]	; (8000f28 <MX_DMA_Init+0x88>)
 8000ecc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_DMA_Init+0x88>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	200c      	movs	r0, #12
 8000ee4:	f001 fdd3 	bl	8002a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ee8:	200c      	movs	r0, #12
 8000eea:	f001 fdec 	bl	8002ac6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	200e      	movs	r0, #14
 8000ef4:	f001 fdcb 	bl	8002a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ef8:	200e      	movs	r0, #14
 8000efa:	f001 fde4 	bl	8002ac6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	2039      	movs	r0, #57	; 0x39
 8000f04:	f001 fdc3 	bl	8002a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f08:	2039      	movs	r0, #57	; 0x39
 8000f0a:	f001 fddc 	bl	8002ac6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	2045      	movs	r0, #69	; 0x45
 8000f14:	f001 fdbb 	bl	8002a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000f18:	2045      	movs	r0, #69	; 0x45
 8000f1a:	f001 fdd4 	bl	8002ac6 <HAL_NVIC_EnableIRQ>

}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800

08000f2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	; 0x30
 8000f30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
 8000f46:	4b68      	ldr	r3, [pc, #416]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a67      	ldr	r2, [pc, #412]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f4c:	f043 0310 	orr.w	r3, r3, #16
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b65      	ldr	r3, [pc, #404]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0310 	and.w	r3, r3, #16
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	4b61      	ldr	r3, [pc, #388]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a60      	ldr	r2, [pc, #384]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b5e      	ldr	r3, [pc, #376]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b5a      	ldr	r3, [pc, #360]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a59      	ldr	r2, [pc, #356]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b57      	ldr	r3, [pc, #348]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b53      	ldr	r3, [pc, #332]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a52      	ldr	r2, [pc, #328]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b50      	ldr	r3, [pc, #320]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a4b      	ldr	r2, [pc, #300]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b49      	ldr	r3, [pc, #292]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a44      	ldr	r2, [pc, #272]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b42      	ldr	r3, [pc, #264]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2138      	movs	r1, #56	; 0x38
 8000fee:	483f      	ldr	r0, [pc, #252]	; (80010ec <MX_GPIO_Init+0x1c0>)
 8000ff0:	f002 fb22 	bl	8003638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ffa:	483d      	ldr	r0, [pc, #244]	; (80010f0 <MX_GPIO_Init+0x1c4>)
 8000ffc:	f002 fb1c 	bl	8003638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2101      	movs	r1, #1
 8001004:	483a      	ldr	r0, [pc, #232]	; (80010f0 <MX_GPIO_Init+0x1c4>)
 8001006:	f002 fb17 	bl	8003638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001010:	4838      	ldr	r0, [pc, #224]	; (80010f4 <MX_GPIO_Init+0x1c8>)
 8001012:	f002 fb11 	bl	8003638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 6171 	mov.w	r1, #3856	; 0xf10
 800101c:	4836      	ldr	r0, [pc, #216]	; (80010f8 <MX_GPIO_Init+0x1cc>)
 800101e:	f002 fb0b 	bl	8003638 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PE4 PE5 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8001022:	2338      	movs	r3, #56	; 0x38
 8001024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	482c      	ldr	r0, [pc, #176]	; (80010ec <MX_GPIO_Init+0x1c0>)
 800103a:	f002 f961 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|OTG_FS_PowerSwitchOn_Pin;
 800103e:	f242 0301 	movw	r3, #8193	; 0x2001
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	4826      	ldr	r0, [pc, #152]	; (80010f0 <MX_GPIO_Init+0x1c4>)
 8001058:	f002 f952 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800105c:	2304      	movs	r3, #4
 800105e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	4821      	ldr	r0, [pc, #132]	; (80010f4 <MX_GPIO_Init+0x1c8>)
 8001070:	f002 f946 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001074:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4819      	ldr	r0, [pc, #100]	; (80010f4 <MX_GPIO_Init+0x1c8>)
 800108e:	f002 f937 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001092:	f44f 6371 	mov.w	r3, #3856	; 0xf10
 8001096:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	4813      	ldr	r0, [pc, #76]	; (80010f8 <MX_GPIO_Init+0x1cc>)
 80010ac:	f002 f928 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010b0:	2320      	movs	r3, #32
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_GPIO_Init+0x1cc>)
 80010c4:	f002 f91c 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_GPIO_Init+0x1d0>)
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_GPIO_Init+0x1c0>)
 80010dc:	f002 f910 	bl	8003300 <HAL_GPIO_Init>

}
 80010e0:	bf00      	nop
 80010e2:	3730      	adds	r7, #48	; 0x30
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40020800 	.word	0x40020800
 80010f4:	40020400 	.word	0x40020400
 80010f8:	40020c00 	.word	0x40020c00
 80010fc:	10120000 	.word	0x10120000

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001106:	f001 fb51 	bl	80027ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110a:	f000 f8bb 	bl	8001284 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 800110e:	f7ff fec7 	bl	8000ea0 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001112:	f7ff ff0b 	bl	8000f2c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001116:	f000 fd95 	bl	8001c44 <MX_TIM1_Init>
  MX_TIM2_Init();
 800111a:	f000 fe57 	bl	8001dcc <MX_TIM2_Init>
  MX_TIM3_Init();
 800111e:	f000 fea9 	bl	8001e74 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001122:	f000 fefb 	bl	8001f1c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001126:	f000 ff4d 	bl	8001fc4 <MX_TIM5_Init>
  MX_TIM6_Init();
 800112a:	f000 ff9f 	bl	800206c <MX_TIM6_Init>
  MX_USART6_UART_Init();
 800112e:	f001 f979 	bl	8002424 <MX_USART6_UART_Init>
  MX_DMA_Init();
 8001132:	f7ff feb5 	bl	8000ea0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001136:	f001 f94b 	bl	80023d0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //while (MPU6050_Init(&hi2c1) ==1);
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 800113a:	4b45      	ldr	r3, [pc, #276]	; (8001250 <main+0x150>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	4b43      	ldr	r3, [pc, #268]	; (8001250 <main+0x150>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f042 0210 	orr.w	r2, r2, #16
 8001148:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart6, RxBuffer, DMA_BUF_SIZE);
 800114a:	2240      	movs	r2, #64	; 0x40
 800114c:	4941      	ldr	r1, [pc, #260]	; (8001254 <main+0x154>)
 800114e:	4840      	ldr	r0, [pc, #256]	; (8001250 <main+0x150>)
 8001150:	f004 f9a3 	bl	800549a <HAL_UART_Receive_DMA>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001154:	2100      	movs	r1, #0
 8001156:	4840      	ldr	r0, [pc, #256]	; (8001258 <main+0x158>)
 8001158:	f003 f816 	bl	8004188 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800115c:	2104      	movs	r1, #4
 800115e:	483e      	ldr	r0, [pc, #248]	; (8001258 <main+0x158>)
 8001160:	f003 f812 	bl	8004188 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001164:	2108      	movs	r1, #8
 8001166:	483c      	ldr	r0, [pc, #240]	; (8001258 <main+0x158>)
 8001168:	f003 f80e 	bl	8004188 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800116c:	210c      	movs	r1, #12
 800116e:	483a      	ldr	r0, [pc, #232]	; (8001258 <main+0x158>)
 8001170:	f003 f80a 	bl	8004188 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8001174:	4839      	ldr	r0, [pc, #228]	; (800125c <main+0x15c>)
 8001176:	f002 ff3d 	bl	8003ff4 <HAL_TIM_Base_Start_IT>
  HAL_Delay(1000);
 800117a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800117e:	f001 fb87 	bl	8002890 <HAL_Delay>
  Initialize_Encoder_Count();
 8001182:	f000 f8e9 	bl	8001358 <Initialize_Encoder_Count>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001186:	213c      	movs	r1, #60	; 0x3c
 8001188:	4835      	ldr	r0, [pc, #212]	; (8001260 <main+0x160>)
 800118a:	f003 f96b 	bl	8004464 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800118e:	213c      	movs	r1, #60	; 0x3c
 8001190:	4834      	ldr	r0, [pc, #208]	; (8001264 <main+0x164>)
 8001192:	f003 f967 	bl	8004464 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001196:	213c      	movs	r1, #60	; 0x3c
 8001198:	4833      	ldr	r0, [pc, #204]	; (8001268 <main+0x168>)
 800119a:	f003 f963 	bl	8004464 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800119e:	213c      	movs	r1, #60	; 0x3c
 80011a0:	4832      	ldr	r0, [pc, #200]	; (800126c <main+0x16c>)
 80011a2:	f003 f95f 	bl	8004464 <HAL_TIM_Encoder_Start>
  //Initialize for motor PWM

  //12,13 : LF | 14,15 : RF | 8,9 : LB | 9,10 : RB
  //write pin SET at lower pin to go forward
  //initialize all wheels directions forward
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ac:	4830      	ldr	r0, [pc, #192]	; (8001270 <main+0x170>)
 80011ae:	f002 fa43 	bl	8003638 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b8:	482d      	ldr	r0, [pc, #180]	; (8001270 <main+0x170>)
 80011ba:	f002 fa3d 	bl	8003638 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011c4:	482a      	ldr	r0, [pc, #168]	; (8001270 <main+0x170>)
 80011c6:	f002 fa37 	bl	8003638 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d0:	4827      	ldr	r0, [pc, #156]	; (8001270 <main+0x170>)
 80011d2:	f002 fa31 	bl	8003638 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011dc:	4825      	ldr	r0, [pc, #148]	; (8001274 <main+0x174>)
 80011de:	f002 fa2b 	bl	8003638 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e8:	4822      	ldr	r0, [pc, #136]	; (8001274 <main+0x174>)
 80011ea:	f002 fa25 	bl	8003638 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f4:	481f      	ldr	r0, [pc, #124]	; (8001274 <main+0x174>)
 80011f6:	f002 fa1f 	bl	8003638 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001200:	481c      	ldr	r0, [pc, #112]	; (8001274 <main+0x174>)
 8001202:	f002 fa19 	bl	8003638 <HAL_GPIO_WritePin>
  cnt = 0;
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <main+0x178>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
	 TIM1->CCR1 = 0;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <main+0x17c>)
 800120e:	2200      	movs	r2, #0
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
	 TIM1->CCR2 = 0;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <main+0x17c>)
 8001214:	2200      	movs	r2, #0
 8001216:	639a      	str	r2, [r3, #56]	; 0x38
	 TIM1->CCR3 = 0;
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <main+0x17c>)
 800121a:	2200      	movs	r2, #0
 800121c:	63da      	str	r2, [r3, #60]	; 0x3c
	 TIM1->CCR4 = 0;
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <main+0x17c>)
 8001220:	2200      	movs	r2, #0
 8001222:	641a      	str	r2, [r3, #64]	; 0x40
	//	  recv_data[i] = 0;
	  //}
	  //Receive_Lidar();
	  //Receive_Imu();
	  //HAL_Delay(10);
	  uint8_t byte = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	71fb      	strb	r3, [r7, #7]
	  if(HAL_GetTick()-last > 100L){
 8001228:	f001 fb26 	bl	8002878 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <main+0x180>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b64      	cmp	r3, #100	; 0x64
 8001236:	d9f5      	bls.n	8001224 <main+0x124>
		  Receive_Encoder_Count();
 8001238:	f000 f8a8 	bl	800138c <Receive_Encoder_Count>
		  Transmit_Data();
 800123c:	f000 f8c2 	bl	80013c4 <Transmit_Data>
		  Initialize_Encoder_Count();
 8001240:	f000 f88a 	bl	8001358 <Initialize_Encoder_Count>
		  last = HAL_GetTick();
 8001244:	f001 fb18 	bl	8002878 <HAL_GetTick>
 8001248:	4603      	mov	r3, r0
 800124a:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <main+0x180>)
 800124c:	6013      	str	r3, [r2, #0]
  {
 800124e:	e7e9      	b.n	8001224 <main+0x124>
 8001250:	20000aa0 	.word	0x20000aa0
 8001254:	20000668 	.word	0x20000668
 8001258:	2000084c 	.word	0x2000084c
 800125c:	20000804 	.word	0x20000804
 8001260:	20000894 	.word	0x20000894
 8001264:	200007bc 	.word	0x200007bc
 8001268:	2000072c 	.word	0x2000072c
 800126c:	20000774 	.word	0x20000774
 8001270:	40020400 	.word	0x40020400
 8001274:	40020c00 	.word	0x40020c00
 8001278:	20000654 	.word	0x20000654
 800127c:	40010000 	.word	0x40010000
 8001280:	20000204 	.word	0x20000204

08001284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b094      	sub	sp, #80	; 0x50
 8001288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	f107 0320 	add.w	r3, r7, #32
 800128e:	2230      	movs	r2, #48	; 0x30
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f004 ffb2 	bl	80061fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	4b28      	ldr	r3, [pc, #160]	; (8001350 <SystemClock_Config+0xcc>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	4a27      	ldr	r2, [pc, #156]	; (8001350 <SystemClock_Config+0xcc>)
 80012b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b6:	6413      	str	r3, [r2, #64]	; 0x40
 80012b8:	4b25      	ldr	r3, [pc, #148]	; (8001350 <SystemClock_Config+0xcc>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <SystemClock_Config+0xd0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a21      	ldr	r2, [pc, #132]	; (8001354 <SystemClock_Config+0xd0>)
 80012ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <SystemClock_Config+0xd0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e0:	2301      	movs	r3, #1
 80012e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ea:	2302      	movs	r3, #2
 80012ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012f4:	2304      	movs	r3, #4
 80012f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012f8:	23a8      	movs	r3, #168	; 0xa8
 80012fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001300:	2303      	movs	r3, #3
 8001302:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001304:	f107 0320 	add.w	r3, r7, #32
 8001308:	4618      	mov	r0, r3
 800130a:	f002 f9af 	bl	800366c <HAL_RCC_OscConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001314:	f000 fb16 	bl	8001944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001318:	230f      	movs	r3, #15
 800131a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131c:	2302      	movs	r3, #2
 800131e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001328:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800132a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2102      	movs	r1, #2
 8001336:	4618      	mov	r0, r3
 8001338:	f002 fc10 	bl	8003b5c <HAL_RCC_ClockConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001342:	f000 faff 	bl	8001944 <Error_Handler>
  }
}
 8001346:	bf00      	nop
 8001348:	3750      	adds	r7, #80	; 0x50
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40007000 	.word	0x40007000

08001358 <Initialize_Encoder_Count>:

/* USER CODE BEGIN 4 */
void Initialize_Encoder_Count(){
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
	TIM2 -> CNT = 0;
 800135c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3 -> CNT = 0;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <Initialize_Encoder_Count+0x28>)
 8001366:	2200      	movs	r2, #0
 8001368:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = 0;
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <Initialize_Encoder_Count+0x2c>)
 800136c:	2200      	movs	r2, #0
 800136e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM5 -> CNT = 0;
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <Initialize_Encoder_Count+0x30>)
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40000400 	.word	0x40000400
 8001384:	40000800 	.word	0x40000800
 8001388:	40000c00 	.word	0x40000c00

0800138c <Receive_Encoder_Count>:
void Receive_Encoder_Count(){
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
	//TIM2 : LF, TIM3 : RF, TIM4 : RB, TIM5 : LB
	  //CntR = (TIM3 -> CNT >> 3) + (TIM4 -> CNT >> 3);
	  //CntL = (TIM2 -> CNT >> 3) + (TIM5 -> CNT >> 3);
		CntR = TIM4 -> CNT >> 2;
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <Receive_Encoder_Count+0x28>)
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	b29a      	uxth	r2, r3
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <Receive_Encoder_Count+0x2c>)
 800139a:	801a      	strh	r2, [r3, #0]
		CntL = TIM5 -> CNT >> 2;
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <Receive_Encoder_Count+0x30>)
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <Receive_Encoder_Count+0x34>)
 80013a6:	801a      	strh	r2, [r3, #0]
	  //sprintf(data, "e%u,%u\n\r", CntL, CntR);
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40000800 	.word	0x40000800
 80013b8:	2000060a 	.word	0x2000060a
 80013bc:	40000c00 	.word	0x40000c00
 80013c0:	20000608 	.word	0x20000608

080013c4 <Transmit_Data>:
			scan_start = true;
		 }
	  }
}
**/
void Transmit_Data(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	}
	sprintf(data, "%d\n\r", distance[359]);
	HAL_UART_Transmit_DMA(&huart6, (uint8_t*)data, strlen(data));
	**/
	//Encoder
	sprintf(data, "e%u,%u\n\r", CntL, CntR);
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <Transmit_Data+0x30>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <Transmit_Data+0x34>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	490a      	ldr	r1, [pc, #40]	; (80013fc <Transmit_Data+0x38>)
 80013d4:	480a      	ldr	r0, [pc, #40]	; (8001400 <Transmit_Data+0x3c>)
 80013d6:	f005 fb83 	bl	8006ae0 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)data, strlen(data), 100);
 80013da:	4809      	ldr	r0, [pc, #36]	; (8001400 <Transmit_Data+0x3c>)
 80013dc:	f7fe fef8 	bl	80001d0 <strlen>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	2364      	movs	r3, #100	; 0x64
 80013e6:	4906      	ldr	r1, [pc, #24]	; (8001400 <Transmit_Data+0x3c>)
 80013e8:	4806      	ldr	r0, [pc, #24]	; (8001404 <Transmit_Data+0x40>)
 80013ea:	f003 ffc4 	bl	8005376 <HAL_UART_Transmit>
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000608 	.word	0x20000608
 80013f8:	2000060a 	.word	0x2000060a
 80013fc:	080094d0 	.word	0x080094d0
 8001400:	20000208 	.word	0x20000208
 8001404:	20000aa0 	.word	0x20000aa0

08001408 <Receive_Serial>:


void Receive_Serial(char *recv){
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	//Receive two integer data (Desired Encoder Rate for two wheels) from serial (Raspberry Pi)
	//split string data, then convert to integer
	char *p = strtok(recv, ",");
 8001410:	4912      	ldr	r1, [pc, #72]	; (800145c <Receive_Serial+0x54>)
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f005 fb84 	bl	8006b20 <strtok>
 8001418:	6178      	str	r0, [r7, #20]
	char *array[2] = {0};
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
	array[0] = p;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	60fb      	str	r3, [r7, #12]
	p = strtok(NULL, "/");
 8001428:	490d      	ldr	r1, [pc, #52]	; (8001460 <Receive_Serial+0x58>)
 800142a:	2000      	movs	r0, #0
 800142c:	f005 fb78 	bl	8006b20 <strtok>
 8001430:	6178      	str	r0, [r7, #20]
	array[1] = p;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	613b      	str	r3, [r7, #16]
	RecL = atoi(array[0]);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4618      	mov	r0, r3
 800143a:	f004 feb1 	bl	80061a0 <atoi>
 800143e:	4603      	mov	r3, r0
 8001440:	4a08      	ldr	r2, [pc, #32]	; (8001464 <Receive_Serial+0x5c>)
 8001442:	6013      	str	r3, [r2, #0]
	RecR = atoi(array[1]);
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4618      	mov	r0, r3
 8001448:	f004 feaa 	bl	80061a0 <atoi>
 800144c:	4603      	mov	r3, r0
 800144e:	4a06      	ldr	r2, [pc, #24]	; (8001468 <Receive_Serial+0x60>)
 8001450:	6013      	str	r3, [r2, #0]
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	080094dc 	.word	0x080094dc
 8001460:	080094e0 	.word	0x080094e0
 8001464:	2000060c 	.word	0x2000060c
 8001468:	20000610 	.word	0x20000610

0800146c <Set_Motor_PID>:

//named PID, but the example code implemented only P control i think T.T
void Set_Motor_PID(){
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	//0 : LF | 1 : RF | 2 : RB | 3 : LB
	//Determine Desired motor PWM value
	desired_speed_L = Calculate_Value(RecL);
 8001470:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <Set_Motor_PID+0x104>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f000 f973 	bl	8001760 <Calculate_Value>
 800147a:	4603      	mov	r3, r0
 800147c:	4a3d      	ldr	r2, [pc, #244]	; (8001574 <Set_Motor_PID+0x108>)
 800147e:	6013      	str	r3, [r2, #0]
	desired_speed_R = Calculate_Value(RecR);
 8001480:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <Set_Motor_PID+0x10c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f000 f96b 	bl	8001760 <Calculate_Value>
 800148a:	4603      	mov	r3, r0
 800148c:	4a3b      	ldr	r2, [pc, #236]	; (800157c <Set_Motor_PID+0x110>)
 800148e:	6013      	str	r3, [r2, #0]
    if (CntL > 8191)
 8001490:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <Set_Motor_PID+0x114>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001498:	d307      	bcc.n	80014aa <Set_Motor_PID+0x3e>
       CntL -= 16383;
 800149a:	4b39      	ldr	r3, [pc, #228]	; (8001580 <Set_Motor_PID+0x114>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 80014a2:	3b3f      	subs	r3, #63	; 0x3f
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	4b36      	ldr	r3, [pc, #216]	; (8001580 <Set_Motor_PID+0x114>)
 80014a8:	801a      	strh	r2, [r3, #0]
    if (CntR > 8191)
 80014aa:	4b36      	ldr	r3, [pc, #216]	; (8001584 <Set_Motor_PID+0x118>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014b2:	d307      	bcc.n	80014c4 <Set_Motor_PID+0x58>
       CntR -= 16383;
 80014b4:	4b33      	ldr	r3, [pc, #204]	; (8001584 <Set_Motor_PID+0x118>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 80014bc:	3b3f      	subs	r3, #63	; 0x3f
 80014be:	b29a      	uxth	r2, r3
 80014c0:	4b30      	ldr	r3, [pc, #192]	; (8001584 <Set_Motor_PID+0x118>)
 80014c2:	801a      	strh	r2, [r3, #0]
	//encoder_speed_L = Calculate_Value(CntL);
	//encoder_speed_R = Calculate_Value(CntR);

	//Do P Control, NOT pid control

	error_speed[0] = desired_speed_L - encoder_speed_L;
 80014c4:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <Set_Motor_PID+0x108>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <Set_Motor_PID+0x11c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	4a2f      	ldr	r2, [pc, #188]	; (800158c <Set_Motor_PID+0x120>)
 80014d0:	6013      	str	r3, [r2, #0]
	error_speed[1] = desired_speed_R - encoder_speed_R;
 80014d2:	4b2a      	ldr	r3, [pc, #168]	; (800157c <Set_Motor_PID+0x110>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <Set_Motor_PID+0x124>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	4a2b      	ldr	r2, [pc, #172]	; (800158c <Set_Motor_PID+0x120>)
 80014de:	6053      	str	r3, [r2, #4]
	error_speed[2] = desired_speed_R - encoder_speed_R;
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <Set_Motor_PID+0x110>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <Set_Motor_PID+0x124>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	4a28      	ldr	r2, [pc, #160]	; (800158c <Set_Motor_PID+0x120>)
 80014ec:	6093      	str	r3, [r2, #8]
	error_speed[3] = desired_speed_L - encoder_speed_L;
 80014ee:	4b21      	ldr	r3, [pc, #132]	; (8001574 <Set_Motor_PID+0x108>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b25      	ldr	r3, [pc, #148]	; (8001588 <Set_Motor_PID+0x11c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	4a24      	ldr	r2, [pc, #144]	; (800158c <Set_Motor_PID+0x120>)
 80014fa:	60d3      	str	r3, [r2, #12]

	PID_speed[0] = Kp*error_speed[0];
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <Set_Motor_PID+0x120>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	4b24      	ldr	r3, [pc, #144]	; (8001594 <Set_Motor_PID+0x128>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	fb03 f302 	mul.w	r3, r3, r2
 800150a:	461a      	mov	r2, r3
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <Set_Motor_PID+0x12c>)
 800150e:	601a      	str	r2, [r3, #0]
	PID_speed[1] = Kp*error_speed[1];
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <Set_Motor_PID+0x120>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	461a      	mov	r2, r3
 8001516:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <Set_Motor_PID+0x128>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	fb03 f302 	mul.w	r3, r3, r2
 800151e:	461a      	mov	r2, r3
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <Set_Motor_PID+0x12c>)
 8001522:	605a      	str	r2, [r3, #4]
	PID_speed[2] = Kp*error_speed[2];
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <Set_Motor_PID+0x120>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	461a      	mov	r2, r3
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <Set_Motor_PID+0x128>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	fb03 f302 	mul.w	r3, r3, r2
 8001532:	461a      	mov	r2, r3
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <Set_Motor_PID+0x12c>)
 8001536:	609a      	str	r2, [r3, #8]
	PID_speed[3] = Kp*error_speed[3];
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <Set_Motor_PID+0x120>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	461a      	mov	r2, r3
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <Set_Motor_PID+0x128>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	fb03 f302 	mul.w	r3, r3, r2
 8001546:	461a      	mov	r2, r3
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <Set_Motor_PID+0x12c>)
 800154a:	60da      	str	r2, [r3, #12]

	old_PID_speed[0] = PID_speed[0];
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <Set_Motor_PID+0x12c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a12      	ldr	r2, [pc, #72]	; (800159c <Set_Motor_PID+0x130>)
 8001552:	6013      	str	r3, [r2, #0]
	old_PID_speed[1] = PID_speed[1];
 8001554:	4b10      	ldr	r3, [pc, #64]	; (8001598 <Set_Motor_PID+0x12c>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	4a10      	ldr	r2, [pc, #64]	; (800159c <Set_Motor_PID+0x130>)
 800155a:	6053      	str	r3, [r2, #4]
	old_PID_speed[2] = PID_speed[2];
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <Set_Motor_PID+0x12c>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	4a0e      	ldr	r2, [pc, #56]	; (800159c <Set_Motor_PID+0x130>)
 8001562:	6093      	str	r3, [r2, #8]
	old_PID_speed[3] = PID_speed[3];
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <Set_Motor_PID+0x12c>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4a0c      	ldr	r2, [pc, #48]	; (800159c <Set_Motor_PID+0x130>)
 800156a:	60d3      	str	r3, [r2, #12]

	//now, let's control motor PWM
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2000060c 	.word	0x2000060c
 8001574:	20000614 	.word	0x20000614
 8001578:	20000610 	.word	0x20000610
 800157c:	20000618 	.word	0x20000618
 8001580:	20000608 	.word	0x20000608
 8001584:	2000060a 	.word	0x2000060a
 8001588:	2000061c 	.word	0x2000061c
 800158c:	20000624 	.word	0x20000624
 8001590:	20000620 	.word	0x20000620
 8001594:	20000000 	.word	0x20000000
 8001598:	20000634 	.word	0x20000634
 800159c:	20000644 	.word	0x20000644

080015a0 <Set_Motor_PWM>:
void Set_Motor_PWM(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
	//mind the order LF, RF, LB, RB
	//Set motor rotation direction first
	//LF

	if (PID_speed[0] > 0 || PID_speed[0] == 0){
 80015a6:	4b69      	ldr	r3, [pc, #420]	; (800174c <Set_Motor_PWM+0x1ac>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	dc03      	bgt.n	80015b6 <Set_Motor_PWM+0x16>
 80015ae:	4b67      	ldr	r3, [pc, #412]	; (800174c <Set_Motor_PWM+0x1ac>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10c      	bne.n	80015d0 <Set_Motor_PWM+0x30>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 80015b6:	2201      	movs	r2, #1
 80015b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015bc:	4864      	ldr	r0, [pc, #400]	; (8001750 <Set_Motor_PWM+0x1b0>)
 80015be:	f002 f83b 	bl	8003638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015c8:	4861      	ldr	r0, [pc, #388]	; (8001750 <Set_Motor_PWM+0x1b0>)
 80015ca:	f002 f835 	bl	8003638 <HAL_GPIO_WritePin>
 80015ce:	e014      	b.n	80015fa <Set_Motor_PWM+0x5a>
	}
	else if(PID_speed[0] < 0){
 80015d0:	4b5e      	ldr	r3, [pc, #376]	; (800174c <Set_Motor_PWM+0x1ac>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	da10      	bge.n	80015fa <Set_Motor_PWM+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015de:	485c      	ldr	r0, [pc, #368]	; (8001750 <Set_Motor_PWM+0x1b0>)
 80015e0:	f002 f82a 	bl	8003638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ea:	4859      	ldr	r0, [pc, #356]	; (8001750 <Set_Motor_PWM+0x1b0>)
 80015ec:	f002 f824 	bl	8003638 <HAL_GPIO_WritePin>
		PID_speed[0] *= -1;
 80015f0:	4b56      	ldr	r3, [pc, #344]	; (800174c <Set_Motor_PWM+0x1ac>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	425b      	negs	r3, r3
 80015f6:	4a55      	ldr	r2, [pc, #340]	; (800174c <Set_Motor_PWM+0x1ac>)
 80015f8:	6013      	str	r3, [r2, #0]
	}

	//RF
	if (PID_speed[1] > 0 || PID_speed[1] == 0){
 80015fa:	4b54      	ldr	r3, [pc, #336]	; (800174c <Set_Motor_PWM+0x1ac>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	dc03      	bgt.n	800160a <Set_Motor_PWM+0x6a>
 8001602:	4b52      	ldr	r3, [pc, #328]	; (800174c <Set_Motor_PWM+0x1ac>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10c      	bne.n	8001624 <Set_Motor_PWM+0x84>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 800160a:	2201      	movs	r2, #1
 800160c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001610:	484f      	ldr	r0, [pc, #316]	; (8001750 <Set_Motor_PWM+0x1b0>)
 8001612:	f002 f811 	bl	8003638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800161c:	484c      	ldr	r0, [pc, #304]	; (8001750 <Set_Motor_PWM+0x1b0>)
 800161e:	f002 f80b 	bl	8003638 <HAL_GPIO_WritePin>
 8001622:	e014      	b.n	800164e <Set_Motor_PWM+0xae>
	}
	else if(PID_speed[1] < 0){
 8001624:	4b49      	ldr	r3, [pc, #292]	; (800174c <Set_Motor_PWM+0x1ac>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	da10      	bge.n	800164e <Set_Motor_PWM+0xae>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001632:	4847      	ldr	r0, [pc, #284]	; (8001750 <Set_Motor_PWM+0x1b0>)
 8001634:	f002 f800 	bl	8003638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8001638:	2201      	movs	r2, #1
 800163a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800163e:	4844      	ldr	r0, [pc, #272]	; (8001750 <Set_Motor_PWM+0x1b0>)
 8001640:	f001 fffa 	bl	8003638 <HAL_GPIO_WritePin>
		PID_speed[1] *= -1;
 8001644:	4b41      	ldr	r3, [pc, #260]	; (800174c <Set_Motor_PWM+0x1ac>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	425b      	negs	r3, r3
 800164a:	4a40      	ldr	r2, [pc, #256]	; (800174c <Set_Motor_PWM+0x1ac>)
 800164c:	6053      	str	r3, [r2, #4]
	}

	//RB
	if (PID_speed[2] > 0 || PID_speed[2] == 0){
 800164e:	4b3f      	ldr	r3, [pc, #252]	; (800174c <Set_Motor_PWM+0x1ac>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	dc03      	bgt.n	800165e <Set_Motor_PWM+0xbe>
 8001656:	4b3d      	ldr	r3, [pc, #244]	; (800174c <Set_Motor_PWM+0x1ac>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <Set_Motor_PWM+0xd8>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);
 800165e:	2201      	movs	r2, #1
 8001660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001664:	483b      	ldr	r0, [pc, #236]	; (8001754 <Set_Motor_PWM+0x1b4>)
 8001666:	f001 ffe7 	bl	8003638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001670:	4838      	ldr	r0, [pc, #224]	; (8001754 <Set_Motor_PWM+0x1b4>)
 8001672:	f001 ffe1 	bl	8003638 <HAL_GPIO_WritePin>
 8001676:	e014      	b.n	80016a2 <Set_Motor_PWM+0x102>
	}
	else if(PID_speed[2] < 0){
 8001678:	4b34      	ldr	r3, [pc, #208]	; (800174c <Set_Motor_PWM+0x1ac>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	da10      	bge.n	80016a2 <Set_Motor_PWM+0x102>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001686:	4833      	ldr	r0, [pc, #204]	; (8001754 <Set_Motor_PWM+0x1b4>)
 8001688:	f001 ffd6 	bl	8003638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);
 800168c:	2201      	movs	r2, #1
 800168e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001692:	4830      	ldr	r0, [pc, #192]	; (8001754 <Set_Motor_PWM+0x1b4>)
 8001694:	f001 ffd0 	bl	8003638 <HAL_GPIO_WritePin>
		PID_speed[2] *= -1;
 8001698:	4b2c      	ldr	r3, [pc, #176]	; (800174c <Set_Motor_PWM+0x1ac>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	425b      	negs	r3, r3
 800169e:	4a2b      	ldr	r2, [pc, #172]	; (800174c <Set_Motor_PWM+0x1ac>)
 80016a0:	6093      	str	r3, [r2, #8]
	}

	//LB
	if (PID_speed[3] > 0 || PID_speed[3] == 0){
 80016a2:	4b2a      	ldr	r3, [pc, #168]	; (800174c <Set_Motor_PWM+0x1ac>)
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	dc03      	bgt.n	80016b2 <Set_Motor_PWM+0x112>
 80016aa:	4b28      	ldr	r3, [pc, #160]	; (800174c <Set_Motor_PWM+0x1ac>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10c      	bne.n	80016cc <Set_Motor_PWM+0x12c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, SET);
 80016b2:	2201      	movs	r2, #1
 80016b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b8:	4826      	ldr	r0, [pc, #152]	; (8001754 <Set_Motor_PWM+0x1b4>)
 80016ba:	f001 ffbd 	bl	8003638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016c4:	4823      	ldr	r0, [pc, #140]	; (8001754 <Set_Motor_PWM+0x1b4>)
 80016c6:	f001 ffb7 	bl	8003638 <HAL_GPIO_WritePin>
 80016ca:	e014      	b.n	80016f6 <Set_Motor_PWM+0x156>
	}
	else if(PID_speed[3] < 0){
 80016cc:	4b1f      	ldr	r3, [pc, #124]	; (800174c <Set_Motor_PWM+0x1ac>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da10      	bge.n	80016f6 <Set_Motor_PWM+0x156>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016da:	481e      	ldr	r0, [pc, #120]	; (8001754 <Set_Motor_PWM+0x1b4>)
 80016dc:	f001 ffac 	bl	8003638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, SET);
 80016e0:	2201      	movs	r2, #1
 80016e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016e6:	481b      	ldr	r0, [pc, #108]	; (8001754 <Set_Motor_PWM+0x1b4>)
 80016e8:	f001 ffa6 	bl	8003638 <HAL_GPIO_WritePin>
		PID_speed[3] *= -1;
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <Set_Motor_PWM+0x1ac>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	425b      	negs	r3, r3
 80016f2:	4a16      	ldr	r2, [pc, #88]	; (800174c <Set_Motor_PWM+0x1ac>)
 80016f4:	60d3      	str	r3, [r2, #12]
	}
	//For Safety, PID_speed won't go beyond 2,000
	uint8_t i = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	71fb      	strb	r3, [r7, #7]
	while (i < 4){
 80016fa:	e010      	b.n	800171e <Set_Motor_PWM+0x17e>
		if (PID_speed[i]> 10000){
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	4a13      	ldr	r2, [pc, #76]	; (800174c <Set_Motor_PWM+0x1ac>)
 8001700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001704:	f242 7210 	movw	r2, #10000	; 0x2710
 8001708:	4293      	cmp	r3, r2
 800170a:	dd05      	ble.n	8001718 <Set_Motor_PWM+0x178>
			PID_speed[i] = 10000;
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	4a0f      	ldr	r2, [pc, #60]	; (800174c <Set_Motor_PWM+0x1ac>)
 8001710:	f242 7110 	movw	r1, #10000	; 0x2710
 8001714:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		i++;
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	3301      	adds	r3, #1
 800171c:	71fb      	strb	r3, [r7, #7]
	while (i < 4){
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d9eb      	bls.n	80016fc <Set_Motor_PWM+0x15c>
	}
	//Set PWM value
	 TIM1->CCR1 = PID_speed[0];
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <Set_Motor_PWM+0x1ac>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <Set_Motor_PWM+0x1b8>)
 800172a:	635a      	str	r2, [r3, #52]	; 0x34
	 TIM1->CCR2 = PID_speed[1];
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <Set_Motor_PWM+0x1ac>)
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <Set_Motor_PWM+0x1b8>)
 8001732:	639a      	str	r2, [r3, #56]	; 0x38
	 TIM1->CCR3 = PID_speed[2];
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <Set_Motor_PWM+0x1ac>)
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	4b07      	ldr	r3, [pc, #28]	; (8001758 <Set_Motor_PWM+0x1b8>)
 800173a:	63da      	str	r2, [r3, #60]	; 0x3c
	 TIM1->CCR4 = PID_speed[3];
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <Set_Motor_PWM+0x1ac>)
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <Set_Motor_PWM+0x1b8>)
 8001742:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000634 	.word	0x20000634
 8001750:	40020400 	.word	0x40020400
 8001754:	40020c00 	.word	0x40020c00
 8001758:	40010000 	.word	0x40010000
 800175c:	00000000 	.word	0x00000000

08001760 <Calculate_Value>:
int32_t Calculate_Value(int32_t val){
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	if(val > 0)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	dd20      	ble.n	80017b0 <Calculate_Value+0x50>
		return 164.18 * exp(0.0112 * val);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7fe fed8 	bl	8000524 <__aeabi_i2d>
 8001774:	a324      	add	r3, pc, #144	; (adr r3, 8001808 <Calculate_Value+0xa8>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7fe ff3d 	bl	80005f8 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	ec43 2b17 	vmov	d7, r2, r3
 8001786:	eeb0 0a47 	vmov.f32	s0, s14
 800178a:	eef0 0a67 	vmov.f32	s1, s15
 800178e:	f007 fcbb 	bl	8009108 <exp>
 8001792:	ec51 0b10 	vmov	r0, r1, d0
 8001796:	a31e      	add	r3, pc, #120	; (adr r3, 8001810 <Calculate_Value+0xb0>)
 8001798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179c:	f7fe ff2c 	bl	80005f8 <__aeabi_dmul>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	f7ff f9d6 	bl	8000b58 <__aeabi_d2iz>
 80017ac:	4603      	mov	r3, r0
 80017ae:	e024      	b.n	80017fa <Calculate_Value+0x9a>
	else if(val < 0)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	da20      	bge.n	80017f8 <Calculate_Value+0x98>
		return (-1) * 164.18 * exp(0.0112 * (-1) * val);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7fe feb4 	bl	8000524 <__aeabi_i2d>
 80017bc:	a316      	add	r3, pc, #88	; (adr r3, 8001818 <Calculate_Value+0xb8>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	f7fe ff19 	bl	80005f8 <__aeabi_dmul>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	ec43 2b17 	vmov	d7, r2, r3
 80017ce:	eeb0 0a47 	vmov.f32	s0, s14
 80017d2:	eef0 0a67 	vmov.f32	s1, s15
 80017d6:	f007 fc97 	bl	8009108 <exp>
 80017da:	ec51 0b10 	vmov	r0, r1, d0
 80017de:	a310      	add	r3, pc, #64	; (adr r3, 8001820 <Calculate_Value+0xc0>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	f7fe ff08 	bl	80005f8 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff f9b2 	bl	8000b58 <__aeabi_d2iz>
 80017f4:	4603      	mov	r3, r0
 80017f6:	e000      	b.n	80017fa <Calculate_Value+0x9a>
	else
		return 0;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	f3af 8000 	nop.w
 8001808:	8db8bac7 	.word	0x8db8bac7
 800180c:	3f86f006 	.word	0x3f86f006
 8001810:	8f5c28f6 	.word	0x8f5c28f6
 8001814:	406485c2 	.word	0x406485c2
 8001818:	8db8bac7 	.word	0x8db8bac7
 800181c:	bf86f006 	.word	0xbf86f006
 8001820:	8f5c28f6 	.word	0x8f5c28f6
 8001824:	c06485c2 	.word	0xc06485c2

08001828 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	// idle detection needs at least one UART clock to detect the bus is idle. So
	// in the case, that the transmission length is one full buffer length
	// and the start buffer pointer is at 0, it will be also 0 at the end of the
	// transmission. In this case the DMA rollover will increment the RxRollover
	// variable first and len will not be zero.
	if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {									// Check if it is an "Idle Interrupt"
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	2b10      	cmp	r3, #16
 800183c:	d171      	bne.n	8001922 <HAL_UART_RxCpltCallback+0xfa>
		__HAL_UART_CLEAR_IDLEFLAG(&huart6);												// clear the interrupt
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b3a      	ldr	r3, [pc, #232]	; (800192c <HAL_UART_RxCpltCallback+0x104>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b38      	ldr	r3, [pc, #224]	; (800192c <HAL_UART_RxCpltCallback+0x104>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
		RxCounter++;																	// increment the Rx Counter
 8001854:	4b36      	ldr	r3, [pc, #216]	; (8001930 <HAL_UART_RxCpltCallback+0x108>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	b2da      	uxtb	r2, r3
 800185c:	4b34      	ldr	r3, [pc, #208]	; (8001930 <HAL_UART_RxCpltCallback+0x108>)
 800185e:	701a      	strb	r2, [r3, #0]

		uint8_t TxSize = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	753b      	strb	r3, [r7, #20]
		uint16_t start = RxBfrPos;														// Rx bytes start position (=last buffer position)
 8001864:	4b33      	ldr	r3, [pc, #204]	; (8001934 <HAL_UART_RxCpltCallback+0x10c>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	827b      	strh	r3, [r7, #18]
		RxBfrPos = RX_BFR_SIZE - (uint16_t)huart->hdmarx->Instance->NDTR;				// determine actual buffer position
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	b29b      	uxth	r3, r3
 8001874:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001878:	b29a      	uxth	r2, r3
 800187a:	4b2e      	ldr	r3, [pc, #184]	; (8001934 <HAL_UART_RxCpltCallback+0x10c>)
 800187c:	801a      	strh	r2, [r3, #0]
		uint16_t len = RX_BFR_SIZE;														// init len with max. size
 800187e:	2340      	movs	r3, #64	; 0x40
 8001880:	82fb      	strh	r3, [r7, #22]

		if(RxRollover < 2)  {
 8001882:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <HAL_UART_RxCpltCallback+0x110>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d819      	bhi.n	80018be <HAL_UART_RxCpltCallback+0x96>
			if(RxRollover) {															// rolled over once
 800188a:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <HAL_UART_RxCpltCallback+0x110>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00f      	beq.n	80018b2 <HAL_UART_RxCpltCallback+0x8a>
				if(RxBfrPos <= start) len = RxBfrPos + RX_BFR_SIZE - start;				// no bytes overwritten
 8001892:	4b28      	ldr	r3, [pc, #160]	; (8001934 <HAL_UART_RxCpltCallback+0x10c>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	8a7a      	ldrh	r2, [r7, #18]
 8001898:	429a      	cmp	r2, r3
 800189a:	d307      	bcc.n	80018ac <HAL_UART_RxCpltCallback+0x84>
 800189c:	4b25      	ldr	r3, [pc, #148]	; (8001934 <HAL_UART_RxCpltCallback+0x10c>)
 800189e:	881a      	ldrh	r2, [r3, #0]
 80018a0:	8a7b      	ldrh	r3, [r7, #18]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	3340      	adds	r3, #64	; 0x40
 80018a8:	82fb      	strh	r3, [r7, #22]
 80018aa:	e00a      	b.n	80018c2 <HAL_UART_RxCpltCallback+0x9a>
				else len = RX_BFR_SIZE + 1;												// bytes overwritten error
 80018ac:	2341      	movs	r3, #65	; 0x41
 80018ae:	82fb      	strh	r3, [r7, #22]
 80018b0:	e007      	b.n	80018c2 <HAL_UART_RxCpltCallback+0x9a>
			} else {
				len = RxBfrPos - start;													// no bytes overwritten
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <HAL_UART_RxCpltCallback+0x10c>)
 80018b4:	881a      	ldrh	r2, [r3, #0]
 80018b6:	8a7b      	ldrh	r3, [r7, #18]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	82fb      	strh	r3, [r7, #22]
 80018bc:	e001      	b.n	80018c2 <HAL_UART_RxCpltCallback+0x9a>
			}
		} else {
			len = RX_BFR_SIZE + 2;														// dual rollover error
 80018be:	2342      	movs	r3, #66	; 0x42
 80018c0:	82fb      	strh	r3, [r7, #22]
		}

		if(len && (len <= RX_BFR_SIZE)) {
 80018c2:	8afb      	ldrh	r3, [r7, #22]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d020      	beq.n	800190a <HAL_UART_RxCpltCallback+0xe2>
 80018c8:	8afb      	ldrh	r3, [r7, #22]
 80018ca:	2b40      	cmp	r3, #64	; 0x40
 80018cc:	d81d      	bhi.n	800190a <HAL_UART_RxCpltCallback+0xe2>
			// create response message
			//sprintf(TxBuffer, "ACK RxC:%d S:%d L:%d RO:%d RXp:%d >>", RxCounter, start, len, RxRollover, RxBfrPos);
			//TxSize = strlen(TxBuffer);
			// add received bytes to TxBuffer
			uint8_t i;
			for(i = 0; i < len; i++) *(TxBuffer + TxSize + i) = *(RxBuffer + ((start + i) % RX_BFR_SIZE));
 80018ce:	2300      	movs	r3, #0
 80018d0:	757b      	strb	r3, [r7, #21]
 80018d2:	e010      	b.n	80018f6 <HAL_UART_RxCpltCallback+0xce>
 80018d4:	8a7a      	ldrh	r2, [r7, #18]
 80018d6:	7d7b      	ldrb	r3, [r7, #21]
 80018d8:	4413      	add	r3, r2
 80018da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018de:	4a17      	ldr	r2, [pc, #92]	; (800193c <HAL_UART_RxCpltCallback+0x114>)
 80018e0:	441a      	add	r2, r3
 80018e2:	7d39      	ldrb	r1, [r7, #20]
 80018e4:	7d7b      	ldrb	r3, [r7, #21]
 80018e6:	440b      	add	r3, r1
 80018e8:	4915      	ldr	r1, [pc, #84]	; (8001940 <HAL_UART_RxCpltCallback+0x118>)
 80018ea:	440b      	add	r3, r1
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	701a      	strb	r2, [r3, #0]
 80018f0:	7d7b      	ldrb	r3, [r7, #21]
 80018f2:	3301      	adds	r3, #1
 80018f4:	757b      	strb	r3, [r7, #21]
 80018f6:	7d7b      	ldrb	r3, [r7, #21]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	8afa      	ldrh	r2, [r7, #22]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d8e9      	bhi.n	80018d4 <HAL_UART_RxCpltCallback+0xac>
			TxSize += i;
 8001900:	7d3a      	ldrb	r2, [r7, #20]
 8001902:	7d7b      	ldrb	r3, [r7, #21]
 8001904:	4413      	add	r3, r2
 8001906:	753b      	strb	r3, [r7, #20]
		if(len && (len <= RX_BFR_SIZE)) {
 8001908:	e004      	b.n	8001914 <HAL_UART_RxCpltCallback+0xec>
		} else {
			// buffer overflow error:
			//sprintf(TxBuffer, "NAK RX BUFFER OVERFLOW ERROR %d\r\n", (len - RX_BFR_SIZE));
			TxSize = strlen(TxBuffer);
 800190a:	480d      	ldr	r0, [pc, #52]	; (8001940 <HAL_UART_RxCpltCallback+0x118>)
 800190c:	f7fe fc60 	bl	80001d0 <strlen>
 8001910:	4603      	mov	r3, r0
 8001912:	753b      	strb	r3, [r7, #20]
		}
      Receive_Serial(TxBuffer);
 8001914:	480a      	ldr	r0, [pc, #40]	; (8001940 <HAL_UART_RxCpltCallback+0x118>)
 8001916:	f7ff fd77 	bl	8001408 <Receive_Serial>
	  Set_Motor_PID();
 800191a:	f7ff fda7 	bl	800146c <Set_Motor_PID>
	  Set_Motor_PWM();
 800191e:	f7ff fe3f 	bl	80015a0 <Set_Motor_PWM>
}
}
 8001922:	bf00      	nop
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000aa0 	.word	0x20000aa0
 8001930:	20000201 	.word	0x20000201
 8001934:	20000202 	.word	0x20000202
 8001938:	20000200 	.word	0x20000200
 800193c:	20000668 	.word	0x20000668
 8001940:	200006ac 	.word	0x200006ac

08001944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001948:	b672      	cpsid	i
}
 800194a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800194c:	e7fe      	b.n	800194c <Error_Handler+0x8>
	...

08001950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_MspInit+0x4c>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	4a0f      	ldr	r2, [pc, #60]	; (800199c <HAL_MspInit+0x4c>)
 8001960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001964:	6453      	str	r3, [r2, #68]	; 0x44
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <HAL_MspInit+0x4c>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_MspInit+0x4c>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a08      	ldr	r2, [pc, #32]	; (800199c <HAL_MspInit+0x4c>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_MspInit+0x4c>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800198e:	2007      	movs	r0, #7
 8001990:	f001 f872 	bl	8002a78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <NMI_Handler+0x4>

080019a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <MemManage_Handler+0x4>

080019b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <BusFault_Handler+0x4>

080019b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <UsageFault_Handler+0x4>

080019be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ec:	f000 ff30 	bl	8002850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <DMA1_Stream1_IRQHandler+0x10>)
 80019fa:	f001 fa17 	bl	8002e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000093c 	.word	0x2000093c

08001a08 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <DMA1_Stream3_IRQHandler+0x10>)
 8001a0e:	f001 fa0d 	bl	8002e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200009e0 	.word	0x200009e0

08001a1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <USART3_IRQHandler+0x10>)
 8001a22:	f003 fd6b 	bl	80054fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000099c 	.word	0x2000099c

08001a30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <TIM6_DAC_IRQHandler+0x10>)
 8001a36:	f002 fda3 	bl	8004580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000804 	.word	0x20000804

08001a44 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <DMA2_Stream1_IRQHandler+0x10>)
 8001a4a:	f001 f9ef 	bl	8002e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200008dc 	.word	0x200008dc

08001a58 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <DMA2_Stream6_IRQHandler+0x10>)
 8001a5e:	f001 f9e5 	bl	8002e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000a40 	.word	0x20000a40

08001a6c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a70:	4807      	ldr	r0, [pc, #28]	; (8001a90 <USART6_IRQHandler+0x24>)
 8001a72:	f003 fd43 	bl	80054fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
	  if(__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <USART6_IRQHandler+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	2b10      	cmp	r3, #16
 8001a82:	d102      	bne.n	8001a8a <USART6_IRQHandler+0x1e>
  HAL_UART_RxCpltCallback(&huart6);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <USART6_IRQHandler+0x24>)
 8001a86:	f7ff fecf 	bl	8001828 <HAL_UART_RxCpltCallback>
	  }

  /* USER CODE END USART6_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000aa0 	.word	0x20000aa0

08001a94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
	return 1;
 8001a98:	2301      	movs	r3, #1
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <_kill>:

int _kill(int pid, int sig)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001aae:	f004 fb7b 	bl	80061a8 <__errno>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2216      	movs	r2, #22
 8001ab6:	601a      	str	r2, [r3, #0]
	return -1;
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <_exit>:

void _exit (int status)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ffe7 	bl	8001aa4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ad6:	e7fe      	b.n	8001ad6 <_exit+0x12>

08001ad8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	e00a      	b.n	8001b00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aea:	f3af 8000 	nop.w
 8001aee:	4601      	mov	r1, r0
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	60ba      	str	r2, [r7, #8]
 8001af6:	b2ca      	uxtb	r2, r1
 8001af8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3301      	adds	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dbf0      	blt.n	8001aea <_read+0x12>
	}

return len;
 8001b08:	687b      	ldr	r3, [r7, #4]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e009      	b.n	8001b38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	60ba      	str	r2, [r7, #8]
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbf1      	blt.n	8001b24 <_write+0x12>
	}
	return len;
 8001b40:	687b      	ldr	r3, [r7, #4]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_close>:

int _close(int file)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
	return -1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b72:	605a      	str	r2, [r3, #4]
	return 0;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_isatty>:

int _isatty(int file)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
	return 1;
 8001b8a:	2301      	movs	r3, #1
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bbc:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <_sbrk+0x5c>)
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <_sbrk+0x60>)
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc8:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <_sbrk+0x64>)
 8001bd2:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <_sbrk+0x68>)
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d207      	bcs.n	8001bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be4:	f004 fae0 	bl	80061a8 <__errno>
 8001be8:	4603      	mov	r3, r0
 8001bea:	220c      	movs	r2, #12
 8001bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	e009      	b.n	8001c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <_sbrk+0x64>)
 8001c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20020000 	.word	0x20020000
 8001c14:	00000400 	.word	0x00000400
 8001c18:	20000658 	.word	0x20000658
 8001c1c:	20000af8 	.word	0x20000af8

08001c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <SystemInit+0x20>)
 8001c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <SystemInit+0x20>)
 8001c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b096      	sub	sp, #88	; 0x58
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]
 8001c72:	615a      	str	r2, [r3, #20]
 8001c74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	2220      	movs	r2, #32
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f004 fabd 	bl	80061fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c82:	4b50      	ldr	r3, [pc, #320]	; (8001dc4 <MX_TIM1_Init+0x180>)
 8001c84:	4a50      	ldr	r2, [pc, #320]	; (8001dc8 <MX_TIM1_Init+0x184>)
 8001c86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001c88:	4b4e      	ldr	r3, [pc, #312]	; (8001dc4 <MX_TIM1_Init+0x180>)
 8001c8a:	22a7      	movs	r2, #167	; 0xa7
 8001c8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8e:	4b4d      	ldr	r3, [pc, #308]	; (8001dc4 <MX_TIM1_Init+0x180>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8001c94:	4b4b      	ldr	r3, [pc, #300]	; (8001dc4 <MX_TIM1_Init+0x180>)
 8001c96:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9c:	4b49      	ldr	r3, [pc, #292]	; (8001dc4 <MX_TIM1_Init+0x180>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ca2:	4b48      	ldr	r3, [pc, #288]	; (8001dc4 <MX_TIM1_Init+0x180>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca8:	4b46      	ldr	r3, [pc, #280]	; (8001dc4 <MX_TIM1_Init+0x180>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cae:	4845      	ldr	r0, [pc, #276]	; (8001dc4 <MX_TIM1_Init+0x180>)
 8001cb0:	f002 f950 	bl	8003f54 <HAL_TIM_Base_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001cba:	f7ff fe43 	bl	8001944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cc8:	4619      	mov	r1, r3
 8001cca:	483e      	ldr	r0, [pc, #248]	; (8001dc4 <MX_TIM1_Init+0x180>)
 8001ccc:	f002 fe1e 	bl	800490c <HAL_TIM_ConfigClockSource>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001cd6:	f7ff fe35 	bl	8001944 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cda:	483a      	ldr	r0, [pc, #232]	; (8001dc4 <MX_TIM1_Init+0x180>)
 8001cdc:	f002 f9fa 	bl	80040d4 <HAL_TIM_PWM_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001ce6:	f7ff fe2d 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4832      	ldr	r0, [pc, #200]	; (8001dc4 <MX_TIM1_Init+0x180>)
 8001cfa:	f003 fa0d 	bl	8005118 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d04:	f7ff fe1e 	bl	8001944 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d08:	2360      	movs	r3, #96	; 0x60
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d14:	2300      	movs	r3, #0
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d20:	2300      	movs	r3, #0
 8001d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d28:	2200      	movs	r2, #0
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4825      	ldr	r0, [pc, #148]	; (8001dc4 <MX_TIM1_Init+0x180>)
 8001d2e:	f002 fd2f 	bl	8004790 <HAL_TIM_PWM_ConfigChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001d38:	f7ff fe04 	bl	8001944 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d40:	2204      	movs	r2, #4
 8001d42:	4619      	mov	r1, r3
 8001d44:	481f      	ldr	r0, [pc, #124]	; (8001dc4 <MX_TIM1_Init+0x180>)
 8001d46:	f002 fd23 	bl	8004790 <HAL_TIM_PWM_ConfigChannel>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001d50:	f7ff fdf8 	bl	8001944 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d58:	2208      	movs	r2, #8
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4819      	ldr	r0, [pc, #100]	; (8001dc4 <MX_TIM1_Init+0x180>)
 8001d5e:	f002 fd17 	bl	8004790 <HAL_TIM_PWM_ConfigChannel>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001d68:	f7ff fdec 	bl	8001944 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d70:	220c      	movs	r2, #12
 8001d72:	4619      	mov	r1, r3
 8001d74:	4813      	ldr	r0, [pc, #76]	; (8001dc4 <MX_TIM1_Init+0x180>)
 8001d76:	f002 fd0b 	bl	8004790 <HAL_TIM_PWM_ConfigChannel>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001d80:	f7ff fde0 	bl	8001944 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	4619      	mov	r1, r3
 8001da6:	4807      	ldr	r0, [pc, #28]	; (8001dc4 <MX_TIM1_Init+0x180>)
 8001da8:	f003 fa32 	bl	8005210 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001db2:	f7ff fdc7 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001db6:	4803      	ldr	r0, [pc, #12]	; (8001dc4 <MX_TIM1_Init+0x180>)
 8001db8:	f000 fad0 	bl	800235c <HAL_TIM_MspPostInit>

}
 8001dbc:	bf00      	nop
 8001dbe:	3758      	adds	r7, #88	; 0x58
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	2000084c 	.word	0x2000084c
 8001dc8:	40010000 	.word	0x40010000

08001dcc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08c      	sub	sp, #48	; 0x30
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	2224      	movs	r2, #36	; 0x24
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f004 fa0e 	bl	80061fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001de8:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <MX_TIM2_Init+0xa4>)
 8001dea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <MX_TIM2_Init+0xa4>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <MX_TIM2_Init+0xa4>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <MX_TIM2_Init+0xa4>)
 8001dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <MX_TIM2_Init+0xa4>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <MX_TIM2_Init+0xa4>)
 8001e0c:	2280      	movs	r2, #128	; 0x80
 8001e0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e10:	2303      	movs	r3, #3
 8001e12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001e20:	230a      	movs	r3, #10
 8001e22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001e30:	230a      	movs	r3, #10
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001e34:	f107 030c 	add.w	r3, r7, #12
 8001e38:	4619      	mov	r1, r3
 8001e3a:	480d      	ldr	r0, [pc, #52]	; (8001e70 <MX_TIM2_Init+0xa4>)
 8001e3c:	f002 fa6c 	bl	8004318 <HAL_TIM_Encoder_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001e46:	f7ff fd7d 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	4619      	mov	r1, r3
 8001e56:	4806      	ldr	r0, [pc, #24]	; (8001e70 <MX_TIM2_Init+0xa4>)
 8001e58:	f003 f95e 	bl	8005118 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001e62:	f7ff fd6f 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e66:	bf00      	nop
 8001e68:	3730      	adds	r7, #48	; 0x30
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000894 	.word	0x20000894

08001e74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08c      	sub	sp, #48	; 0x30
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e7a:	f107 030c 	add.w	r3, r7, #12
 8001e7e:	2224      	movs	r2, #36	; 0x24
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f004 f9ba 	bl	80061fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e90:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <MX_TIM3_Init+0xa0>)
 8001e92:	4a21      	ldr	r2, [pc, #132]	; (8001f18 <MX_TIM3_Init+0xa4>)
 8001e94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e96:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <MX_TIM3_Init+0xa0>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <MX_TIM3_Init+0xa0>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <MX_TIM3_Init+0xa0>)
 8001ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eaa:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <MX_TIM3_Init+0xa0>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eb0:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <MX_TIM3_Init+0xa0>)
 8001eb2:	2280      	movs	r2, #128	; 0x80
 8001eb4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001ec6:	230a      	movs	r3, #10
 8001ec8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001ed6:	230a      	movs	r3, #10
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	4619      	mov	r1, r3
 8001ee0:	480c      	ldr	r0, [pc, #48]	; (8001f14 <MX_TIM3_Init+0xa0>)
 8001ee2:	f002 fa19 	bl	8004318 <HAL_TIM_Encoder_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001eec:	f7ff fd2a 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	4619      	mov	r1, r3
 8001efc:	4805      	ldr	r0, [pc, #20]	; (8001f14 <MX_TIM3_Init+0xa0>)
 8001efe:	f003 f90b 	bl	8005118 <HAL_TIMEx_MasterConfigSynchronization>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001f08:	f7ff fd1c 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f0c:	bf00      	nop
 8001f0e:	3730      	adds	r7, #48	; 0x30
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200007bc 	.word	0x200007bc
 8001f18:	40000400 	.word	0x40000400

08001f1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08c      	sub	sp, #48	; 0x30
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	2224      	movs	r2, #36	; 0x24
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f004 f966 	bl	80061fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f38:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <MX_TIM4_Init+0xa0>)
 8001f3a:	4a21      	ldr	r2, [pc, #132]	; (8001fc0 <MX_TIM4_Init+0xa4>)
 8001f3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <MX_TIM4_Init+0xa0>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <MX_TIM4_Init+0xa0>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <MX_TIM4_Init+0xa0>)
 8001f4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <MX_TIM4_Init+0xa0>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <MX_TIM4_Init+0xa0>)
 8001f5a:	2280      	movs	r2, #128	; 0x80
 8001f5c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f66:	2301      	movs	r3, #1
 8001f68:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001f6e:	230a      	movs	r3, #10
 8001f70:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f76:	2301      	movs	r3, #1
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001f7e:	230a      	movs	r3, #10
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	4619      	mov	r1, r3
 8001f88:	480c      	ldr	r0, [pc, #48]	; (8001fbc <MX_TIM4_Init+0xa0>)
 8001f8a:	f002 f9c5 	bl	8004318 <HAL_TIM_Encoder_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001f94:	f7ff fcd6 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_TIM4_Init+0xa0>)
 8001fa6:	f003 f8b7 	bl	8005118 <HAL_TIMEx_MasterConfigSynchronization>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001fb0:	f7ff fcc8 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001fb4:	bf00      	nop
 8001fb6:	3730      	adds	r7, #48	; 0x30
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	2000072c 	.word	0x2000072c
 8001fc0:	40000800 	.word	0x40000800

08001fc4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08c      	sub	sp, #48	; 0x30
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	2224      	movs	r2, #36	; 0x24
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f004 f912 	bl	80061fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001fe0:	4b20      	ldr	r3, [pc, #128]	; (8002064 <MX_TIM5_Init+0xa0>)
 8001fe2:	4a21      	ldr	r2, [pc, #132]	; (8002068 <MX_TIM5_Init+0xa4>)
 8001fe4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001fe6:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <MX_TIM5_Init+0xa0>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fec:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <MX_TIM5_Init+0xa0>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <MX_TIM5_Init+0xa0>)
 8001ff4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <MX_TIM5_Init+0xa0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002000:	4b18      	ldr	r3, [pc, #96]	; (8002064 <MX_TIM5_Init+0xa0>)
 8002002:	2280      	movs	r2, #128	; 0x80
 8002004:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002006:	2301      	movs	r3, #1
 8002008:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800200e:	2301      	movs	r3, #1
 8002010:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002016:	230a      	movs	r3, #10
 8002018:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800201e:	2301      	movs	r3, #1
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002022:	2300      	movs	r3, #0
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002026:	230a      	movs	r3, #10
 8002028:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800202a:	f107 030c 	add.w	r3, r7, #12
 800202e:	4619      	mov	r1, r3
 8002030:	480c      	ldr	r0, [pc, #48]	; (8002064 <MX_TIM5_Init+0xa0>)
 8002032:	f002 f971 	bl	8004318 <HAL_TIM_Encoder_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800203c:	f7ff fc82 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002040:	2300      	movs	r3, #0
 8002042:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	4619      	mov	r1, r3
 800204c:	4805      	ldr	r0, [pc, #20]	; (8002064 <MX_TIM5_Init+0xa0>)
 800204e:	f003 f863 	bl	8005118 <HAL_TIMEx_MasterConfigSynchronization>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002058:	f7ff fc74 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800205c:	bf00      	nop
 800205e:	3730      	adds	r7, #48	; 0x30
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000774 	.word	0x20000774
 8002068:	40000c00 	.word	0x40000c00

0800206c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002072:	463b      	mov	r3, r7
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <MX_TIM6_Init+0x64>)
 800207c:	4a15      	ldr	r2, [pc, #84]	; (80020d4 <MX_TIM6_Init+0x68>)
 800207e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 41999;
 8002080:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <MX_TIM6_Init+0x64>)
 8002082:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002086:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <MX_TIM6_Init+0x64>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 199;
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <MX_TIM6_Init+0x64>)
 8002090:	22c7      	movs	r2, #199	; 0xc7
 8002092:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <MX_TIM6_Init+0x64>)
 8002096:	2200      	movs	r2, #0
 8002098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800209a:	480d      	ldr	r0, [pc, #52]	; (80020d0 <MX_TIM6_Init+0x64>)
 800209c:	f001 ff5a 	bl	8003f54 <HAL_TIM_Base_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80020a6:	f7ff fc4d 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020b2:	463b      	mov	r3, r7
 80020b4:	4619      	mov	r1, r3
 80020b6:	4806      	ldr	r0, [pc, #24]	; (80020d0 <MX_TIM6_Init+0x64>)
 80020b8:	f003 f82e 	bl	8005118 <HAL_TIMEx_MasterConfigSynchronization>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80020c2:	f7ff fc3f 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000804 	.word	0x20000804
 80020d4:	40001000 	.word	0x40001000

080020d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a18      	ldr	r2, [pc, #96]	; (8002148 <HAL_TIM_Base_MspInit+0x70>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d10e      	bne.n	8002108 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b17      	ldr	r3, [pc, #92]	; (800214c <HAL_TIM_Base_MspInit+0x74>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	4a16      	ldr	r2, [pc, #88]	; (800214c <HAL_TIM_Base_MspInit+0x74>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6453      	str	r3, [r2, #68]	; 0x44
 80020fa:	4b14      	ldr	r3, [pc, #80]	; (800214c <HAL_TIM_Base_MspInit+0x74>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002106:	e01a      	b.n	800213e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a10      	ldr	r2, [pc, #64]	; (8002150 <HAL_TIM_Base_MspInit+0x78>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d115      	bne.n	800213e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	4b0d      	ldr	r3, [pc, #52]	; (800214c <HAL_TIM_Base_MspInit+0x74>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a0c      	ldr	r2, [pc, #48]	; (800214c <HAL_TIM_Base_MspInit+0x74>)
 800211c:	f043 0310 	orr.w	r3, r3, #16
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_TIM_Base_MspInit+0x74>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	2100      	movs	r1, #0
 8002132:	2036      	movs	r0, #54	; 0x36
 8002134:	f000 fcab 	bl	8002a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002138:	2036      	movs	r0, #54	; 0x36
 800213a:	f000 fcc4 	bl	8002ac6 <HAL_NVIC_EnableIRQ>
}
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40010000 	.word	0x40010000
 800214c:	40023800 	.word	0x40023800
 8002150:	40001000 	.word	0x40001000

08002154 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b090      	sub	sp, #64	; 0x40
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002174:	d14a      	bne.n	800220c <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
 800217a:	4b71      	ldr	r3, [pc, #452]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	4a70      	ldr	r2, [pc, #448]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6413      	str	r3, [r2, #64]	; 0x40
 8002186:	4b6e      	ldr	r3, [pc, #440]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002190:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
 8002196:	4b6a      	ldr	r3, [pc, #424]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a69      	ldr	r2, [pc, #420]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b67      	ldr	r3, [pc, #412]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
 80021b2:	4b63      	ldr	r3, [pc, #396]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a62      	ldr	r2, [pc, #392]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b60      	ldr	r3, [pc, #384]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	623b      	str	r3, [r7, #32]
 80021c8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021ca:	2320      	movs	r3, #32
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	2300      	movs	r3, #0
 80021d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021da:	2301      	movs	r3, #1
 80021dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021e2:	4619      	mov	r1, r3
 80021e4:	4857      	ldr	r0, [pc, #348]	; (8002344 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80021e6:	f001 f88b 	bl	8003300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021ea:	2308      	movs	r3, #8
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021fa:	2301      	movs	r3, #1
 80021fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002202:	4619      	mov	r1, r3
 8002204:	4850      	ldr	r0, [pc, #320]	; (8002348 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002206:	f001 f87b 	bl	8003300 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800220a:	e095      	b.n	8002338 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM3)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a4e      	ldr	r2, [pc, #312]	; (800234c <HAL_TIM_Encoder_MspInit+0x1f8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d12c      	bne.n	8002270 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
 800221a:	4b49      	ldr	r3, [pc, #292]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a48      	ldr	r2, [pc, #288]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
 8002226:	4b46      	ldr	r3, [pc, #280]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	4b42      	ldr	r3, [pc, #264]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a41      	ldr	r2, [pc, #260]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b3f      	ldr	r3, [pc, #252]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800224e:	23c0      	movs	r3, #192	; 0xc0
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225a:	2300      	movs	r3, #0
 800225c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800225e:	2302      	movs	r3, #2
 8002260:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002266:	4619      	mov	r1, r3
 8002268:	4836      	ldr	r0, [pc, #216]	; (8002344 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800226a:	f001 f849 	bl	8003300 <HAL_GPIO_Init>
}
 800226e:	e063      	b.n	8002338 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM4)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a36      	ldr	r2, [pc, #216]	; (8002350 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d12d      	bne.n	80022d6 <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	4b30      	ldr	r3, [pc, #192]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4a2f      	ldr	r2, [pc, #188]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6413      	str	r3, [r2, #64]	; 0x40
 800228a:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	4b29      	ldr	r3, [pc, #164]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a28      	ldr	r2, [pc, #160]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80022a0:	f043 0308 	orr.w	r3, r3, #8
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80022b2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022c4:	2302      	movs	r3, #2
 80022c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022cc:	4619      	mov	r1, r3
 80022ce:	4821      	ldr	r0, [pc, #132]	; (8002354 <HAL_TIM_Encoder_MspInit+0x200>)
 80022d0:	f001 f816 	bl	8003300 <HAL_GPIO_Init>
}
 80022d4:	e030      	b.n	8002338 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM5)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a1f      	ldr	r2, [pc, #124]	; (8002358 <HAL_TIM_Encoder_MspInit+0x204>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d12b      	bne.n	8002338 <HAL_TIM_Encoder_MspInit+0x1e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	4b16      	ldr	r3, [pc, #88]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	4a15      	ldr	r2, [pc, #84]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80022ea:	f043 0308 	orr.w	r3, r3, #8
 80022ee:	6413      	str	r3, [r2, #64]	; 0x40
 80022f0:	4b13      	ldr	r3, [pc, #76]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	4a0e      	ldr	r2, [pc, #56]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6313      	str	r3, [r2, #48]	; 0x30
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002318:	2303      	movs	r3, #3
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	2300      	movs	r3, #0
 8002326:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002328:	2302      	movs	r3, #2
 800232a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002330:	4619      	mov	r1, r3
 8002332:	4804      	ldr	r0, [pc, #16]	; (8002344 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002334:	f000 ffe4 	bl	8003300 <HAL_GPIO_Init>
}
 8002338:	bf00      	nop
 800233a:	3740      	adds	r7, #64	; 0x40
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40023800 	.word	0x40023800
 8002344:	40020000 	.word	0x40020000
 8002348:	40020400 	.word	0x40020400
 800234c:	40000400 	.word	0x40000400
 8002350:	40000800 	.word	0x40000800
 8002354:	40020c00 	.word	0x40020c00
 8002358:	40000c00 	.word	0x40000c00

0800235c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 030c 	add.w	r3, r7, #12
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <HAL_TIM_MspPostInit+0x68>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d11e      	bne.n	80023bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <HAL_TIM_MspPostInit+0x6c>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a10      	ldr	r2, [pc, #64]	; (80023c8 <HAL_TIM_MspPostInit+0x6c>)
 8002388:	f043 0310 	orr.w	r3, r3, #16
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <HAL_TIM_MspPostInit+0x6c>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800239a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800239e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a0:	2302      	movs	r3, #2
 80023a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023ac:	2301      	movs	r3, #1
 80023ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	4619      	mov	r1, r3
 80023b6:	4805      	ldr	r0, [pc, #20]	; (80023cc <HAL_TIM_MspPostInit+0x70>)
 80023b8:	f000 ffa2 	bl	8003300 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023bc:	bf00      	nop
 80023be:	3720      	adds	r7, #32
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40021000 	.word	0x40021000

080023d0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023d6:	4a12      	ldr	r2, [pc, #72]	; (8002420 <MX_USART3_UART_Init+0x50>)
 80023d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023f6:	220c      	movs	r2, #12
 80023f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <MX_USART3_UART_Init+0x4c>)
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002406:	4805      	ldr	r0, [pc, #20]	; (800241c <MX_USART3_UART_Init+0x4c>)
 8002408:	f002 ff68 	bl	80052dc <HAL_UART_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002412:	f7ff fa97 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	2000099c 	.word	0x2000099c
 8002420:	40004800 	.word	0x40004800

08002424 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <MX_USART6_UART_Init+0x4c>)
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <MX_USART6_UART_Init+0x50>)
 800242c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <MX_USART6_UART_Init+0x4c>)
 8002430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002434:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002436:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <MX_USART6_UART_Init+0x4c>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <MX_USART6_UART_Init+0x4c>)
 800243e:	2200      	movs	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <MX_USART6_UART_Init+0x4c>)
 8002444:	2200      	movs	r2, #0
 8002446:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <MX_USART6_UART_Init+0x4c>)
 800244a:	220c      	movs	r2, #12
 800244c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <MX_USART6_UART_Init+0x4c>)
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <MX_USART6_UART_Init+0x4c>)
 8002456:	2200      	movs	r2, #0
 8002458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800245a:	4805      	ldr	r0, [pc, #20]	; (8002470 <MX_USART6_UART_Init+0x4c>)
 800245c:	f002 ff3e 	bl	80052dc <HAL_UART_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002466:	f7ff fa6d 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000aa0 	.word	0x20000aa0
 8002474:	40011400 	.word	0x40011400

08002478 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08c      	sub	sp, #48	; 0x30
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 031c 	add.w	r3, r7, #28
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4aa3      	ldr	r2, [pc, #652]	; (8002724 <HAL_UART_MspInit+0x2ac>)
 8002496:	4293      	cmp	r3, r2
 8002498:	f040 80a6 	bne.w	80025e8 <HAL_UART_MspInit+0x170>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]
 80024a0:	4ba1      	ldr	r3, [pc, #644]	; (8002728 <HAL_UART_MspInit+0x2b0>)
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	4aa0      	ldr	r2, [pc, #640]	; (8002728 <HAL_UART_MspInit+0x2b0>)
 80024a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024aa:	6413      	str	r3, [r2, #64]	; 0x40
 80024ac:	4b9e      	ldr	r3, [pc, #632]	; (8002728 <HAL_UART_MspInit+0x2b0>)
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	4b9a      	ldr	r3, [pc, #616]	; (8002728 <HAL_UART_MspInit+0x2b0>)
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	4a99      	ldr	r2, [pc, #612]	; (8002728 <HAL_UART_MspInit+0x2b0>)
 80024c2:	f043 0302 	orr.w	r3, r3, #2
 80024c6:	6313      	str	r3, [r2, #48]	; 0x30
 80024c8:	4b97      	ldr	r3, [pc, #604]	; (8002728 <HAL_UART_MspInit+0x2b0>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e2:	2303      	movs	r3, #3
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024e6:	2307      	movs	r3, #7
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ea:	f107 031c 	add.w	r3, r7, #28
 80024ee:	4619      	mov	r1, r3
 80024f0:	488e      	ldr	r0, [pc, #568]	; (800272c <HAL_UART_MspInit+0x2b4>)
 80024f2:	f000 ff05 	bl	8003300 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80024f6:	4b8e      	ldr	r3, [pc, #568]	; (8002730 <HAL_UART_MspInit+0x2b8>)
 80024f8:	4a8e      	ldr	r2, [pc, #568]	; (8002734 <HAL_UART_MspInit+0x2bc>)
 80024fa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80024fc:	4b8c      	ldr	r3, [pc, #560]	; (8002730 <HAL_UART_MspInit+0x2b8>)
 80024fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002502:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002504:	4b8a      	ldr	r3, [pc, #552]	; (8002730 <HAL_UART_MspInit+0x2b8>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800250a:	4b89      	ldr	r3, [pc, #548]	; (8002730 <HAL_UART_MspInit+0x2b8>)
 800250c:	2200      	movs	r2, #0
 800250e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002510:	4b87      	ldr	r3, [pc, #540]	; (8002730 <HAL_UART_MspInit+0x2b8>)
 8002512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002516:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002518:	4b85      	ldr	r3, [pc, #532]	; (8002730 <HAL_UART_MspInit+0x2b8>)
 800251a:	2200      	movs	r2, #0
 800251c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800251e:	4b84      	ldr	r3, [pc, #528]	; (8002730 <HAL_UART_MspInit+0x2b8>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002524:	4b82      	ldr	r3, [pc, #520]	; (8002730 <HAL_UART_MspInit+0x2b8>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800252a:	4b81      	ldr	r3, [pc, #516]	; (8002730 <HAL_UART_MspInit+0x2b8>)
 800252c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002530:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002532:	4b7f      	ldr	r3, [pc, #508]	; (8002730 <HAL_UART_MspInit+0x2b8>)
 8002534:	2204      	movs	r2, #4
 8002536:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002538:	4b7d      	ldr	r3, [pc, #500]	; (8002730 <HAL_UART_MspInit+0x2b8>)
 800253a:	2203      	movs	r2, #3
 800253c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800253e:	4b7c      	ldr	r3, [pc, #496]	; (8002730 <HAL_UART_MspInit+0x2b8>)
 8002540:	2200      	movs	r2, #0
 8002542:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002544:	4b7a      	ldr	r3, [pc, #488]	; (8002730 <HAL_UART_MspInit+0x2b8>)
 8002546:	2200      	movs	r2, #0
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800254a:	4879      	ldr	r0, [pc, #484]	; (8002730 <HAL_UART_MspInit+0x2b8>)
 800254c:	f000 fad6 	bl	8002afc <HAL_DMA_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8002556:	f7ff f9f5 	bl	8001944 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a74      	ldr	r2, [pc, #464]	; (8002730 <HAL_UART_MspInit+0x2b8>)
 800255e:	639a      	str	r2, [r3, #56]	; 0x38
 8002560:	4a73      	ldr	r2, [pc, #460]	; (8002730 <HAL_UART_MspInit+0x2b8>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002566:	4b74      	ldr	r3, [pc, #464]	; (8002738 <HAL_UART_MspInit+0x2c0>)
 8002568:	4a74      	ldr	r2, [pc, #464]	; (800273c <HAL_UART_MspInit+0x2c4>)
 800256a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800256c:	4b72      	ldr	r3, [pc, #456]	; (8002738 <HAL_UART_MspInit+0x2c0>)
 800256e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002572:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002574:	4b70      	ldr	r3, [pc, #448]	; (8002738 <HAL_UART_MspInit+0x2c0>)
 8002576:	2240      	movs	r2, #64	; 0x40
 8002578:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800257a:	4b6f      	ldr	r3, [pc, #444]	; (8002738 <HAL_UART_MspInit+0x2c0>)
 800257c:	2200      	movs	r2, #0
 800257e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002580:	4b6d      	ldr	r3, [pc, #436]	; (8002738 <HAL_UART_MspInit+0x2c0>)
 8002582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002586:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002588:	4b6b      	ldr	r3, [pc, #428]	; (8002738 <HAL_UART_MspInit+0x2c0>)
 800258a:	2200      	movs	r2, #0
 800258c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800258e:	4b6a      	ldr	r3, [pc, #424]	; (8002738 <HAL_UART_MspInit+0x2c0>)
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002594:	4b68      	ldr	r3, [pc, #416]	; (8002738 <HAL_UART_MspInit+0x2c0>)
 8002596:	2200      	movs	r2, #0
 8002598:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800259a:	4b67      	ldr	r3, [pc, #412]	; (8002738 <HAL_UART_MspInit+0x2c0>)
 800259c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80025a0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80025a2:	4b65      	ldr	r3, [pc, #404]	; (8002738 <HAL_UART_MspInit+0x2c0>)
 80025a4:	2204      	movs	r2, #4
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80025a8:	4b63      	ldr	r3, [pc, #396]	; (8002738 <HAL_UART_MspInit+0x2c0>)
 80025aa:	2203      	movs	r2, #3
 80025ac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80025ae:	4b62      	ldr	r3, [pc, #392]	; (8002738 <HAL_UART_MspInit+0x2c0>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80025b4:	4b60      	ldr	r3, [pc, #384]	; (8002738 <HAL_UART_MspInit+0x2c0>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80025ba:	485f      	ldr	r0, [pc, #380]	; (8002738 <HAL_UART_MspInit+0x2c0>)
 80025bc:	f000 fa9e 	bl	8002afc <HAL_DMA_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_UART_MspInit+0x152>
    {
      Error_Handler();
 80025c6:	f7ff f9bd 	bl	8001944 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a5a      	ldr	r2, [pc, #360]	; (8002738 <HAL_UART_MspInit+0x2c0>)
 80025ce:	635a      	str	r2, [r3, #52]	; 0x34
 80025d0:	4a59      	ldr	r2, [pc, #356]	; (8002738 <HAL_UART_MspInit+0x2c0>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2100      	movs	r1, #0
 80025da:	2027      	movs	r0, #39	; 0x27
 80025dc:	f000 fa57 	bl	8002a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025e0:	2027      	movs	r0, #39	; 0x27
 80025e2:	f000 fa70 	bl	8002ac6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80025e6:	e098      	b.n	800271a <HAL_UART_MspInit+0x2a2>
  else if(uartHandle->Instance==USART6)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a54      	ldr	r2, [pc, #336]	; (8002740 <HAL_UART_MspInit+0x2c8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	f040 8093 	bne.w	800271a <HAL_UART_MspInit+0x2a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	4b4b      	ldr	r3, [pc, #300]	; (8002728 <HAL_UART_MspInit+0x2b0>)
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	4a4a      	ldr	r2, [pc, #296]	; (8002728 <HAL_UART_MspInit+0x2b0>)
 80025fe:	f043 0320 	orr.w	r3, r3, #32
 8002602:	6453      	str	r3, [r2, #68]	; 0x44
 8002604:	4b48      	ldr	r3, [pc, #288]	; (8002728 <HAL_UART_MspInit+0x2b0>)
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	4b44      	ldr	r3, [pc, #272]	; (8002728 <HAL_UART_MspInit+0x2b0>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	4a43      	ldr	r2, [pc, #268]	; (8002728 <HAL_UART_MspInit+0x2b0>)
 800261a:	f043 0304 	orr.w	r3, r3, #4
 800261e:	6313      	str	r3, [r2, #48]	; 0x30
 8002620:	4b41      	ldr	r3, [pc, #260]	; (8002728 <HAL_UART_MspInit+0x2b0>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800262c:	23c0      	movs	r3, #192	; 0xc0
 800262e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002630:	2302      	movs	r3, #2
 8002632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002638:	2303      	movs	r3, #3
 800263a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800263c:	2308      	movs	r3, #8
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002640:	f107 031c 	add.w	r3, r7, #28
 8002644:	4619      	mov	r1, r3
 8002646:	483f      	ldr	r0, [pc, #252]	; (8002744 <HAL_UART_MspInit+0x2cc>)
 8002648:	f000 fe5a 	bl	8003300 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800264c:	4b3e      	ldr	r3, [pc, #248]	; (8002748 <HAL_UART_MspInit+0x2d0>)
 800264e:	4a3f      	ldr	r2, [pc, #252]	; (800274c <HAL_UART_MspInit+0x2d4>)
 8002650:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002652:	4b3d      	ldr	r3, [pc, #244]	; (8002748 <HAL_UART_MspInit+0x2d0>)
 8002654:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002658:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <HAL_UART_MspInit+0x2d0>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002660:	4b39      	ldr	r3, [pc, #228]	; (8002748 <HAL_UART_MspInit+0x2d0>)
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002666:	4b38      	ldr	r3, [pc, #224]	; (8002748 <HAL_UART_MspInit+0x2d0>)
 8002668:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800266c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800266e:	4b36      	ldr	r3, [pc, #216]	; (8002748 <HAL_UART_MspInit+0x2d0>)
 8002670:	2200      	movs	r2, #0
 8002672:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002674:	4b34      	ldr	r3, [pc, #208]	; (8002748 <HAL_UART_MspInit+0x2d0>)
 8002676:	2200      	movs	r2, #0
 8002678:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800267a:	4b33      	ldr	r3, [pc, #204]	; (8002748 <HAL_UART_MspInit+0x2d0>)
 800267c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002680:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002682:	4b31      	ldr	r3, [pc, #196]	; (8002748 <HAL_UART_MspInit+0x2d0>)
 8002684:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002688:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800268a:	4b2f      	ldr	r3, [pc, #188]	; (8002748 <HAL_UART_MspInit+0x2d0>)
 800268c:	2200      	movs	r2, #0
 800268e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002690:	482d      	ldr	r0, [pc, #180]	; (8002748 <HAL_UART_MspInit+0x2d0>)
 8002692:	f000 fa33 	bl	8002afc <HAL_DMA_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_UART_MspInit+0x228>
      Error_Handler();
 800269c:	f7ff f952 	bl	8001944 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a29      	ldr	r2, [pc, #164]	; (8002748 <HAL_UART_MspInit+0x2d0>)
 80026a4:	639a      	str	r2, [r3, #56]	; 0x38
 80026a6:	4a28      	ldr	r2, [pc, #160]	; (8002748 <HAL_UART_MspInit+0x2d0>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80026ac:	4b28      	ldr	r3, [pc, #160]	; (8002750 <HAL_UART_MspInit+0x2d8>)
 80026ae:	4a29      	ldr	r2, [pc, #164]	; (8002754 <HAL_UART_MspInit+0x2dc>)
 80026b0:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80026b2:	4b27      	ldr	r3, [pc, #156]	; (8002750 <HAL_UART_MspInit+0x2d8>)
 80026b4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80026b8:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026ba:	4b25      	ldr	r3, [pc, #148]	; (8002750 <HAL_UART_MspInit+0x2d8>)
 80026bc:	2240      	movs	r2, #64	; 0x40
 80026be:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026c0:	4b23      	ldr	r3, [pc, #140]	; (8002750 <HAL_UART_MspInit+0x2d8>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026c6:	4b22      	ldr	r3, [pc, #136]	; (8002750 <HAL_UART_MspInit+0x2d8>)
 80026c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026cc:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ce:	4b20      	ldr	r3, [pc, #128]	; (8002750 <HAL_UART_MspInit+0x2d8>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026d4:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <HAL_UART_MspInit+0x2d8>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80026da:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <HAL_UART_MspInit+0x2d8>)
 80026dc:	2200      	movs	r2, #0
 80026de:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026e0:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <HAL_UART_MspInit+0x2d8>)
 80026e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80026e6:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026e8:	4b19      	ldr	r3, [pc, #100]	; (8002750 <HAL_UART_MspInit+0x2d8>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80026ee:	4818      	ldr	r0, [pc, #96]	; (8002750 <HAL_UART_MspInit+0x2d8>)
 80026f0:	f000 fa04 	bl	8002afc <HAL_DMA_Init>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_UART_MspInit+0x286>
      Error_Handler();
 80026fa:	f7ff f923 	bl	8001944 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a13      	ldr	r2, [pc, #76]	; (8002750 <HAL_UART_MspInit+0x2d8>)
 8002702:	635a      	str	r2, [r3, #52]	; 0x34
 8002704:	4a12      	ldr	r2, [pc, #72]	; (8002750 <HAL_UART_MspInit+0x2d8>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800270a:	2200      	movs	r2, #0
 800270c:	2100      	movs	r1, #0
 800270e:	2047      	movs	r0, #71	; 0x47
 8002710:	f000 f9bd 	bl	8002a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002714:	2047      	movs	r0, #71	; 0x47
 8002716:	f000 f9d6 	bl	8002ac6 <HAL_NVIC_EnableIRQ>
}
 800271a:	bf00      	nop
 800271c:	3730      	adds	r7, #48	; 0x30
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40004800 	.word	0x40004800
 8002728:	40023800 	.word	0x40023800
 800272c:	40020400 	.word	0x40020400
 8002730:	2000093c 	.word	0x2000093c
 8002734:	40026028 	.word	0x40026028
 8002738:	200009e0 	.word	0x200009e0
 800273c:	40026058 	.word	0x40026058
 8002740:	40011400 	.word	0x40011400
 8002744:	40020800 	.word	0x40020800
 8002748:	200008dc 	.word	0x200008dc
 800274c:	40026428 	.word	0x40026428
 8002750:	20000a40 	.word	0x20000a40
 8002754:	400264a0 	.word	0x400264a0

08002758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002790 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800275c:	480d      	ldr	r0, [pc, #52]	; (8002794 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800275e:	490e      	ldr	r1, [pc, #56]	; (8002798 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002760:	4a0e      	ldr	r2, [pc, #56]	; (800279c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002764:	e002      	b.n	800276c <LoopCopyDataInit>

08002766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800276a:	3304      	adds	r3, #4

0800276c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800276c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002770:	d3f9      	bcc.n	8002766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002772:	4a0b      	ldr	r2, [pc, #44]	; (80027a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002774:	4c0b      	ldr	r4, [pc, #44]	; (80027a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002778:	e001      	b.n	800277e <LoopFillZerobss>

0800277a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800277a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800277c:	3204      	adds	r2, #4

0800277e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002780:	d3fb      	bcc.n	800277a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002782:	f7ff fa4d 	bl	8001c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002786:	f003 fd15 	bl	80061b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800278a:	f7fe fcb9 	bl	8001100 <main>
  bx  lr    
 800278e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002790:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002798:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800279c:	08009990 	.word	0x08009990
  ldr r2, =_sbss
 80027a0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80027a4:	20000af8 	.word	0x20000af8

080027a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a8:	e7fe      	b.n	80027a8 <ADC_IRQHandler>
	...

080027ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027b0:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <HAL_Init+0x40>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <HAL_Init+0x40>)
 80027b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_Init+0x40>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <HAL_Init+0x40>)
 80027c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_Init+0x40>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <HAL_Init+0x40>)
 80027ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d4:	2003      	movs	r0, #3
 80027d6:	f000 f94f 	bl	8002a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027da:	2000      	movs	r0, #0
 80027dc:	f000 f808 	bl	80027f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027e0:	f7ff f8b6 	bl	8001950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023c00 	.word	0x40023c00

080027f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_InitTick+0x54>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_InitTick+0x58>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002806:	fbb3 f3f1 	udiv	r3, r3, r1
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f967 	bl	8002ae2 <HAL_SYSTICK_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e00e      	b.n	800283c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b0f      	cmp	r3, #15
 8002822:	d80a      	bhi.n	800283a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002824:	2200      	movs	r2, #0
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	f04f 30ff 	mov.w	r0, #4294967295
 800282c:	f000 f92f 	bl	8002a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002830:	4a06      	ldr	r2, [pc, #24]	; (800284c <HAL_InitTick+0x5c>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000004 	.word	0x20000004
 8002848:	2000000c 	.word	0x2000000c
 800284c:	20000008 	.word	0x20000008

08002850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_IncTick+0x20>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_IncTick+0x24>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4413      	add	r3, r2
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <HAL_IncTick+0x24>)
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	2000000c 	.word	0x2000000c
 8002874:	20000ae4 	.word	0x20000ae4

08002878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return uwTick;
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <HAL_GetTick+0x14>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000ae4 	.word	0x20000ae4

08002890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002898:	f7ff ffee 	bl	8002878 <HAL_GetTick>
 800289c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d005      	beq.n	80028b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_Delay+0x44>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028b6:	bf00      	nop
 80028b8:	f7ff ffde 	bl	8002878 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d8f7      	bhi.n	80028b8 <HAL_Delay+0x28>
  {
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	2000000c 	.word	0x2000000c

080028d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <__NVIC_SetPriorityGrouping+0x44>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f4:	4013      	ands	r3, r2
 80028f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290a:	4a04      	ldr	r2, [pc, #16]	; (800291c <__NVIC_SetPriorityGrouping+0x44>)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	60d3      	str	r3, [r2, #12]
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <__NVIC_GetPriorityGrouping+0x18>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	0a1b      	lsrs	r3, r3, #8
 800292a:	f003 0307 	and.w	r3, r3, #7
}
 800292e:	4618      	mov	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	2b00      	cmp	r3, #0
 800294c:	db0b      	blt.n	8002966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	f003 021f 	and.w	r2, r3, #31
 8002954:	4907      	ldr	r1, [pc, #28]	; (8002974 <__NVIC_EnableIRQ+0x38>)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	2001      	movs	r0, #1
 800295e:	fa00 f202 	lsl.w	r2, r0, r2
 8002962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000e100 	.word	0xe000e100

08002978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002988:	2b00      	cmp	r3, #0
 800298a:	db0a      	blt.n	80029a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	490c      	ldr	r1, [pc, #48]	; (80029c4 <__NVIC_SetPriority+0x4c>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	0112      	lsls	r2, r2, #4
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	440b      	add	r3, r1
 800299c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a0:	e00a      	b.n	80029b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4908      	ldr	r1, [pc, #32]	; (80029c8 <__NVIC_SetPriority+0x50>)
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	3b04      	subs	r3, #4
 80029b0:	0112      	lsls	r2, r2, #4
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	440b      	add	r3, r1
 80029b6:	761a      	strb	r2, [r3, #24]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000e100 	.word	0xe000e100
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f1c3 0307 	rsb	r3, r3, #7
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	bf28      	it	cs
 80029ea:	2304      	movcs	r3, #4
 80029ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d902      	bls.n	80029fc <NVIC_EncodePriority+0x30>
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3b03      	subs	r3, #3
 80029fa:	e000      	b.n	80029fe <NVIC_EncodePriority+0x32>
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	401a      	ands	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a14:	f04f 31ff 	mov.w	r1, #4294967295
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	43d9      	mvns	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	4313      	orrs	r3, r2
         );
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3724      	adds	r7, #36	; 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a44:	d301      	bcc.n	8002a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00f      	b.n	8002a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <SysTick_Config+0x40>)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a52:	210f      	movs	r1, #15
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295
 8002a58:	f7ff ff8e 	bl	8002978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <SysTick_Config+0x40>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a62:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <SysTick_Config+0x40>)
 8002a64:	2207      	movs	r2, #7
 8002a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	e000e010 	.word	0xe000e010

08002a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff ff29 	bl	80028d8 <__NVIC_SetPriorityGrouping>
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	4603      	mov	r3, r0
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa0:	f7ff ff3e 	bl	8002920 <__NVIC_GetPriorityGrouping>
 8002aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	6978      	ldr	r0, [r7, #20]
 8002aac:	f7ff ff8e 	bl	80029cc <NVIC_EncodePriority>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff5d 	bl	8002978 <__NVIC_SetPriority>
}
 8002abe:	bf00      	nop
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4603      	mov	r3, r0
 8002ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff31 	bl	800293c <__NVIC_EnableIRQ>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ffa2 	bl	8002a34 <SysTick_Config>
 8002af0:	4603      	mov	r3, r0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b08:	f7ff feb6 	bl	8002878 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e099      	b.n	8002c4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0201 	bic.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b38:	e00f      	b.n	8002b5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b3a:	f7ff fe9d 	bl	8002878 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b05      	cmp	r3, #5
 8002b46:	d908      	bls.n	8002b5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2203      	movs	r2, #3
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e078      	b.n	8002c4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1e8      	bne.n	8002b3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	4b38      	ldr	r3, [pc, #224]	; (8002c54 <HAL_DMA_Init+0x158>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d107      	bne.n	8002bc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f023 0307 	bic.w	r3, r3, #7
 8002bda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d117      	bne.n	8002c1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00e      	beq.n	8002c1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fb01 	bl	8003208 <DMA_CheckFifoParam>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2240      	movs	r2, #64	; 0x40
 8002c10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e016      	b.n	8002c4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fab8 	bl	800319c <DMA_CalcBaseAndBitshift>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c34:	223f      	movs	r2, #63	; 0x3f
 8002c36:	409a      	lsls	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	f010803f 	.word	0xf010803f

08002c58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_DMA_Start_IT+0x26>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e040      	b.n	8002d00 <HAL_DMA_Start_IT+0xa8>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d12f      	bne.n	8002cf2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2202      	movs	r2, #2
 8002c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fa4a 	bl	8003140 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb0:	223f      	movs	r2, #63	; 0x3f
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0216 	orr.w	r2, r2, #22
 8002cc6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d007      	beq.n	8002ce0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0208 	orr.w	r2, r2, #8
 8002cde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	e005      	b.n	8002cfe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d16:	f7ff fdaf 	bl	8002878 <HAL_GetTick>
 8002d1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d008      	beq.n	8002d3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e052      	b.n	8002de0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0216 	bic.w	r2, r2, #22
 8002d48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d103      	bne.n	8002d6a <HAL_DMA_Abort+0x62>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0208 	bic.w	r2, r2, #8
 8002d78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0201 	bic.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d8a:	e013      	b.n	8002db4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d8c:	f7ff fd74 	bl	8002878 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b05      	cmp	r3, #5
 8002d98:	d90c      	bls.n	8002db4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2203      	movs	r2, #3
 8002dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e015      	b.n	8002de0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1e4      	bne.n	8002d8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc6:	223f      	movs	r2, #63	; 0x3f
 8002dc8:	409a      	lsls	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d004      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2280      	movs	r2, #128	; 0x80
 8002e00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00c      	b.n	8002e20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2205      	movs	r2, #5
 8002e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e38:	4b92      	ldr	r3, [pc, #584]	; (8003084 <HAL_DMA_IRQHandler+0x258>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a92      	ldr	r2, [pc, #584]	; (8003088 <HAL_DMA_IRQHandler+0x25c>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	0a9b      	lsrs	r3, r3, #10
 8002e44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e56:	2208      	movs	r2, #8
 8002e58:	409a      	lsls	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01a      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d013      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0204 	bic.w	r2, r2, #4
 8002e7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e84:	2208      	movs	r2, #8
 8002e86:	409a      	lsls	r2, r3
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	f043 0201 	orr.w	r2, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	409a      	lsls	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d012      	beq.n	8002ece <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00b      	beq.n	8002ece <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	2201      	movs	r2, #1
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	f043 0202 	orr.w	r2, r3, #2
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	409a      	lsls	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d012      	beq.n	8002f04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efc:	f043 0204 	orr.w	r2, r3, #4
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	2210      	movs	r2, #16
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d043      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d03c      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f26:	2210      	movs	r2, #16
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d018      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d108      	bne.n	8002f5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d024      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	4798      	blx	r3
 8002f5a:	e01f      	b.n	8002f9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01b      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	4798      	blx	r3
 8002f6c:	e016      	b.n	8002f9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d107      	bne.n	8002f8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0208 	bic.w	r2, r2, #8
 8002f8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 808e 	beq.w	80030ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 8086 	beq.w	80030ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b05      	cmp	r3, #5
 8002fd4:	d136      	bne.n	8003044 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0216 	bic.w	r2, r2, #22
 8002fe4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695a      	ldr	r2, [r3, #20]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ff4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d103      	bne.n	8003006 <HAL_DMA_IRQHandler+0x1da>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0208 	bic.w	r2, r2, #8
 8003014:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301a:	223f      	movs	r2, #63	; 0x3f
 800301c:	409a      	lsls	r2, r3
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003036:	2b00      	cmp	r3, #0
 8003038:	d07d      	beq.n	8003136 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	4798      	blx	r3
        }
        return;
 8003042:	e078      	b.n	8003136 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d01c      	beq.n	800308c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d108      	bne.n	8003072 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003064:	2b00      	cmp	r3, #0
 8003066:	d030      	beq.n	80030ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	4798      	blx	r3
 8003070:	e02b      	b.n	80030ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	2b00      	cmp	r3, #0
 8003078:	d027      	beq.n	80030ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	4798      	blx	r3
 8003082:	e022      	b.n	80030ca <HAL_DMA_IRQHandler+0x29e>
 8003084:	20000004 	.word	0x20000004
 8003088:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10f      	bne.n	80030ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0210 	bic.w	r2, r2, #16
 80030a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d032      	beq.n	8003138 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d022      	beq.n	8003124 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2205      	movs	r2, #5
 80030e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	3301      	adds	r3, #1
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d307      	bcc.n	8003112 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f2      	bne.n	80030f6 <HAL_DMA_IRQHandler+0x2ca>
 8003110:	e000      	b.n	8003114 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003112:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	4798      	blx	r3
 8003134:	e000      	b.n	8003138 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003136:	bf00      	nop
    }
  }
}
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop

08003140 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800315c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b40      	cmp	r3, #64	; 0x40
 800316c:	d108      	bne.n	8003180 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800317e:	e007      	b.n	8003190 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	60da      	str	r2, [r3, #12]
}
 8003190:	bf00      	nop
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	3b10      	subs	r3, #16
 80031ac:	4a14      	ldr	r2, [pc, #80]	; (8003200 <DMA_CalcBaseAndBitshift+0x64>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	091b      	lsrs	r3, r3, #4
 80031b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031b6:	4a13      	ldr	r2, [pc, #76]	; (8003204 <DMA_CalcBaseAndBitshift+0x68>)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4413      	add	r3, r2
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d909      	bls.n	80031de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031d2:	f023 0303 	bic.w	r3, r3, #3
 80031d6:	1d1a      	adds	r2, r3, #4
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	659a      	str	r2, [r3, #88]	; 0x58
 80031dc:	e007      	b.n	80031ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031e6:	f023 0303 	bic.w	r3, r3, #3
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	aaaaaaab 	.word	0xaaaaaaab
 8003204:	080094fc 	.word	0x080094fc

08003208 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d11f      	bne.n	8003262 <DMA_CheckFifoParam+0x5a>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d856      	bhi.n	80032d6 <DMA_CheckFifoParam+0xce>
 8003228:	a201      	add	r2, pc, #4	; (adr r2, 8003230 <DMA_CheckFifoParam+0x28>)
 800322a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322e:	bf00      	nop
 8003230:	08003241 	.word	0x08003241
 8003234:	08003253 	.word	0x08003253
 8003238:	08003241 	.word	0x08003241
 800323c:	080032d7 	.word	0x080032d7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d046      	beq.n	80032da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003250:	e043      	b.n	80032da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800325a:	d140      	bne.n	80032de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003260:	e03d      	b.n	80032de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800326a:	d121      	bne.n	80032b0 <DMA_CheckFifoParam+0xa8>
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b03      	cmp	r3, #3
 8003270:	d837      	bhi.n	80032e2 <DMA_CheckFifoParam+0xda>
 8003272:	a201      	add	r2, pc, #4	; (adr r2, 8003278 <DMA_CheckFifoParam+0x70>)
 8003274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003278:	08003289 	.word	0x08003289
 800327c:	0800328f 	.word	0x0800328f
 8003280:	08003289 	.word	0x08003289
 8003284:	080032a1 	.word	0x080032a1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	73fb      	strb	r3, [r7, #15]
      break;
 800328c:	e030      	b.n	80032f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d025      	beq.n	80032e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800329e:	e022      	b.n	80032e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032a8:	d11f      	bne.n	80032ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032ae:	e01c      	b.n	80032ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d903      	bls.n	80032be <DMA_CheckFifoParam+0xb6>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d003      	beq.n	80032c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032bc:	e018      	b.n	80032f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
      break;
 80032c2:	e015      	b.n	80032f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00e      	beq.n	80032ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
      break;
 80032d4:	e00b      	b.n	80032ee <DMA_CheckFifoParam+0xe6>
      break;
 80032d6:	bf00      	nop
 80032d8:	e00a      	b.n	80032f0 <DMA_CheckFifoParam+0xe8>
      break;
 80032da:	bf00      	nop
 80032dc:	e008      	b.n	80032f0 <DMA_CheckFifoParam+0xe8>
      break;
 80032de:	bf00      	nop
 80032e0:	e006      	b.n	80032f0 <DMA_CheckFifoParam+0xe8>
      break;
 80032e2:	bf00      	nop
 80032e4:	e004      	b.n	80032f0 <DMA_CheckFifoParam+0xe8>
      break;
 80032e6:	bf00      	nop
 80032e8:	e002      	b.n	80032f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80032ea:	bf00      	nop
 80032ec:	e000      	b.n	80032f0 <DMA_CheckFifoParam+0xe8>
      break;
 80032ee:	bf00      	nop
    }
  } 
  
  return status; 
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop

08003300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003300:	b480      	push	{r7}
 8003302:	b089      	sub	sp, #36	; 0x24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003312:	2300      	movs	r3, #0
 8003314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	e16b      	b.n	80035f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800331c:	2201      	movs	r2, #1
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	429a      	cmp	r2, r3
 8003336:	f040 815a 	bne.w	80035ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d005      	beq.n	8003352 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800334e:	2b02      	cmp	r3, #2
 8003350:	d130      	bne.n	80033b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	2203      	movs	r2, #3
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003388:	2201      	movs	r2, #1
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	f003 0201 	and.w	r2, r3, #1
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d017      	beq.n	80033f0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	2203      	movs	r2, #3
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d123      	bne.n	8003444 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	08da      	lsrs	r2, r3, #3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3208      	adds	r2, #8
 8003404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003408:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	220f      	movs	r2, #15
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	08da      	lsrs	r2, r3, #3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3208      	adds	r2, #8
 800343e:	69b9      	ldr	r1, [r7, #24]
 8003440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	2203      	movs	r2, #3
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4013      	ands	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0203 	and.w	r2, r3, #3
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 80b4 	beq.w	80035ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	4b60      	ldr	r3, [pc, #384]	; (800360c <HAL_GPIO_Init+0x30c>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	4a5f      	ldr	r2, [pc, #380]	; (800360c <HAL_GPIO_Init+0x30c>)
 8003490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003494:	6453      	str	r3, [r2, #68]	; 0x44
 8003496:	4b5d      	ldr	r3, [pc, #372]	; (800360c <HAL_GPIO_Init+0x30c>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034a2:	4a5b      	ldr	r2, [pc, #364]	; (8003610 <HAL_GPIO_Init+0x310>)
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	089b      	lsrs	r3, r3, #2
 80034a8:	3302      	adds	r3, #2
 80034aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	220f      	movs	r2, #15
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4013      	ands	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a52      	ldr	r2, [pc, #328]	; (8003614 <HAL_GPIO_Init+0x314>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d02b      	beq.n	8003526 <HAL_GPIO_Init+0x226>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a51      	ldr	r2, [pc, #324]	; (8003618 <HAL_GPIO_Init+0x318>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d025      	beq.n	8003522 <HAL_GPIO_Init+0x222>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a50      	ldr	r2, [pc, #320]	; (800361c <HAL_GPIO_Init+0x31c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d01f      	beq.n	800351e <HAL_GPIO_Init+0x21e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a4f      	ldr	r2, [pc, #316]	; (8003620 <HAL_GPIO_Init+0x320>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d019      	beq.n	800351a <HAL_GPIO_Init+0x21a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a4e      	ldr	r2, [pc, #312]	; (8003624 <HAL_GPIO_Init+0x324>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <HAL_GPIO_Init+0x216>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a4d      	ldr	r2, [pc, #308]	; (8003628 <HAL_GPIO_Init+0x328>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00d      	beq.n	8003512 <HAL_GPIO_Init+0x212>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a4c      	ldr	r2, [pc, #304]	; (800362c <HAL_GPIO_Init+0x32c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d007      	beq.n	800350e <HAL_GPIO_Init+0x20e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a4b      	ldr	r2, [pc, #300]	; (8003630 <HAL_GPIO_Init+0x330>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d101      	bne.n	800350a <HAL_GPIO_Init+0x20a>
 8003506:	2307      	movs	r3, #7
 8003508:	e00e      	b.n	8003528 <HAL_GPIO_Init+0x228>
 800350a:	2308      	movs	r3, #8
 800350c:	e00c      	b.n	8003528 <HAL_GPIO_Init+0x228>
 800350e:	2306      	movs	r3, #6
 8003510:	e00a      	b.n	8003528 <HAL_GPIO_Init+0x228>
 8003512:	2305      	movs	r3, #5
 8003514:	e008      	b.n	8003528 <HAL_GPIO_Init+0x228>
 8003516:	2304      	movs	r3, #4
 8003518:	e006      	b.n	8003528 <HAL_GPIO_Init+0x228>
 800351a:	2303      	movs	r3, #3
 800351c:	e004      	b.n	8003528 <HAL_GPIO_Init+0x228>
 800351e:	2302      	movs	r3, #2
 8003520:	e002      	b.n	8003528 <HAL_GPIO_Init+0x228>
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <HAL_GPIO_Init+0x228>
 8003526:	2300      	movs	r3, #0
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	f002 0203 	and.w	r2, r2, #3
 800352e:	0092      	lsls	r2, r2, #2
 8003530:	4093      	lsls	r3, r2
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003538:	4935      	ldr	r1, [pc, #212]	; (8003610 <HAL_GPIO_Init+0x310>)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	089b      	lsrs	r3, r3, #2
 800353e:	3302      	adds	r3, #2
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003546:	4b3b      	ldr	r3, [pc, #236]	; (8003634 <HAL_GPIO_Init+0x334>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800356a:	4a32      	ldr	r2, [pc, #200]	; (8003634 <HAL_GPIO_Init+0x334>)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003570:	4b30      	ldr	r3, [pc, #192]	; (8003634 <HAL_GPIO_Init+0x334>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003594:	4a27      	ldr	r2, [pc, #156]	; (8003634 <HAL_GPIO_Init+0x334>)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800359a:	4b26      	ldr	r3, [pc, #152]	; (8003634 <HAL_GPIO_Init+0x334>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4013      	ands	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035be:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <HAL_GPIO_Init+0x334>)
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_GPIO_Init+0x334>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035e8:	4a12      	ldr	r2, [pc, #72]	; (8003634 <HAL_GPIO_Init+0x334>)
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3301      	adds	r3, #1
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b0f      	cmp	r3, #15
 80035f8:	f67f ae90 	bls.w	800331c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035fc:	bf00      	nop
 80035fe:	bf00      	nop
 8003600:	3724      	adds	r7, #36	; 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
 8003610:	40013800 	.word	0x40013800
 8003614:	40020000 	.word	0x40020000
 8003618:	40020400 	.word	0x40020400
 800361c:	40020800 	.word	0x40020800
 8003620:	40020c00 	.word	0x40020c00
 8003624:	40021000 	.word	0x40021000
 8003628:	40021400 	.word	0x40021400
 800362c:	40021800 	.word	0x40021800
 8003630:	40021c00 	.word	0x40021c00
 8003634:	40013c00 	.word	0x40013c00

08003638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	807b      	strh	r3, [r7, #2]
 8003644:	4613      	mov	r3, r2
 8003646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003648:	787b      	ldrb	r3, [r7, #1]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800364e:	887a      	ldrh	r2, [r7, #2]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003654:	e003      	b.n	800365e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003656:	887b      	ldrh	r3, [r7, #2]
 8003658:	041a      	lsls	r2, r3, #16
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	619a      	str	r2, [r3, #24]
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e264      	b.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d075      	beq.n	8003776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800368a:	4ba3      	ldr	r3, [pc, #652]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	2b04      	cmp	r3, #4
 8003694:	d00c      	beq.n	80036b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003696:	4ba0      	ldr	r3, [pc, #640]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d112      	bne.n	80036c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036a2:	4b9d      	ldr	r3, [pc, #628]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ae:	d10b      	bne.n	80036c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b0:	4b99      	ldr	r3, [pc, #612]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d05b      	beq.n	8003774 <HAL_RCC_OscConfig+0x108>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d157      	bne.n	8003774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e23f      	b.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d0:	d106      	bne.n	80036e0 <HAL_RCC_OscConfig+0x74>
 80036d2:	4b91      	ldr	r3, [pc, #580]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a90      	ldr	r2, [pc, #576]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e01d      	b.n	800371c <HAL_RCC_OscConfig+0xb0>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e8:	d10c      	bne.n	8003704 <HAL_RCC_OscConfig+0x98>
 80036ea:	4b8b      	ldr	r3, [pc, #556]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a8a      	ldr	r2, [pc, #552]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	4b88      	ldr	r3, [pc, #544]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a87      	ldr	r2, [pc, #540]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e00b      	b.n	800371c <HAL_RCC_OscConfig+0xb0>
 8003704:	4b84      	ldr	r3, [pc, #528]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a83      	ldr	r2, [pc, #524]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 800370a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	4b81      	ldr	r3, [pc, #516]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a80      	ldr	r2, [pc, #512]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800371a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d013      	beq.n	800374c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7ff f8a8 	bl	8002878 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800372c:	f7ff f8a4 	bl	8002878 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	; 0x64
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e204      	b.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373e:	4b76      	ldr	r3, [pc, #472]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0xc0>
 800374a:	e014      	b.n	8003776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374c:	f7ff f894 	bl	8002878 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003754:	f7ff f890 	bl	8002878 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b64      	cmp	r3, #100	; 0x64
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e1f0      	b.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003766:	4b6c      	ldr	r3, [pc, #432]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_OscConfig+0xe8>
 8003772:	e000      	b.n	8003776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d063      	beq.n	800384a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003782:	4b65      	ldr	r3, [pc, #404]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800378e:	4b62      	ldr	r3, [pc, #392]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003796:	2b08      	cmp	r3, #8
 8003798:	d11c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800379a:	4b5f      	ldr	r3, [pc, #380]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d116      	bne.n	80037d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a6:	4b5c      	ldr	r3, [pc, #368]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_RCC_OscConfig+0x152>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d001      	beq.n	80037be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e1c4      	b.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037be:	4b56      	ldr	r3, [pc, #344]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4952      	ldr	r1, [pc, #328]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d2:	e03a      	b.n	800384a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d020      	beq.n	800381e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037dc:	4b4f      	ldr	r3, [pc, #316]	; (800391c <HAL_RCC_OscConfig+0x2b0>)
 80037de:	2201      	movs	r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e2:	f7ff f849 	bl	8002878 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ea:	f7ff f845 	bl	8002878 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e1a5      	b.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fc:	4b46      	ldr	r3, [pc, #280]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003808:	4b43      	ldr	r3, [pc, #268]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4940      	ldr	r1, [pc, #256]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]
 800381c:	e015      	b.n	800384a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800381e:	4b3f      	ldr	r3, [pc, #252]	; (800391c <HAL_RCC_OscConfig+0x2b0>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7ff f828 	bl	8002878 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800382c:	f7ff f824 	bl	8002878 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e184      	b.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383e:	4b36      	ldr	r3, [pc, #216]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d030      	beq.n	80038b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d016      	beq.n	800388c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385e:	4b30      	ldr	r3, [pc, #192]	; (8003920 <HAL_RCC_OscConfig+0x2b4>)
 8003860:	2201      	movs	r2, #1
 8003862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003864:	f7ff f808 	bl	8002878 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800386c:	f7ff f804 	bl	8002878 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e164      	b.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387e:	4b26      	ldr	r3, [pc, #152]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0x200>
 800388a:	e015      	b.n	80038b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800388c:	4b24      	ldr	r3, [pc, #144]	; (8003920 <HAL_RCC_OscConfig+0x2b4>)
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003892:	f7fe fff1 	bl	8002878 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800389a:	f7fe ffed 	bl	8002878 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e14d      	b.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ac:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80038ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f0      	bne.n	800389a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80a0 	beq.w	8003a06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c6:	2300      	movs	r3, #0
 80038c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ca:	4b13      	ldr	r3, [pc, #76]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10f      	bne.n	80038f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e4:	6413      	str	r3, [r2, #64]	; 0x40
 80038e6:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f2:	2301      	movs	r3, #1
 80038f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f6:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCC_OscConfig+0x2b8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d121      	bne.n	8003946 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003902:	4b08      	ldr	r3, [pc, #32]	; (8003924 <HAL_RCC_OscConfig+0x2b8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a07      	ldr	r2, [pc, #28]	; (8003924 <HAL_RCC_OscConfig+0x2b8>)
 8003908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800390e:	f7fe ffb3 	bl	8002878 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003914:	e011      	b.n	800393a <HAL_RCC_OscConfig+0x2ce>
 8003916:	bf00      	nop
 8003918:	40023800 	.word	0x40023800
 800391c:	42470000 	.word	0x42470000
 8003920:	42470e80 	.word	0x42470e80
 8003924:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003928:	f7fe ffa6 	bl	8002878 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e106      	b.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393a:	4b85      	ldr	r3, [pc, #532]	; (8003b50 <HAL_RCC_OscConfig+0x4e4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d106      	bne.n	800395c <HAL_RCC_OscConfig+0x2f0>
 800394e:	4b81      	ldr	r3, [pc, #516]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	4a80      	ldr	r2, [pc, #512]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6713      	str	r3, [r2, #112]	; 0x70
 800395a:	e01c      	b.n	8003996 <HAL_RCC_OscConfig+0x32a>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b05      	cmp	r3, #5
 8003962:	d10c      	bne.n	800397e <HAL_RCC_OscConfig+0x312>
 8003964:	4b7b      	ldr	r3, [pc, #492]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	4a7a      	ldr	r2, [pc, #488]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 800396a:	f043 0304 	orr.w	r3, r3, #4
 800396e:	6713      	str	r3, [r2, #112]	; 0x70
 8003970:	4b78      	ldr	r3, [pc, #480]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	4a77      	ldr	r2, [pc, #476]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	6713      	str	r3, [r2, #112]	; 0x70
 800397c:	e00b      	b.n	8003996 <HAL_RCC_OscConfig+0x32a>
 800397e:	4b75      	ldr	r3, [pc, #468]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003982:	4a74      	ldr	r2, [pc, #464]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	6713      	str	r3, [r2, #112]	; 0x70
 800398a:	4b72      	ldr	r3, [pc, #456]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	4a71      	ldr	r2, [pc, #452]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003990:	f023 0304 	bic.w	r3, r3, #4
 8003994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d015      	beq.n	80039ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399e:	f7fe ff6b 	bl	8002878 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a4:	e00a      	b.n	80039bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a6:	f7fe ff67 	bl	8002878 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e0c5      	b.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039bc:	4b65      	ldr	r3, [pc, #404]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0ee      	beq.n	80039a6 <HAL_RCC_OscConfig+0x33a>
 80039c8:	e014      	b.n	80039f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ca:	f7fe ff55 	bl	8002878 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d2:	f7fe ff51 	bl	8002878 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e0af      	b.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e8:	4b5a      	ldr	r3, [pc, #360]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1ee      	bne.n	80039d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d105      	bne.n	8003a06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fa:	4b56      	ldr	r3, [pc, #344]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	4a55      	ldr	r2, [pc, #340]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 809b 	beq.w	8003b46 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a10:	4b50      	ldr	r3, [pc, #320]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 030c 	and.w	r3, r3, #12
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d05c      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d141      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a24:	4b4c      	ldr	r3, [pc, #304]	; (8003b58 <HAL_RCC_OscConfig+0x4ec>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2a:	f7fe ff25 	bl	8002878 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a32:	f7fe ff21 	bl	8002878 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e081      	b.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a44:	4b43      	ldr	r3, [pc, #268]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f0      	bne.n	8003a32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69da      	ldr	r2, [r3, #28]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	019b      	lsls	r3, r3, #6
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	041b      	lsls	r3, r3, #16
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	061b      	lsls	r3, r3, #24
 8003a74:	4937      	ldr	r1, [pc, #220]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a7a:	4b37      	ldr	r3, [pc, #220]	; (8003b58 <HAL_RCC_OscConfig+0x4ec>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a80:	f7fe fefa 	bl	8002878 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a88:	f7fe fef6 	bl	8002878 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e056      	b.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9a:	4b2e      	ldr	r3, [pc, #184]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0x41c>
 8003aa6:	e04e      	b.n	8003b46 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa8:	4b2b      	ldr	r3, [pc, #172]	; (8003b58 <HAL_RCC_OscConfig+0x4ec>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aae:	f7fe fee3 	bl	8002878 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab6:	f7fe fedf 	bl	8002878 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e03f      	b.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac8:	4b22      	ldr	r3, [pc, #136]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f0      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x44a>
 8003ad4:	e037      	b.n	8003b46 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e032      	b.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ae2:	4b1c      	ldr	r3, [pc, #112]	; (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d028      	beq.n	8003b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d121      	bne.n	8003b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d11a      	bne.n	8003b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b12:	4013      	ands	r3, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b18:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d111      	bne.n	8003b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b28:	085b      	lsrs	r3, r3, #1
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d001      	beq.n	8003b46 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40007000 	.word	0x40007000
 8003b54:	40023800 	.word	0x40023800
 8003b58:	42470060 	.word	0x42470060

08003b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0cc      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b70:	4b68      	ldr	r3, [pc, #416]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d90c      	bls.n	8003b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7e:	4b65      	ldr	r3, [pc, #404]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b86:	4b63      	ldr	r3, [pc, #396]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0b8      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d020      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb0:	4b59      	ldr	r3, [pc, #356]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4a58      	ldr	r2, [pc, #352]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc8:	4b53      	ldr	r3, [pc, #332]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4a52      	ldr	r2, [pc, #328]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd4:	4b50      	ldr	r3, [pc, #320]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	494d      	ldr	r1, [pc, #308]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d044      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	4b47      	ldr	r3, [pc, #284]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d119      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e07f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d003      	beq.n	8003c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d107      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c1a:	4b3f      	ldr	r3, [pc, #252]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e06f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2a:	4b3b      	ldr	r3, [pc, #236]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e067      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c3a:	4b37      	ldr	r3, [pc, #220]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f023 0203 	bic.w	r2, r3, #3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4934      	ldr	r1, [pc, #208]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c4c:	f7fe fe14 	bl	8002878 <HAL_GetTick>
 8003c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c52:	e00a      	b.n	8003c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c54:	f7fe fe10 	bl	8002878 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e04f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6a:	4b2b      	ldr	r3, [pc, #172]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 020c 	and.w	r2, r3, #12
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d1eb      	bne.n	8003c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b25      	ldr	r3, [pc, #148]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d20c      	bcs.n	8003ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b22      	ldr	r3, [pc, #136]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e032      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4916      	ldr	r1, [pc, #88]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cce:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	490e      	ldr	r1, [pc, #56]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ce2:	f000 f821 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	490a      	ldr	r1, [pc, #40]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003cf4:	5ccb      	ldrb	r3, [r1, r3]
 8003cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfa:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cfe:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <HAL_RCC_ClockConfig+0x1c8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe fd74 	bl	80027f0 <HAL_InitTick>

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40023c00 	.word	0x40023c00
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	080094e4 	.word	0x080094e4
 8003d20:	20000004 	.word	0x20000004
 8003d24:	20000008 	.word	0x20000008

08003d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	607b      	str	r3, [r7, #4]
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d40:	4b67      	ldr	r3, [pc, #412]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 030c 	and.w	r3, r3, #12
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d00d      	beq.n	8003d68 <HAL_RCC_GetSysClockFreq+0x40>
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	f200 80bd 	bhi.w	8003ecc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_RCC_GetSysClockFreq+0x34>
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d003      	beq.n	8003d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d5a:	e0b7      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d5c:	4b61      	ldr	r3, [pc, #388]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d5e:	60bb      	str	r3, [r7, #8]
       break;
 8003d60:	e0b7      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d62:	4b61      	ldr	r3, [pc, #388]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003d64:	60bb      	str	r3, [r7, #8]
      break;
 8003d66:	e0b4      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d68:	4b5d      	ldr	r3, [pc, #372]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d72:	4b5b      	ldr	r3, [pc, #364]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d04d      	beq.n	8003e1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d7e:	4b58      	ldr	r3, [pc, #352]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	099b      	lsrs	r3, r3, #6
 8003d84:	461a      	mov	r2, r3
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d8e:	f04f 0100 	mov.w	r1, #0
 8003d92:	ea02 0800 	and.w	r8, r2, r0
 8003d96:	ea03 0901 	and.w	r9, r3, r1
 8003d9a:	4640      	mov	r0, r8
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	014b      	lsls	r3, r1, #5
 8003da8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003dac:	0142      	lsls	r2, r0, #5
 8003dae:	4610      	mov	r0, r2
 8003db0:	4619      	mov	r1, r3
 8003db2:	ebb0 0008 	subs.w	r0, r0, r8
 8003db6:	eb61 0109 	sbc.w	r1, r1, r9
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	018b      	lsls	r3, r1, #6
 8003dc4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dc8:	0182      	lsls	r2, r0, #6
 8003dca:	1a12      	subs	r2, r2, r0
 8003dcc:	eb63 0301 	sbc.w	r3, r3, r1
 8003dd0:	f04f 0000 	mov.w	r0, #0
 8003dd4:	f04f 0100 	mov.w	r1, #0
 8003dd8:	00d9      	lsls	r1, r3, #3
 8003dda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dde:	00d0      	lsls	r0, r2, #3
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	eb12 0208 	adds.w	r2, r2, r8
 8003de8:	eb43 0309 	adc.w	r3, r3, r9
 8003dec:	f04f 0000 	mov.w	r0, #0
 8003df0:	f04f 0100 	mov.w	r1, #0
 8003df4:	0259      	lsls	r1, r3, #9
 8003df6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003dfa:	0250      	lsls	r0, r2, #9
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	461a      	mov	r2, r3
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	f7fc fecc 	bl	8000ba8 <__aeabi_uldivmod>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4613      	mov	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	e04a      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e1a:	4b31      	ldr	r3, [pc, #196]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	099b      	lsrs	r3, r3, #6
 8003e20:	461a      	mov	r2, r3
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e2a:	f04f 0100 	mov.w	r1, #0
 8003e2e:	ea02 0400 	and.w	r4, r2, r0
 8003e32:	ea03 0501 	and.w	r5, r3, r1
 8003e36:	4620      	mov	r0, r4
 8003e38:	4629      	mov	r1, r5
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	014b      	lsls	r3, r1, #5
 8003e44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e48:	0142      	lsls	r2, r0, #5
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	1b00      	subs	r0, r0, r4
 8003e50:	eb61 0105 	sbc.w	r1, r1, r5
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	018b      	lsls	r3, r1, #6
 8003e5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e62:	0182      	lsls	r2, r0, #6
 8003e64:	1a12      	subs	r2, r2, r0
 8003e66:	eb63 0301 	sbc.w	r3, r3, r1
 8003e6a:	f04f 0000 	mov.w	r0, #0
 8003e6e:	f04f 0100 	mov.w	r1, #0
 8003e72:	00d9      	lsls	r1, r3, #3
 8003e74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e78:	00d0      	lsls	r0, r2, #3
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	1912      	adds	r2, r2, r4
 8003e80:	eb45 0303 	adc.w	r3, r5, r3
 8003e84:	f04f 0000 	mov.w	r0, #0
 8003e88:	f04f 0100 	mov.w	r1, #0
 8003e8c:	0299      	lsls	r1, r3, #10
 8003e8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e92:	0290      	lsls	r0, r2, #10
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4610      	mov	r0, r2
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	f7fc fe80 	bl	8000ba8 <__aeabi_uldivmod>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4613      	mov	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	3301      	adds	r3, #1
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	60bb      	str	r3, [r7, #8]
      break;
 8003eca:	e002      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ece:	60bb      	str	r3, [r7, #8]
      break;
 8003ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	00f42400 	.word	0x00f42400
 8003ee8:	007a1200 	.word	0x007a1200

08003eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef0:	4b03      	ldr	r3, [pc, #12]	; (8003f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	20000004 	.word	0x20000004

08003f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f08:	f7ff fff0 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	0a9b      	lsrs	r3, r3, #10
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4903      	ldr	r1, [pc, #12]	; (8003f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40023800 	.word	0x40023800
 8003f28:	080094f4 	.word	0x080094f4

08003f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f30:	f7ff ffdc 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	0b5b      	lsrs	r3, r3, #13
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	4903      	ldr	r1, [pc, #12]	; (8003f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f42:	5ccb      	ldrb	r3, [r1, r3]
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	080094f4 	.word	0x080094f4

08003f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e041      	b.n	8003fea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fe f8ac 	bl	80020d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4619      	mov	r1, r3
 8003f92:	4610      	mov	r0, r2
 8003f94:	f000 fdb0 	bl	8004af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	d001      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e04e      	b.n	80040aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a23      	ldr	r2, [pc, #140]	; (80040b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d022      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x80>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004036:	d01d      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x80>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a1f      	ldr	r2, [pc, #124]	; (80040bc <HAL_TIM_Base_Start_IT+0xc8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d018      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x80>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a1e      	ldr	r2, [pc, #120]	; (80040c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d013      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x80>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a1c      	ldr	r2, [pc, #112]	; (80040c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00e      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x80>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1b      	ldr	r2, [pc, #108]	; (80040c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d009      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x80>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a19      	ldr	r2, [pc, #100]	; (80040cc <HAL_TIM_Base_Start_IT+0xd8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d004      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x80>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a18      	ldr	r2, [pc, #96]	; (80040d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d111      	bne.n	8004098 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b06      	cmp	r3, #6
 8004084:	d010      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0201 	orr.w	r2, r2, #1
 8004094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004096:	e007      	b.n	80040a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40010000 	.word	0x40010000
 80040bc:	40000400 	.word	0x40000400
 80040c0:	40000800 	.word	0x40000800
 80040c4:	40000c00 	.word	0x40000c00
 80040c8:	40010400 	.word	0x40010400
 80040cc:	40014000 	.word	0x40014000
 80040d0:	40001800 	.word	0x40001800

080040d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e041      	b.n	800416a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f839 	bl	8004172 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3304      	adds	r3, #4
 8004110:	4619      	mov	r1, r3
 8004112:	4610      	mov	r0, r2
 8004114:	f000 fcf0 	bl	8004af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d109      	bne.n	80041ac <HAL_TIM_PWM_Start+0x24>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	bf14      	ite	ne
 80041a4:	2301      	movne	r3, #1
 80041a6:	2300      	moveq	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	e022      	b.n	80041f2 <HAL_TIM_PWM_Start+0x6a>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d109      	bne.n	80041c6 <HAL_TIM_PWM_Start+0x3e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	bf14      	ite	ne
 80041be:	2301      	movne	r3, #1
 80041c0:	2300      	moveq	r3, #0
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	e015      	b.n	80041f2 <HAL_TIM_PWM_Start+0x6a>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d109      	bne.n	80041e0 <HAL_TIM_PWM_Start+0x58>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	bf14      	ite	ne
 80041d8:	2301      	movne	r3, #1
 80041da:	2300      	moveq	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	e008      	b.n	80041f2 <HAL_TIM_PWM_Start+0x6a>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	bf14      	ite	ne
 80041ec:	2301      	movne	r3, #1
 80041ee:	2300      	moveq	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e07c      	b.n	80042f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d104      	bne.n	800420a <HAL_TIM_PWM_Start+0x82>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004208:	e013      	b.n	8004232 <HAL_TIM_PWM_Start+0xaa>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b04      	cmp	r3, #4
 800420e:	d104      	bne.n	800421a <HAL_TIM_PWM_Start+0x92>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004218:	e00b      	b.n	8004232 <HAL_TIM_PWM_Start+0xaa>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b08      	cmp	r3, #8
 800421e:	d104      	bne.n	800422a <HAL_TIM_PWM_Start+0xa2>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004228:	e003      	b.n	8004232 <HAL_TIM_PWM_Start+0xaa>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2202      	movs	r2, #2
 800422e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2201      	movs	r2, #1
 8004238:	6839      	ldr	r1, [r7, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f000 ff46 	bl	80050cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a2d      	ldr	r2, [pc, #180]	; (80042fc <HAL_TIM_PWM_Start+0x174>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d004      	beq.n	8004254 <HAL_TIM_PWM_Start+0xcc>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a2c      	ldr	r2, [pc, #176]	; (8004300 <HAL_TIM_PWM_Start+0x178>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d101      	bne.n	8004258 <HAL_TIM_PWM_Start+0xd0>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <HAL_TIM_PWM_Start+0xd2>
 8004258:	2300      	movs	r3, #0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d007      	beq.n	800426e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800426c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a22      	ldr	r2, [pc, #136]	; (80042fc <HAL_TIM_PWM_Start+0x174>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d022      	beq.n	80042be <HAL_TIM_PWM_Start+0x136>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004280:	d01d      	beq.n	80042be <HAL_TIM_PWM_Start+0x136>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1f      	ldr	r2, [pc, #124]	; (8004304 <HAL_TIM_PWM_Start+0x17c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d018      	beq.n	80042be <HAL_TIM_PWM_Start+0x136>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <HAL_TIM_PWM_Start+0x180>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d013      	beq.n	80042be <HAL_TIM_PWM_Start+0x136>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1c      	ldr	r2, [pc, #112]	; (800430c <HAL_TIM_PWM_Start+0x184>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00e      	beq.n	80042be <HAL_TIM_PWM_Start+0x136>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a16      	ldr	r2, [pc, #88]	; (8004300 <HAL_TIM_PWM_Start+0x178>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d009      	beq.n	80042be <HAL_TIM_PWM_Start+0x136>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a18      	ldr	r2, [pc, #96]	; (8004310 <HAL_TIM_PWM_Start+0x188>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d004      	beq.n	80042be <HAL_TIM_PWM_Start+0x136>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a16      	ldr	r2, [pc, #88]	; (8004314 <HAL_TIM_PWM_Start+0x18c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d111      	bne.n	80042e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b06      	cmp	r3, #6
 80042ce:	d010      	beq.n	80042f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e0:	e007      	b.n	80042f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 0201 	orr.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40010000 	.word	0x40010000
 8004300:	40010400 	.word	0x40010400
 8004304:	40000400 	.word	0x40000400
 8004308:	40000800 	.word	0x40000800
 800430c:	40000c00 	.word	0x40000c00
 8004310:	40014000 	.word	0x40014000
 8004314:	40001800 	.word	0x40001800

08004318 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e097      	b.n	800445c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d106      	bne.n	8004346 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7fd ff07 	bl	8002154 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2202      	movs	r2, #2
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800435c:	f023 0307 	bic.w	r3, r3, #7
 8004360:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3304      	adds	r3, #4
 800436a:	4619      	mov	r1, r3
 800436c:	4610      	mov	r0, r2
 800436e:	f000 fbc3 	bl	8004af8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439a:	f023 0303 	bic.w	r3, r3, #3
 800439e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	021b      	lsls	r3, r3, #8
 80043aa:	4313      	orrs	r3, r2
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80043b8:	f023 030c 	bic.w	r3, r3, #12
 80043bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	4313      	orrs	r3, r2
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	4313      	orrs	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	011a      	lsls	r2, r3, #4
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	031b      	lsls	r3, r3, #12
 80043e8:	4313      	orrs	r3, r2
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80043f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80043fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	4313      	orrs	r3, r2
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004474:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800447c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004484:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800448c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d110      	bne.n	80044b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d102      	bne.n	80044a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800449a:	7b7b      	ldrb	r3, [r7, #13]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d001      	beq.n	80044a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e069      	b.n	8004578 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044b4:	e031      	b.n	800451a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d110      	bne.n	80044de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044bc:	7bbb      	ldrb	r3, [r7, #14]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d102      	bne.n	80044c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044c2:	7b3b      	ldrb	r3, [r7, #12]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d001      	beq.n	80044cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e055      	b.n	8004578 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044dc:	e01d      	b.n	800451a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d108      	bne.n	80044f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044e4:	7bbb      	ldrb	r3, [r7, #14]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d105      	bne.n	80044f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044ea:	7b7b      	ldrb	r3, [r7, #13]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d102      	bne.n	80044f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044f0:	7b3b      	ldrb	r3, [r7, #12]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d001      	beq.n	80044fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e03e      	b.n	8004578 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2202      	movs	r2, #2
 80044fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2202      	movs	r2, #2
 8004506:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2202      	movs	r2, #2
 800450e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2202      	movs	r2, #2
 8004516:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_TIM_Encoder_Start+0xc4>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b04      	cmp	r3, #4
 8004524:	d008      	beq.n	8004538 <HAL_TIM_Encoder_Start+0xd4>
 8004526:	e00f      	b.n	8004548 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2201      	movs	r2, #1
 800452e:	2100      	movs	r1, #0
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fdcb 	bl	80050cc <TIM_CCxChannelCmd>
      break;
 8004536:	e016      	b.n	8004566 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2201      	movs	r2, #1
 800453e:	2104      	movs	r1, #4
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fdc3 	bl	80050cc <TIM_CCxChannelCmd>
      break;
 8004546:	e00e      	b.n	8004566 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2201      	movs	r2, #1
 800454e:	2100      	movs	r1, #0
 8004550:	4618      	mov	r0, r3
 8004552:	f000 fdbb 	bl	80050cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2201      	movs	r2, #1
 800455c:	2104      	movs	r1, #4
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fdb4 	bl	80050cc <TIM_CCxChannelCmd>
      break;
 8004564:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0201 	orr.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b02      	cmp	r3, #2
 8004594:	d122      	bne.n	80045dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d11b      	bne.n	80045dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0202 	mvn.w	r2, #2
 80045ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fa7a 	bl	8004abc <HAL_TIM_IC_CaptureCallback>
 80045c8:	e005      	b.n	80045d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa6c 	bl	8004aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fa7d 	bl	8004ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d122      	bne.n	8004630 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d11b      	bne.n	8004630 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0204 	mvn.w	r2, #4
 8004600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2202      	movs	r2, #2
 8004606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fa50 	bl	8004abc <HAL_TIM_IC_CaptureCallback>
 800461c:	e005      	b.n	800462a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa42 	bl	8004aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fa53 	bl	8004ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b08      	cmp	r3, #8
 800463c:	d122      	bne.n	8004684 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b08      	cmp	r3, #8
 800464a:	d11b      	bne.n	8004684 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0208 	mvn.w	r2, #8
 8004654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2204      	movs	r2, #4
 800465a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fa26 	bl	8004abc <HAL_TIM_IC_CaptureCallback>
 8004670:	e005      	b.n	800467e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fa18 	bl	8004aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fa29 	bl	8004ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b10      	cmp	r3, #16
 8004690:	d122      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b10      	cmp	r3, #16
 800469e:	d11b      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0210 	mvn.w	r2, #16
 80046a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2208      	movs	r2, #8
 80046ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f9fc 	bl	8004abc <HAL_TIM_IC_CaptureCallback>
 80046c4:	e005      	b.n	80046d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f9ee 	bl	8004aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f9ff 	bl	8004ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d10e      	bne.n	8004704 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d107      	bne.n	8004704 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0201 	mvn.w	r2, #1
 80046fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f9c8 	bl	8004a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470e:	2b80      	cmp	r3, #128	; 0x80
 8004710:	d10e      	bne.n	8004730 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471c:	2b80      	cmp	r3, #128	; 0x80
 800471e:	d107      	bne.n	8004730 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fdcc 	bl	80052c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473a:	2b40      	cmp	r3, #64	; 0x40
 800473c:	d10e      	bne.n	800475c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b40      	cmp	r3, #64	; 0x40
 800474a:	d107      	bne.n	800475c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f9c4 	bl	8004ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b20      	cmp	r3, #32
 8004768:	d10e      	bne.n	8004788 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b20      	cmp	r3, #32
 8004776:	d107      	bne.n	8004788 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0220 	mvn.w	r2, #32
 8004780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fd96 	bl	80052b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004788:	bf00      	nop
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e0ac      	b.n	8004904 <HAL_TIM_PWM_ConfigChannel+0x174>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b0c      	cmp	r3, #12
 80047b6:	f200 809f 	bhi.w	80048f8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80047ba:	a201      	add	r2, pc, #4	; (adr r2, 80047c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80047bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c0:	080047f5 	.word	0x080047f5
 80047c4:	080048f9 	.word	0x080048f9
 80047c8:	080048f9 	.word	0x080048f9
 80047cc:	080048f9 	.word	0x080048f9
 80047d0:	08004835 	.word	0x08004835
 80047d4:	080048f9 	.word	0x080048f9
 80047d8:	080048f9 	.word	0x080048f9
 80047dc:	080048f9 	.word	0x080048f9
 80047e0:	08004877 	.word	0x08004877
 80047e4:	080048f9 	.word	0x080048f9
 80047e8:	080048f9 	.word	0x080048f9
 80047ec:	080048f9 	.word	0x080048f9
 80047f0:	080048b7 	.word	0x080048b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68b9      	ldr	r1, [r7, #8]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fa1c 	bl	8004c38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0208 	orr.w	r2, r2, #8
 800480e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0204 	bic.w	r2, r2, #4
 800481e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6999      	ldr	r1, [r3, #24]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	691a      	ldr	r2, [r3, #16]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	619a      	str	r2, [r3, #24]
      break;
 8004832:	e062      	b.n	80048fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fa6c 	bl	8004d18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800484e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699a      	ldr	r2, [r3, #24]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6999      	ldr	r1, [r3, #24]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	021a      	lsls	r2, r3, #8
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	619a      	str	r2, [r3, #24]
      break;
 8004874:	e041      	b.n	80048fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fac1 	bl	8004e04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69da      	ldr	r2, [r3, #28]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0208 	orr.w	r2, r2, #8
 8004890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0204 	bic.w	r2, r2, #4
 80048a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69d9      	ldr	r1, [r3, #28]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	61da      	str	r2, [r3, #28]
      break;
 80048b4:	e021      	b.n	80048fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fb15 	bl	8004eec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69d9      	ldr	r1, [r3, #28]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	021a      	lsls	r2, r3, #8
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	61da      	str	r2, [r3, #28]
      break;
 80048f6:	e000      	b.n	80048fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80048f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_TIM_ConfigClockSource+0x18>
 8004920:	2302      	movs	r3, #2
 8004922:	e0b3      	b.n	8004a8c <HAL_TIM_ConfigClockSource+0x180>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004942:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800494a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800495c:	d03e      	beq.n	80049dc <HAL_TIM_ConfigClockSource+0xd0>
 800495e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004962:	f200 8087 	bhi.w	8004a74 <HAL_TIM_ConfigClockSource+0x168>
 8004966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800496a:	f000 8085 	beq.w	8004a78 <HAL_TIM_ConfigClockSource+0x16c>
 800496e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004972:	d87f      	bhi.n	8004a74 <HAL_TIM_ConfigClockSource+0x168>
 8004974:	2b70      	cmp	r3, #112	; 0x70
 8004976:	d01a      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0xa2>
 8004978:	2b70      	cmp	r3, #112	; 0x70
 800497a:	d87b      	bhi.n	8004a74 <HAL_TIM_ConfigClockSource+0x168>
 800497c:	2b60      	cmp	r3, #96	; 0x60
 800497e:	d050      	beq.n	8004a22 <HAL_TIM_ConfigClockSource+0x116>
 8004980:	2b60      	cmp	r3, #96	; 0x60
 8004982:	d877      	bhi.n	8004a74 <HAL_TIM_ConfigClockSource+0x168>
 8004984:	2b50      	cmp	r3, #80	; 0x50
 8004986:	d03c      	beq.n	8004a02 <HAL_TIM_ConfigClockSource+0xf6>
 8004988:	2b50      	cmp	r3, #80	; 0x50
 800498a:	d873      	bhi.n	8004a74 <HAL_TIM_ConfigClockSource+0x168>
 800498c:	2b40      	cmp	r3, #64	; 0x40
 800498e:	d058      	beq.n	8004a42 <HAL_TIM_ConfigClockSource+0x136>
 8004990:	2b40      	cmp	r3, #64	; 0x40
 8004992:	d86f      	bhi.n	8004a74 <HAL_TIM_ConfigClockSource+0x168>
 8004994:	2b30      	cmp	r3, #48	; 0x30
 8004996:	d064      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0x156>
 8004998:	2b30      	cmp	r3, #48	; 0x30
 800499a:	d86b      	bhi.n	8004a74 <HAL_TIM_ConfigClockSource+0x168>
 800499c:	2b20      	cmp	r3, #32
 800499e:	d060      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0x156>
 80049a0:	2b20      	cmp	r3, #32
 80049a2:	d867      	bhi.n	8004a74 <HAL_TIM_ConfigClockSource+0x168>
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d05c      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0x156>
 80049a8:	2b10      	cmp	r3, #16
 80049aa:	d05a      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80049ac:	e062      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6818      	ldr	r0, [r3, #0]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6899      	ldr	r1, [r3, #8]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f000 fb65 	bl	800508c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	609a      	str	r2, [r3, #8]
      break;
 80049da:	e04e      	b.n	8004a7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6818      	ldr	r0, [r3, #0]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	6899      	ldr	r1, [r3, #8]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f000 fb4e 	bl	800508c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049fe:	609a      	str	r2, [r3, #8]
      break;
 8004a00:	e03b      	b.n	8004a7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6818      	ldr	r0, [r3, #0]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	6859      	ldr	r1, [r3, #4]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f000 fac2 	bl	8004f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2150      	movs	r1, #80	; 0x50
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fb1b 	bl	8005056 <TIM_ITRx_SetConfig>
      break;
 8004a20:	e02b      	b.n	8004a7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	6859      	ldr	r1, [r3, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f000 fae1 	bl	8004ff6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2160      	movs	r1, #96	; 0x60
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fb0b 	bl	8005056 <TIM_ITRx_SetConfig>
      break;
 8004a40:	e01b      	b.n	8004a7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	6859      	ldr	r1, [r3, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f000 faa2 	bl	8004f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2140      	movs	r1, #64	; 0x40
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fafb 	bl	8005056 <TIM_ITRx_SetConfig>
      break;
 8004a60:	e00b      	b.n	8004a7a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	f000 faf2 	bl	8005056 <TIM_ITRx_SetConfig>
        break;
 8004a72:	e002      	b.n	8004a7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004a74:	bf00      	nop
 8004a76:	e000      	b.n	8004a7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004a78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a40      	ldr	r2, [pc, #256]	; (8004c0c <TIM_Base_SetConfig+0x114>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d013      	beq.n	8004b38 <TIM_Base_SetConfig+0x40>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b16:	d00f      	beq.n	8004b38 <TIM_Base_SetConfig+0x40>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a3d      	ldr	r2, [pc, #244]	; (8004c10 <TIM_Base_SetConfig+0x118>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00b      	beq.n	8004b38 <TIM_Base_SetConfig+0x40>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a3c      	ldr	r2, [pc, #240]	; (8004c14 <TIM_Base_SetConfig+0x11c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d007      	beq.n	8004b38 <TIM_Base_SetConfig+0x40>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a3b      	ldr	r2, [pc, #236]	; (8004c18 <TIM_Base_SetConfig+0x120>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_Base_SetConfig+0x40>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a3a      	ldr	r2, [pc, #232]	; (8004c1c <TIM_Base_SetConfig+0x124>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d108      	bne.n	8004b4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a2f      	ldr	r2, [pc, #188]	; (8004c0c <TIM_Base_SetConfig+0x114>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d02b      	beq.n	8004baa <TIM_Base_SetConfig+0xb2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b58:	d027      	beq.n	8004baa <TIM_Base_SetConfig+0xb2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a2c      	ldr	r2, [pc, #176]	; (8004c10 <TIM_Base_SetConfig+0x118>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d023      	beq.n	8004baa <TIM_Base_SetConfig+0xb2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a2b      	ldr	r2, [pc, #172]	; (8004c14 <TIM_Base_SetConfig+0x11c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d01f      	beq.n	8004baa <TIM_Base_SetConfig+0xb2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a2a      	ldr	r2, [pc, #168]	; (8004c18 <TIM_Base_SetConfig+0x120>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d01b      	beq.n	8004baa <TIM_Base_SetConfig+0xb2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a29      	ldr	r2, [pc, #164]	; (8004c1c <TIM_Base_SetConfig+0x124>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d017      	beq.n	8004baa <TIM_Base_SetConfig+0xb2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a28      	ldr	r2, [pc, #160]	; (8004c20 <TIM_Base_SetConfig+0x128>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d013      	beq.n	8004baa <TIM_Base_SetConfig+0xb2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a27      	ldr	r2, [pc, #156]	; (8004c24 <TIM_Base_SetConfig+0x12c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00f      	beq.n	8004baa <TIM_Base_SetConfig+0xb2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a26      	ldr	r2, [pc, #152]	; (8004c28 <TIM_Base_SetConfig+0x130>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00b      	beq.n	8004baa <TIM_Base_SetConfig+0xb2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a25      	ldr	r2, [pc, #148]	; (8004c2c <TIM_Base_SetConfig+0x134>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d007      	beq.n	8004baa <TIM_Base_SetConfig+0xb2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a24      	ldr	r2, [pc, #144]	; (8004c30 <TIM_Base_SetConfig+0x138>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d003      	beq.n	8004baa <TIM_Base_SetConfig+0xb2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a23      	ldr	r2, [pc, #140]	; (8004c34 <TIM_Base_SetConfig+0x13c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d108      	bne.n	8004bbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a0a      	ldr	r2, [pc, #40]	; (8004c0c <TIM_Base_SetConfig+0x114>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d003      	beq.n	8004bf0 <TIM_Base_SetConfig+0xf8>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a0c      	ldr	r2, [pc, #48]	; (8004c1c <TIM_Base_SetConfig+0x124>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d103      	bne.n	8004bf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	615a      	str	r2, [r3, #20]
}
 8004bfe:	bf00      	nop
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40010000 	.word	0x40010000
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40000800 	.word	0x40000800
 8004c18:	40000c00 	.word	0x40000c00
 8004c1c:	40010400 	.word	0x40010400
 8004c20:	40014000 	.word	0x40014000
 8004c24:	40014400 	.word	0x40014400
 8004c28:	40014800 	.word	0x40014800
 8004c2c:	40001800 	.word	0x40001800
 8004c30:	40001c00 	.word	0x40001c00
 8004c34:	40002000 	.word	0x40002000

08004c38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f023 0201 	bic.w	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0303 	bic.w	r3, r3, #3
 8004c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f023 0302 	bic.w	r3, r3, #2
 8004c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a20      	ldr	r2, [pc, #128]	; (8004d10 <TIM_OC1_SetConfig+0xd8>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d003      	beq.n	8004c9c <TIM_OC1_SetConfig+0x64>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a1f      	ldr	r2, [pc, #124]	; (8004d14 <TIM_OC1_SetConfig+0xdc>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d10c      	bne.n	8004cb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f023 0308 	bic.w	r3, r3, #8
 8004ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f023 0304 	bic.w	r3, r3, #4
 8004cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a15      	ldr	r2, [pc, #84]	; (8004d10 <TIM_OC1_SetConfig+0xd8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d003      	beq.n	8004cc6 <TIM_OC1_SetConfig+0x8e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a14      	ldr	r2, [pc, #80]	; (8004d14 <TIM_OC1_SetConfig+0xdc>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d111      	bne.n	8004cea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	621a      	str	r2, [r3, #32]
}
 8004d04:	bf00      	nop
 8004d06:	371c      	adds	r7, #28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	40010000 	.word	0x40010000
 8004d14:	40010400 	.word	0x40010400

08004d18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	f023 0210 	bic.w	r2, r3, #16
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f023 0320 	bic.w	r3, r3, #32
 8004d62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a22      	ldr	r2, [pc, #136]	; (8004dfc <TIM_OC2_SetConfig+0xe4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d003      	beq.n	8004d80 <TIM_OC2_SetConfig+0x68>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a21      	ldr	r2, [pc, #132]	; (8004e00 <TIM_OC2_SetConfig+0xe8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d10d      	bne.n	8004d9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a17      	ldr	r2, [pc, #92]	; (8004dfc <TIM_OC2_SetConfig+0xe4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d003      	beq.n	8004dac <TIM_OC2_SetConfig+0x94>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a16      	ldr	r2, [pc, #88]	; (8004e00 <TIM_OC2_SetConfig+0xe8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d113      	bne.n	8004dd4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004db2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	621a      	str	r2, [r3, #32]
}
 8004dee:	bf00      	nop
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40010000 	.word	0x40010000
 8004e00:	40010400 	.word	0x40010400

08004e04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0303 	bic.w	r3, r3, #3
 8004e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	021b      	lsls	r3, r3, #8
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a21      	ldr	r2, [pc, #132]	; (8004ee4 <TIM_OC3_SetConfig+0xe0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d003      	beq.n	8004e6a <TIM_OC3_SetConfig+0x66>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a20      	ldr	r2, [pc, #128]	; (8004ee8 <TIM_OC3_SetConfig+0xe4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d10d      	bne.n	8004e86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	021b      	lsls	r3, r3, #8
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a16      	ldr	r2, [pc, #88]	; (8004ee4 <TIM_OC3_SetConfig+0xe0>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d003      	beq.n	8004e96 <TIM_OC3_SetConfig+0x92>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a15      	ldr	r2, [pc, #84]	; (8004ee8 <TIM_OC3_SetConfig+0xe4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d113      	bne.n	8004ebe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	621a      	str	r2, [r3, #32]
}
 8004ed8:	bf00      	nop
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	40010400 	.word	0x40010400

08004eec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	031b      	lsls	r3, r3, #12
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a12      	ldr	r2, [pc, #72]	; (8004f90 <TIM_OC4_SetConfig+0xa4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_OC4_SetConfig+0x68>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a11      	ldr	r2, [pc, #68]	; (8004f94 <TIM_OC4_SetConfig+0xa8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d109      	bne.n	8004f68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	019b      	lsls	r3, r3, #6
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40010000 	.word	0x40010000
 8004f94:	40010400 	.word	0x40010400

08004f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	f023 0201 	bic.w	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f023 030a 	bic.w	r3, r3, #10
 8004fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	621a      	str	r2, [r3, #32]
}
 8004fea:	bf00      	nop
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b087      	sub	sp, #28
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f023 0210 	bic.w	r2, r3, #16
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005020:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	031b      	lsls	r3, r3, #12
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005032:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	621a      	str	r2, [r3, #32]
}
 800504a:	bf00      	nop
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005056:	b480      	push	{r7}
 8005058:	b085      	sub	sp, #20
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	f043 0307 	orr.w	r3, r3, #7
 8005078:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	609a      	str	r2, [r3, #8]
}
 8005080:	bf00      	nop
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	021a      	lsls	r2, r3, #8
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	431a      	orrs	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	609a      	str	r2, [r3, #8]
}
 80050c0:	bf00      	nop
 80050c2:	371c      	adds	r7, #28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f003 031f 	and.w	r3, r3, #31
 80050de:	2201      	movs	r2, #1
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a1a      	ldr	r2, [r3, #32]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	401a      	ands	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a1a      	ldr	r2, [r3, #32]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f003 031f 	and.w	r3, r3, #31
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	fa01 f303 	lsl.w	r3, r1, r3
 8005104:	431a      	orrs	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
	...

08005118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800512c:	2302      	movs	r3, #2
 800512e:	e05a      	b.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005156:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a21      	ldr	r2, [pc, #132]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d022      	beq.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517c:	d01d      	beq.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1d      	ldr	r2, [pc, #116]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d018      	beq.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1b      	ldr	r2, [pc, #108]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1a      	ldr	r2, [pc, #104]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00e      	beq.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a18      	ldr	r2, [pc, #96]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d009      	beq.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a17      	ldr	r2, [pc, #92]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d004      	beq.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a15      	ldr	r2, [pc, #84]	; (800520c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d10c      	bne.n	80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40010000 	.word	0x40010000
 80051f8:	40000400 	.word	0x40000400
 80051fc:	40000800 	.word	0x40000800
 8005200:	40000c00 	.word	0x40000c00
 8005204:	40010400 	.word	0x40010400
 8005208:	40014000 	.word	0x40014000
 800520c:	40001800 	.word	0x40001800

08005210 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005228:	2302      	movs	r3, #2
 800522a:	e03d      	b.n	80052a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e03f      	b.n	800536e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fd f8b8 	bl	8002478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2224      	movs	r2, #36	; 0x24
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800531e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fd75 	bl	8005e10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695a      	ldr	r2, [r3, #20]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b08a      	sub	sp, #40	; 0x28
 800537a:	af02      	add	r7, sp, #8
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	603b      	str	r3, [r7, #0]
 8005382:	4613      	mov	r3, r2
 8005384:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b20      	cmp	r3, #32
 8005394:	d17c      	bne.n	8005490 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <HAL_UART_Transmit+0x2c>
 800539c:	88fb      	ldrh	r3, [r7, #6]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e075      	b.n	8005492 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_UART_Transmit+0x3e>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e06e      	b.n	8005492 <HAL_UART_Transmit+0x11c>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2221      	movs	r2, #33	; 0x21
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053ca:	f7fd fa55 	bl	8002878 <HAL_GetTick>
 80053ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	88fa      	ldrh	r2, [r7, #6]
 80053d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	88fa      	ldrh	r2, [r7, #6]
 80053da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e4:	d108      	bne.n	80053f8 <HAL_UART_Transmit+0x82>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	e003      	b.n	8005400 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053fc:	2300      	movs	r3, #0
 80053fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005408:	e02a      	b.n	8005460 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2200      	movs	r2, #0
 8005412:	2180      	movs	r1, #128	; 0x80
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 faf7 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e036      	b.n	8005492 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10b      	bne.n	8005442 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005438:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	3302      	adds	r3, #2
 800543e:	61bb      	str	r3, [r7, #24]
 8005440:	e007      	b.n	8005452 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	781a      	ldrb	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	3301      	adds	r3, #1
 8005450:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005456:	b29b      	uxth	r3, r3
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1cf      	bne.n	800540a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2200      	movs	r2, #0
 8005472:	2140      	movs	r1, #64	; 0x40
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 fac7 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e006      	b.n	8005492 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	e000      	b.n	8005492 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005490:	2302      	movs	r3, #2
  }
}
 8005492:	4618      	mov	r0, r3
 8005494:	3720      	adds	r7, #32
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b084      	sub	sp, #16
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	4613      	mov	r3, r2
 80054a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b20      	cmp	r3, #32
 80054b2:	d11d      	bne.n	80054f0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <HAL_UART_Receive_DMA+0x26>
 80054ba:	88fb      	ldrh	r3, [r7, #6]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e016      	b.n	80054f2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d101      	bne.n	80054d2 <HAL_UART_Receive_DMA+0x38>
 80054ce:	2302      	movs	r3, #2
 80054d0:	e00f      	b.n	80054f2 <HAL_UART_Receive_DMA+0x58>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80054e0:	88fb      	ldrh	r3, [r7, #6]
 80054e2:	461a      	mov	r2, r3
 80054e4:	68b9      	ldr	r1, [r7, #8]
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 fad8 	bl	8005a9c <UART_Start_Receive_DMA>
 80054ec:	4603      	mov	r3, r0
 80054ee:	e000      	b.n	80054f2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80054f0:	2302      	movs	r3, #2
  }
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08a      	sub	sp, #40	; 0x28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800551c:	2300      	movs	r3, #0
 800551e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10d      	bne.n	800554e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	2b00      	cmp	r3, #0
 800553a:	d008      	beq.n	800554e <HAL_UART_IRQHandler+0x52>
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fbcb 	bl	8005ce2 <UART_Receive_IT>
      return;
 800554c:	e17c      	b.n	8005848 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 80b1 	beq.w	80056b8 <HAL_UART_IRQHandler+0x1bc>
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d105      	bne.n	800556c <HAL_UART_IRQHandler+0x70>
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 80a6 	beq.w	80056b8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <HAL_UART_IRQHandler+0x90>
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	f043 0201 	orr.w	r2, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	f003 0304 	and.w	r3, r3, #4
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <HAL_UART_IRQHandler+0xb0>
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	f043 0202 	orr.w	r2, r3, #2
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <HAL_UART_IRQHandler+0xd0>
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d005      	beq.n	80055cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c4:	f043 0204 	orr.w	r2, r3, #4
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00f      	beq.n	80055f6 <HAL_UART_IRQHandler+0xfa>
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	f003 0320 	and.w	r3, r3, #32
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d104      	bne.n	80055ea <HAL_UART_IRQHandler+0xee>
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f043 0208 	orr.w	r2, r3, #8
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 811f 	beq.w	800583e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b00      	cmp	r3, #0
 8005608:	d007      	beq.n	800561a <HAL_UART_IRQHandler+0x11e>
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	f003 0320 	and.w	r3, r3, #32
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fb64 	bl	8005ce2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005624:	2b40      	cmp	r3, #64	; 0x40
 8005626:	bf0c      	ite	eq
 8005628:	2301      	moveq	r3, #1
 800562a:	2300      	movne	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b00      	cmp	r3, #0
 800563a:	d102      	bne.n	8005642 <HAL_UART_IRQHandler+0x146>
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d031      	beq.n	80056a6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 faa4 	bl	8005b90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005652:	2b40      	cmp	r3, #64	; 0x40
 8005654:	d123      	bne.n	800569e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695a      	ldr	r2, [r3, #20]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005664:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	2b00      	cmp	r3, #0
 800566c:	d013      	beq.n	8005696 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005672:	4a77      	ldr	r2, [pc, #476]	; (8005850 <HAL_UART_IRQHandler+0x354>)
 8005674:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	4618      	mov	r0, r3
 800567c:	f7fd fbb4 	bl	8002de8 <HAL_DMA_Abort_IT>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d016      	beq.n	80056b4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005690:	4610      	mov	r0, r2
 8005692:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005694:	e00e      	b.n	80056b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f8f0 	bl	800587c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800569c:	e00a      	b.n	80056b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f8ec 	bl	800587c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a4:	e006      	b.n	80056b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f8e8 	bl	800587c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80056b2:	e0c4      	b.n	800583e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b4:	bf00      	nop
    return;
 80056b6:	e0c2      	b.n	800583e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	2b01      	cmp	r3, #1
 80056be:	f040 80a2 	bne.w	8005806 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 809c 	beq.w	8005806 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8096 	beq.w	8005806 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056da:	2300      	movs	r3, #0
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fa:	2b40      	cmp	r3, #64	; 0x40
 80056fc:	d14f      	bne.n	800579e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005708:	8a3b      	ldrh	r3, [r7, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 8099 	beq.w	8005842 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005714:	8a3a      	ldrh	r2, [r7, #16]
 8005716:	429a      	cmp	r2, r3
 8005718:	f080 8093 	bcs.w	8005842 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	8a3a      	ldrh	r2, [r7, #16]
 8005720:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572c:	d02b      	beq.n	8005786 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800573c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695a      	ldr	r2, [r3, #20]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0201 	bic.w	r2, r2, #1
 800574c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695a      	ldr	r2, [r3, #20]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800575c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0210 	bic.w	r2, r2, #16
 800577a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005780:	4618      	mov	r0, r3
 8005782:	f7fd fac1 	bl	8002d08 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800578e:	b29b      	uxth	r3, r3
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	b29b      	uxth	r3, r3
 8005794:	4619      	mov	r1, r3
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f87a 	bl	8005890 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800579c:	e051      	b.n	8005842 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d047      	beq.n	8005846 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80057b6:	8a7b      	ldrh	r3, [r7, #18]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d044      	beq.n	8005846 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057ca:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695a      	ldr	r2, [r3, #20]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0201 	bic.w	r2, r2, #1
 80057da:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0210 	bic.w	r2, r2, #16
 80057f8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057fa:	8a7b      	ldrh	r3, [r7, #18]
 80057fc:	4619      	mov	r1, r3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f846 	bl	8005890 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005804:	e01f      	b.n	8005846 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580c:	2b00      	cmp	r3, #0
 800580e:	d008      	beq.n	8005822 <HAL_UART_IRQHandler+0x326>
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f9f9 	bl	8005c12 <UART_Transmit_IT>
    return;
 8005820:	e012      	b.n	8005848 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00d      	beq.n	8005848 <HAL_UART_IRQHandler+0x34c>
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005832:	2b00      	cmp	r3, #0
 8005834:	d008      	beq.n	8005848 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fa3b 	bl	8005cb2 <UART_EndTransmit_IT>
    return;
 800583c:	e004      	b.n	8005848 <HAL_UART_IRQHandler+0x34c>
    return;
 800583e:	bf00      	nop
 8005840:	e002      	b.n	8005848 <HAL_UART_IRQHandler+0x34c>
      return;
 8005842:	bf00      	nop
 8005844:	e000      	b.n	8005848 <HAL_UART_IRQHandler+0x34c>
      return;
 8005846:	bf00      	nop
  }
}
 8005848:	3728      	adds	r7, #40	; 0x28
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	08005beb 	.word	0x08005beb

08005854 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d12a      	bne.n	800591a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058d8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695a      	ldr	r2, [r3, #20]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0201 	bic.w	r2, r2, #1
 80058e8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695a      	ldr	r2, [r3, #20]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058f8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	2b01      	cmp	r3, #1
 8005908:	d107      	bne.n	800591a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0210 	bic.w	r2, r2, #16
 8005918:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	2b01      	cmp	r3, #1
 8005920:	d106      	bne.n	8005930 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005926:	4619      	mov	r1, r3
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f7ff ffb1 	bl	8005890 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800592e:	e002      	b.n	8005936 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f7fb ff79 	bl	8001828 <HAL_UART_RxCpltCallback>
}
 8005936:	bf00      	nop
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005950:	2b01      	cmp	r3, #1
 8005952:	d108      	bne.n	8005966 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005958:	085b      	lsrs	r3, r3, #1
 800595a:	b29b      	uxth	r3, r3
 800595c:	4619      	mov	r1, r3
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f7ff ff96 	bl	8005890 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005964:	e002      	b.n	800596c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f7ff ff7e 	bl	8005868 <HAL_UART_RxHalfCpltCallback>
}
 800596c:	bf00      	nop
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800597c:	2300      	movs	r3, #0
 800597e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005990:	2b80      	cmp	r3, #128	; 0x80
 8005992:	bf0c      	ite	eq
 8005994:	2301      	moveq	r3, #1
 8005996:	2300      	movne	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b21      	cmp	r3, #33	; 0x21
 80059a6:	d108      	bne.n	80059ba <UART_DMAError+0x46>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d005      	beq.n	80059ba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2200      	movs	r2, #0
 80059b2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80059b4:	68b8      	ldr	r0, [r7, #8]
 80059b6:	f000 f8d5 	bl	8005b64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c4:	2b40      	cmp	r3, #64	; 0x40
 80059c6:	bf0c      	ite	eq
 80059c8:	2301      	moveq	r3, #1
 80059ca:	2300      	movne	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b22      	cmp	r3, #34	; 0x22
 80059da:	d108      	bne.n	80059ee <UART_DMAError+0x7a>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2200      	movs	r2, #0
 80059e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80059e8:	68b8      	ldr	r0, [r7, #8]
 80059ea:	f000 f8d1 	bl	8005b90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	f043 0210 	orr.w	r2, r3, #16
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059fa:	68b8      	ldr	r0, [r7, #8]
 80059fc:	f7ff ff3e 	bl	800587c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a00:	bf00      	nop
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	603b      	str	r3, [r7, #0]
 8005a14:	4613      	mov	r3, r2
 8005a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a18:	e02c      	b.n	8005a74 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a20:	d028      	beq.n	8005a74 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d007      	beq.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a28:	f7fc ff26 	bl	8002878 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d21d      	bcs.n	8005a74 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a46:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695a      	ldr	r2, [r3, #20]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0201 	bic.w	r2, r2, #1
 8005a56:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e00f      	b.n	8005a94 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	bf0c      	ite	eq
 8005a84:	2301      	moveq	r3, #1
 8005a86:	2300      	movne	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	79fb      	ldrb	r3, [r7, #7]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d0c3      	beq.n	8005a1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	88fa      	ldrh	r2, [r7, #6]
 8005ab4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2222      	movs	r2, #34	; 0x22
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	4a23      	ldr	r2, [pc, #140]	; (8005b58 <UART_Start_Receive_DMA+0xbc>)
 8005aca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	4a22      	ldr	r2, [pc, #136]	; (8005b5c <UART_Start_Receive_DMA+0xc0>)
 8005ad2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	4a21      	ldr	r2, [pc, #132]	; (8005b60 <UART_Start_Receive_DMA+0xc4>)
 8005ada:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005ae4:	f107 0308 	add.w	r3, r7, #8
 8005ae8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4619      	mov	r1, r3
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	f7fd f8ac 	bl	8002c58 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005b00:	2300      	movs	r3, #0
 8005b02:	613b      	str	r3, [r7, #16]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	613b      	str	r3, [r7, #16]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68da      	ldr	r2, [r3, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b2c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695a      	ldr	r2, [r3, #20]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0201 	orr.w	r2, r2, #1
 8005b3c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	695a      	ldr	r2, [r3, #20]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b4c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	080058a9 	.word	0x080058a9
 8005b5c:	0800593f 	.word	0x0800593f
 8005b60:	08005975 	.word	0x08005975

08005b64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005b7a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ba6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695a      	ldr	r2, [r3, #20]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0201 	bic.w	r2, r2, #1
 8005bb6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d107      	bne.n	8005bd0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0210 	bic.w	r2, r2, #16
 8005bce:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f7ff fe39 	bl	800587c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c0a:	bf00      	nop
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b085      	sub	sp, #20
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b21      	cmp	r3, #33	; 0x21
 8005c24:	d13e      	bne.n	8005ca4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2e:	d114      	bne.n	8005c5a <UART_Transmit_IT+0x48>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d110      	bne.n	8005c5a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	1c9a      	adds	r2, r3, #2
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	621a      	str	r2, [r3, #32]
 8005c58:	e008      	b.n	8005c6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	1c59      	adds	r1, r3, #1
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6211      	str	r1, [r2, #32]
 8005c64:	781a      	ldrb	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	4619      	mov	r1, r3
 8005c7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10f      	bne.n	8005ca0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	e000      	b.n	8005ca6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ca4:	2302      	movs	r3, #2
  }
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7ff fdbe 	bl	8005854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b22      	cmp	r3, #34	; 0x22
 8005cf4:	f040 8087 	bne.w	8005e06 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d00:	d117      	bne.n	8005d32 <UART_Receive_IT+0x50>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d113      	bne.n	8005d32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d12:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	1c9a      	adds	r2, r3, #2
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d30:	e026      	b.n	8005d80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d36:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d44:	d007      	beq.n	8005d56 <UART_Receive_IT+0x74>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10a      	bne.n	8005d64 <UART_Receive_IT+0x82>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d106      	bne.n	8005d64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	e008      	b.n	8005d76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d136      	bne.n	8005e02 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0220 	bic.w	r2, r2, #32
 8005da2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005db2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695a      	ldr	r2, [r3, #20]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0201 	bic.w	r2, r2, #1
 8005dc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d10e      	bne.n	8005df2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0210 	bic.w	r2, r2, #16
 8005de2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005de8:	4619      	mov	r1, r3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff fd50 	bl	8005890 <HAL_UARTEx_RxEventCallback>
 8005df0:	e002      	b.n	8005df8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7fb fd18 	bl	8001828 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	e002      	b.n	8005e08 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	e000      	b.n	8005e08 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005e06:	2302      	movs	r3, #2
  }
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e14:	b09f      	sub	sp, #124	; 0x7c
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e26:	68d9      	ldr	r1, [r3, #12]
 8005e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	ea40 0301 	orr.w	r3, r0, r1
 8005e30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e34:	689a      	ldr	r2, [r3, #8]
 8005e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	431a      	orrs	r2, r3
 8005e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e54:	f021 010c 	bic.w	r1, r1, #12
 8005e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e5e:	430b      	orrs	r3, r1
 8005e60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e6e:	6999      	ldr	r1, [r3, #24]
 8005e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	ea40 0301 	orr.w	r3, r0, r1
 8005e78:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4bc5      	ldr	r3, [pc, #788]	; (8006194 <UART_SetConfig+0x384>)
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d004      	beq.n	8005e8e <UART_SetConfig+0x7e>
 8005e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	4bc3      	ldr	r3, [pc, #780]	; (8006198 <UART_SetConfig+0x388>)
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d103      	bne.n	8005e96 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e8e:	f7fe f84d 	bl	8003f2c <HAL_RCC_GetPCLK2Freq>
 8005e92:	6778      	str	r0, [r7, #116]	; 0x74
 8005e94:	e002      	b.n	8005e9c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e96:	f7fe f835 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 8005e9a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea4:	f040 80b6 	bne.w	8006014 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eaa:	461c      	mov	r4, r3
 8005eac:	f04f 0500 	mov.w	r5, #0
 8005eb0:	4622      	mov	r2, r4
 8005eb2:	462b      	mov	r3, r5
 8005eb4:	1891      	adds	r1, r2, r2
 8005eb6:	6439      	str	r1, [r7, #64]	; 0x40
 8005eb8:	415b      	adcs	r3, r3
 8005eba:	647b      	str	r3, [r7, #68]	; 0x44
 8005ebc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ec0:	1912      	adds	r2, r2, r4
 8005ec2:	eb45 0303 	adc.w	r3, r5, r3
 8005ec6:	f04f 0000 	mov.w	r0, #0
 8005eca:	f04f 0100 	mov.w	r1, #0
 8005ece:	00d9      	lsls	r1, r3, #3
 8005ed0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ed4:	00d0      	lsls	r0, r2, #3
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	1911      	adds	r1, r2, r4
 8005edc:	6639      	str	r1, [r7, #96]	; 0x60
 8005ede:	416b      	adcs	r3, r5
 8005ee0:	667b      	str	r3, [r7, #100]	; 0x64
 8005ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f04f 0300 	mov.w	r3, #0
 8005eec:	1891      	adds	r1, r2, r2
 8005eee:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ef0:	415b      	adcs	r3, r3
 8005ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ef8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005efc:	f7fa fe54 	bl	8000ba8 <__aeabi_uldivmod>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4ba5      	ldr	r3, [pc, #660]	; (800619c <UART_SetConfig+0x38c>)
 8005f06:	fba3 2302 	umull	r2, r3, r3, r2
 8005f0a:	095b      	lsrs	r3, r3, #5
 8005f0c:	011e      	lsls	r6, r3, #4
 8005f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f10:	461c      	mov	r4, r3
 8005f12:	f04f 0500 	mov.w	r5, #0
 8005f16:	4622      	mov	r2, r4
 8005f18:	462b      	mov	r3, r5
 8005f1a:	1891      	adds	r1, r2, r2
 8005f1c:	6339      	str	r1, [r7, #48]	; 0x30
 8005f1e:	415b      	adcs	r3, r3
 8005f20:	637b      	str	r3, [r7, #52]	; 0x34
 8005f22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f26:	1912      	adds	r2, r2, r4
 8005f28:	eb45 0303 	adc.w	r3, r5, r3
 8005f2c:	f04f 0000 	mov.w	r0, #0
 8005f30:	f04f 0100 	mov.w	r1, #0
 8005f34:	00d9      	lsls	r1, r3, #3
 8005f36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f3a:	00d0      	lsls	r0, r2, #3
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	1911      	adds	r1, r2, r4
 8005f42:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f44:	416b      	adcs	r3, r5
 8005f46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f04f 0300 	mov.w	r3, #0
 8005f52:	1891      	adds	r1, r2, r2
 8005f54:	62b9      	str	r1, [r7, #40]	; 0x28
 8005f56:	415b      	adcs	r3, r3
 8005f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f5e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005f62:	f7fa fe21 	bl	8000ba8 <__aeabi_uldivmod>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4b8c      	ldr	r3, [pc, #560]	; (800619c <UART_SetConfig+0x38c>)
 8005f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f70:	095b      	lsrs	r3, r3, #5
 8005f72:	2164      	movs	r1, #100	; 0x64
 8005f74:	fb01 f303 	mul.w	r3, r1, r3
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	3332      	adds	r3, #50	; 0x32
 8005f7e:	4a87      	ldr	r2, [pc, #540]	; (800619c <UART_SetConfig+0x38c>)
 8005f80:	fba2 2303 	umull	r2, r3, r2, r3
 8005f84:	095b      	lsrs	r3, r3, #5
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f8c:	441e      	add	r6, r3
 8005f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f90:	4618      	mov	r0, r3
 8005f92:	f04f 0100 	mov.w	r1, #0
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	1894      	adds	r4, r2, r2
 8005f9c:	623c      	str	r4, [r7, #32]
 8005f9e:	415b      	adcs	r3, r3
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fa6:	1812      	adds	r2, r2, r0
 8005fa8:	eb41 0303 	adc.w	r3, r1, r3
 8005fac:	f04f 0400 	mov.w	r4, #0
 8005fb0:	f04f 0500 	mov.w	r5, #0
 8005fb4:	00dd      	lsls	r5, r3, #3
 8005fb6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fba:	00d4      	lsls	r4, r2, #3
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	462b      	mov	r3, r5
 8005fc0:	1814      	adds	r4, r2, r0
 8005fc2:	653c      	str	r4, [r7, #80]	; 0x50
 8005fc4:	414b      	adcs	r3, r1
 8005fc6:	657b      	str	r3, [r7, #84]	; 0x54
 8005fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	f04f 0300 	mov.w	r3, #0
 8005fd2:	1891      	adds	r1, r2, r2
 8005fd4:	61b9      	str	r1, [r7, #24]
 8005fd6:	415b      	adcs	r3, r3
 8005fd8:	61fb      	str	r3, [r7, #28]
 8005fda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fde:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005fe2:	f7fa fde1 	bl	8000ba8 <__aeabi_uldivmod>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4b6c      	ldr	r3, [pc, #432]	; (800619c <UART_SetConfig+0x38c>)
 8005fec:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff0:	095b      	lsrs	r3, r3, #5
 8005ff2:	2164      	movs	r1, #100	; 0x64
 8005ff4:	fb01 f303 	mul.w	r3, r1, r3
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	3332      	adds	r3, #50	; 0x32
 8005ffe:	4a67      	ldr	r2, [pc, #412]	; (800619c <UART_SetConfig+0x38c>)
 8006000:	fba2 2303 	umull	r2, r3, r2, r3
 8006004:	095b      	lsrs	r3, r3, #5
 8006006:	f003 0207 	and.w	r2, r3, #7
 800600a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4432      	add	r2, r6
 8006010:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006012:	e0b9      	b.n	8006188 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006016:	461c      	mov	r4, r3
 8006018:	f04f 0500 	mov.w	r5, #0
 800601c:	4622      	mov	r2, r4
 800601e:	462b      	mov	r3, r5
 8006020:	1891      	adds	r1, r2, r2
 8006022:	6139      	str	r1, [r7, #16]
 8006024:	415b      	adcs	r3, r3
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800602c:	1912      	adds	r2, r2, r4
 800602e:	eb45 0303 	adc.w	r3, r5, r3
 8006032:	f04f 0000 	mov.w	r0, #0
 8006036:	f04f 0100 	mov.w	r1, #0
 800603a:	00d9      	lsls	r1, r3, #3
 800603c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006040:	00d0      	lsls	r0, r2, #3
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	eb12 0804 	adds.w	r8, r2, r4
 800604a:	eb43 0905 	adc.w	r9, r3, r5
 800604e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	4618      	mov	r0, r3
 8006054:	f04f 0100 	mov.w	r1, #0
 8006058:	f04f 0200 	mov.w	r2, #0
 800605c:	f04f 0300 	mov.w	r3, #0
 8006060:	008b      	lsls	r3, r1, #2
 8006062:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006066:	0082      	lsls	r2, r0, #2
 8006068:	4640      	mov	r0, r8
 800606a:	4649      	mov	r1, r9
 800606c:	f7fa fd9c 	bl	8000ba8 <__aeabi_uldivmod>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4b49      	ldr	r3, [pc, #292]	; (800619c <UART_SetConfig+0x38c>)
 8006076:	fba3 2302 	umull	r2, r3, r3, r2
 800607a:	095b      	lsrs	r3, r3, #5
 800607c:	011e      	lsls	r6, r3, #4
 800607e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006080:	4618      	mov	r0, r3
 8006082:	f04f 0100 	mov.w	r1, #0
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	1894      	adds	r4, r2, r2
 800608c:	60bc      	str	r4, [r7, #8]
 800608e:	415b      	adcs	r3, r3
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006096:	1812      	adds	r2, r2, r0
 8006098:	eb41 0303 	adc.w	r3, r1, r3
 800609c:	f04f 0400 	mov.w	r4, #0
 80060a0:	f04f 0500 	mov.w	r5, #0
 80060a4:	00dd      	lsls	r5, r3, #3
 80060a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060aa:	00d4      	lsls	r4, r2, #3
 80060ac:	4622      	mov	r2, r4
 80060ae:	462b      	mov	r3, r5
 80060b0:	1814      	adds	r4, r2, r0
 80060b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80060b4:	414b      	adcs	r3, r1
 80060b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	4618      	mov	r0, r3
 80060be:	f04f 0100 	mov.w	r1, #0
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	008b      	lsls	r3, r1, #2
 80060cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060d0:	0082      	lsls	r2, r0, #2
 80060d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80060d6:	f7fa fd67 	bl	8000ba8 <__aeabi_uldivmod>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4b2f      	ldr	r3, [pc, #188]	; (800619c <UART_SetConfig+0x38c>)
 80060e0:	fba3 1302 	umull	r1, r3, r3, r2
 80060e4:	095b      	lsrs	r3, r3, #5
 80060e6:	2164      	movs	r1, #100	; 0x64
 80060e8:	fb01 f303 	mul.w	r3, r1, r3
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	3332      	adds	r3, #50	; 0x32
 80060f2:	4a2a      	ldr	r2, [pc, #168]	; (800619c <UART_SetConfig+0x38c>)
 80060f4:	fba2 2303 	umull	r2, r3, r2, r3
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060fe:	441e      	add	r6, r3
 8006100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006102:	4618      	mov	r0, r3
 8006104:	f04f 0100 	mov.w	r1, #0
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	1894      	adds	r4, r2, r2
 800610e:	603c      	str	r4, [r7, #0]
 8006110:	415b      	adcs	r3, r3
 8006112:	607b      	str	r3, [r7, #4]
 8006114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006118:	1812      	adds	r2, r2, r0
 800611a:	eb41 0303 	adc.w	r3, r1, r3
 800611e:	f04f 0400 	mov.w	r4, #0
 8006122:	f04f 0500 	mov.w	r5, #0
 8006126:	00dd      	lsls	r5, r3, #3
 8006128:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800612c:	00d4      	lsls	r4, r2, #3
 800612e:	4622      	mov	r2, r4
 8006130:	462b      	mov	r3, r5
 8006132:	eb12 0a00 	adds.w	sl, r2, r0
 8006136:	eb43 0b01 	adc.w	fp, r3, r1
 800613a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	4618      	mov	r0, r3
 8006140:	f04f 0100 	mov.w	r1, #0
 8006144:	f04f 0200 	mov.w	r2, #0
 8006148:	f04f 0300 	mov.w	r3, #0
 800614c:	008b      	lsls	r3, r1, #2
 800614e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006152:	0082      	lsls	r2, r0, #2
 8006154:	4650      	mov	r0, sl
 8006156:	4659      	mov	r1, fp
 8006158:	f7fa fd26 	bl	8000ba8 <__aeabi_uldivmod>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4b0e      	ldr	r3, [pc, #56]	; (800619c <UART_SetConfig+0x38c>)
 8006162:	fba3 1302 	umull	r1, r3, r3, r2
 8006166:	095b      	lsrs	r3, r3, #5
 8006168:	2164      	movs	r1, #100	; 0x64
 800616a:	fb01 f303 	mul.w	r3, r1, r3
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	3332      	adds	r3, #50	; 0x32
 8006174:	4a09      	ldr	r2, [pc, #36]	; (800619c <UART_SetConfig+0x38c>)
 8006176:	fba2 2303 	umull	r2, r3, r2, r3
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	f003 020f 	and.w	r2, r3, #15
 8006180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4432      	add	r2, r6
 8006186:	609a      	str	r2, [r3, #8]
}
 8006188:	bf00      	nop
 800618a:	377c      	adds	r7, #124	; 0x7c
 800618c:	46bd      	mov	sp, r7
 800618e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006192:	bf00      	nop
 8006194:	40011000 	.word	0x40011000
 8006198:	40011400 	.word	0x40011400
 800619c:	51eb851f 	.word	0x51eb851f

080061a0 <atoi>:
 80061a0:	220a      	movs	r2, #10
 80061a2:	2100      	movs	r1, #0
 80061a4:	f000 bd9c 	b.w	8006ce0 <strtol>

080061a8 <__errno>:
 80061a8:	4b01      	ldr	r3, [pc, #4]	; (80061b0 <__errno+0x8>)
 80061aa:	6818      	ldr	r0, [r3, #0]
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	20000010 	.word	0x20000010

080061b4 <__libc_init_array>:
 80061b4:	b570      	push	{r4, r5, r6, lr}
 80061b6:	4d0d      	ldr	r5, [pc, #52]	; (80061ec <__libc_init_array+0x38>)
 80061b8:	4c0d      	ldr	r4, [pc, #52]	; (80061f0 <__libc_init_array+0x3c>)
 80061ba:	1b64      	subs	r4, r4, r5
 80061bc:	10a4      	asrs	r4, r4, #2
 80061be:	2600      	movs	r6, #0
 80061c0:	42a6      	cmp	r6, r4
 80061c2:	d109      	bne.n	80061d8 <__libc_init_array+0x24>
 80061c4:	4d0b      	ldr	r5, [pc, #44]	; (80061f4 <__libc_init_array+0x40>)
 80061c6:	4c0c      	ldr	r4, [pc, #48]	; (80061f8 <__libc_init_array+0x44>)
 80061c8:	f003 f974 	bl	80094b4 <_init>
 80061cc:	1b64      	subs	r4, r4, r5
 80061ce:	10a4      	asrs	r4, r4, #2
 80061d0:	2600      	movs	r6, #0
 80061d2:	42a6      	cmp	r6, r4
 80061d4:	d105      	bne.n	80061e2 <__libc_init_array+0x2e>
 80061d6:	bd70      	pop	{r4, r5, r6, pc}
 80061d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061dc:	4798      	blx	r3
 80061de:	3601      	adds	r6, #1
 80061e0:	e7ee      	b.n	80061c0 <__libc_init_array+0xc>
 80061e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e6:	4798      	blx	r3
 80061e8:	3601      	adds	r6, #1
 80061ea:	e7f2      	b.n	80061d2 <__libc_init_array+0x1e>
 80061ec:	08009988 	.word	0x08009988
 80061f0:	08009988 	.word	0x08009988
 80061f4:	08009988 	.word	0x08009988
 80061f8:	0800998c 	.word	0x0800998c

080061fc <memset>:
 80061fc:	4402      	add	r2, r0
 80061fe:	4603      	mov	r3, r0
 8006200:	4293      	cmp	r3, r2
 8006202:	d100      	bne.n	8006206 <memset+0xa>
 8006204:	4770      	bx	lr
 8006206:	f803 1b01 	strb.w	r1, [r3], #1
 800620a:	e7f9      	b.n	8006200 <memset+0x4>

0800620c <__cvt>:
 800620c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006210:	ec55 4b10 	vmov	r4, r5, d0
 8006214:	2d00      	cmp	r5, #0
 8006216:	460e      	mov	r6, r1
 8006218:	4619      	mov	r1, r3
 800621a:	462b      	mov	r3, r5
 800621c:	bfbb      	ittet	lt
 800621e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006222:	461d      	movlt	r5, r3
 8006224:	2300      	movge	r3, #0
 8006226:	232d      	movlt	r3, #45	; 0x2d
 8006228:	700b      	strb	r3, [r1, #0]
 800622a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800622c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006230:	4691      	mov	r9, r2
 8006232:	f023 0820 	bic.w	r8, r3, #32
 8006236:	bfbc      	itt	lt
 8006238:	4622      	movlt	r2, r4
 800623a:	4614      	movlt	r4, r2
 800623c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006240:	d005      	beq.n	800624e <__cvt+0x42>
 8006242:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006246:	d100      	bne.n	800624a <__cvt+0x3e>
 8006248:	3601      	adds	r6, #1
 800624a:	2102      	movs	r1, #2
 800624c:	e000      	b.n	8006250 <__cvt+0x44>
 800624e:	2103      	movs	r1, #3
 8006250:	ab03      	add	r3, sp, #12
 8006252:	9301      	str	r3, [sp, #4]
 8006254:	ab02      	add	r3, sp, #8
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	ec45 4b10 	vmov	d0, r4, r5
 800625c:	4653      	mov	r3, sl
 800625e:	4632      	mov	r2, r6
 8006260:	f000 fdf2 	bl	8006e48 <_dtoa_r>
 8006264:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006268:	4607      	mov	r7, r0
 800626a:	d102      	bne.n	8006272 <__cvt+0x66>
 800626c:	f019 0f01 	tst.w	r9, #1
 8006270:	d022      	beq.n	80062b8 <__cvt+0xac>
 8006272:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006276:	eb07 0906 	add.w	r9, r7, r6
 800627a:	d110      	bne.n	800629e <__cvt+0x92>
 800627c:	783b      	ldrb	r3, [r7, #0]
 800627e:	2b30      	cmp	r3, #48	; 0x30
 8006280:	d10a      	bne.n	8006298 <__cvt+0x8c>
 8006282:	2200      	movs	r2, #0
 8006284:	2300      	movs	r3, #0
 8006286:	4620      	mov	r0, r4
 8006288:	4629      	mov	r1, r5
 800628a:	f7fa fc1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800628e:	b918      	cbnz	r0, 8006298 <__cvt+0x8c>
 8006290:	f1c6 0601 	rsb	r6, r6, #1
 8006294:	f8ca 6000 	str.w	r6, [sl]
 8006298:	f8da 3000 	ldr.w	r3, [sl]
 800629c:	4499      	add	r9, r3
 800629e:	2200      	movs	r2, #0
 80062a0:	2300      	movs	r3, #0
 80062a2:	4620      	mov	r0, r4
 80062a4:	4629      	mov	r1, r5
 80062a6:	f7fa fc0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80062aa:	b108      	cbz	r0, 80062b0 <__cvt+0xa4>
 80062ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80062b0:	2230      	movs	r2, #48	; 0x30
 80062b2:	9b03      	ldr	r3, [sp, #12]
 80062b4:	454b      	cmp	r3, r9
 80062b6:	d307      	bcc.n	80062c8 <__cvt+0xbc>
 80062b8:	9b03      	ldr	r3, [sp, #12]
 80062ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062bc:	1bdb      	subs	r3, r3, r7
 80062be:	4638      	mov	r0, r7
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	b004      	add	sp, #16
 80062c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c8:	1c59      	adds	r1, r3, #1
 80062ca:	9103      	str	r1, [sp, #12]
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	e7f0      	b.n	80062b2 <__cvt+0xa6>

080062d0 <__exponent>:
 80062d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062d2:	4603      	mov	r3, r0
 80062d4:	2900      	cmp	r1, #0
 80062d6:	bfb8      	it	lt
 80062d8:	4249      	neglt	r1, r1
 80062da:	f803 2b02 	strb.w	r2, [r3], #2
 80062de:	bfb4      	ite	lt
 80062e0:	222d      	movlt	r2, #45	; 0x2d
 80062e2:	222b      	movge	r2, #43	; 0x2b
 80062e4:	2909      	cmp	r1, #9
 80062e6:	7042      	strb	r2, [r0, #1]
 80062e8:	dd2a      	ble.n	8006340 <__exponent+0x70>
 80062ea:	f10d 0407 	add.w	r4, sp, #7
 80062ee:	46a4      	mov	ip, r4
 80062f0:	270a      	movs	r7, #10
 80062f2:	46a6      	mov	lr, r4
 80062f4:	460a      	mov	r2, r1
 80062f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80062fa:	fb07 1516 	mls	r5, r7, r6, r1
 80062fe:	3530      	adds	r5, #48	; 0x30
 8006300:	2a63      	cmp	r2, #99	; 0x63
 8006302:	f104 34ff 	add.w	r4, r4, #4294967295
 8006306:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800630a:	4631      	mov	r1, r6
 800630c:	dcf1      	bgt.n	80062f2 <__exponent+0x22>
 800630e:	3130      	adds	r1, #48	; 0x30
 8006310:	f1ae 0502 	sub.w	r5, lr, #2
 8006314:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006318:	1c44      	adds	r4, r0, #1
 800631a:	4629      	mov	r1, r5
 800631c:	4561      	cmp	r1, ip
 800631e:	d30a      	bcc.n	8006336 <__exponent+0x66>
 8006320:	f10d 0209 	add.w	r2, sp, #9
 8006324:	eba2 020e 	sub.w	r2, r2, lr
 8006328:	4565      	cmp	r5, ip
 800632a:	bf88      	it	hi
 800632c:	2200      	movhi	r2, #0
 800632e:	4413      	add	r3, r2
 8006330:	1a18      	subs	r0, r3, r0
 8006332:	b003      	add	sp, #12
 8006334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006336:	f811 2b01 	ldrb.w	r2, [r1], #1
 800633a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800633e:	e7ed      	b.n	800631c <__exponent+0x4c>
 8006340:	2330      	movs	r3, #48	; 0x30
 8006342:	3130      	adds	r1, #48	; 0x30
 8006344:	7083      	strb	r3, [r0, #2]
 8006346:	70c1      	strb	r1, [r0, #3]
 8006348:	1d03      	adds	r3, r0, #4
 800634a:	e7f1      	b.n	8006330 <__exponent+0x60>

0800634c <_printf_float>:
 800634c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006350:	ed2d 8b02 	vpush	{d8}
 8006354:	b08d      	sub	sp, #52	; 0x34
 8006356:	460c      	mov	r4, r1
 8006358:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800635c:	4616      	mov	r6, r2
 800635e:	461f      	mov	r7, r3
 8006360:	4605      	mov	r5, r0
 8006362:	f001 fb6f 	bl	8007a44 <_localeconv_r>
 8006366:	f8d0 a000 	ldr.w	sl, [r0]
 800636a:	4650      	mov	r0, sl
 800636c:	f7f9 ff30 	bl	80001d0 <strlen>
 8006370:	2300      	movs	r3, #0
 8006372:	930a      	str	r3, [sp, #40]	; 0x28
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	9305      	str	r3, [sp, #20]
 8006378:	f8d8 3000 	ldr.w	r3, [r8]
 800637c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006380:	3307      	adds	r3, #7
 8006382:	f023 0307 	bic.w	r3, r3, #7
 8006386:	f103 0208 	add.w	r2, r3, #8
 800638a:	f8c8 2000 	str.w	r2, [r8]
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006396:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800639a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800639e:	9307      	str	r3, [sp, #28]
 80063a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80063a4:	ee08 0a10 	vmov	s16, r0
 80063a8:	4b9f      	ldr	r3, [pc, #636]	; (8006628 <_printf_float+0x2dc>)
 80063aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063ae:	f04f 32ff 	mov.w	r2, #4294967295
 80063b2:	f7fa fbbb 	bl	8000b2c <__aeabi_dcmpun>
 80063b6:	bb88      	cbnz	r0, 800641c <_printf_float+0xd0>
 80063b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063bc:	4b9a      	ldr	r3, [pc, #616]	; (8006628 <_printf_float+0x2dc>)
 80063be:	f04f 32ff 	mov.w	r2, #4294967295
 80063c2:	f7fa fb95 	bl	8000af0 <__aeabi_dcmple>
 80063c6:	bb48      	cbnz	r0, 800641c <_printf_float+0xd0>
 80063c8:	2200      	movs	r2, #0
 80063ca:	2300      	movs	r3, #0
 80063cc:	4640      	mov	r0, r8
 80063ce:	4649      	mov	r1, r9
 80063d0:	f7fa fb84 	bl	8000adc <__aeabi_dcmplt>
 80063d4:	b110      	cbz	r0, 80063dc <_printf_float+0x90>
 80063d6:	232d      	movs	r3, #45	; 0x2d
 80063d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063dc:	4b93      	ldr	r3, [pc, #588]	; (800662c <_printf_float+0x2e0>)
 80063de:	4894      	ldr	r0, [pc, #592]	; (8006630 <_printf_float+0x2e4>)
 80063e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80063e4:	bf94      	ite	ls
 80063e6:	4698      	movls	r8, r3
 80063e8:	4680      	movhi	r8, r0
 80063ea:	2303      	movs	r3, #3
 80063ec:	6123      	str	r3, [r4, #16]
 80063ee:	9b05      	ldr	r3, [sp, #20]
 80063f0:	f023 0204 	bic.w	r2, r3, #4
 80063f4:	6022      	str	r2, [r4, #0]
 80063f6:	f04f 0900 	mov.w	r9, #0
 80063fa:	9700      	str	r7, [sp, #0]
 80063fc:	4633      	mov	r3, r6
 80063fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8006400:	4621      	mov	r1, r4
 8006402:	4628      	mov	r0, r5
 8006404:	f000 f9d8 	bl	80067b8 <_printf_common>
 8006408:	3001      	adds	r0, #1
 800640a:	f040 8090 	bne.w	800652e <_printf_float+0x1e2>
 800640e:	f04f 30ff 	mov.w	r0, #4294967295
 8006412:	b00d      	add	sp, #52	; 0x34
 8006414:	ecbd 8b02 	vpop	{d8}
 8006418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641c:	4642      	mov	r2, r8
 800641e:	464b      	mov	r3, r9
 8006420:	4640      	mov	r0, r8
 8006422:	4649      	mov	r1, r9
 8006424:	f7fa fb82 	bl	8000b2c <__aeabi_dcmpun>
 8006428:	b140      	cbz	r0, 800643c <_printf_float+0xf0>
 800642a:	464b      	mov	r3, r9
 800642c:	2b00      	cmp	r3, #0
 800642e:	bfbc      	itt	lt
 8006430:	232d      	movlt	r3, #45	; 0x2d
 8006432:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006436:	487f      	ldr	r0, [pc, #508]	; (8006634 <_printf_float+0x2e8>)
 8006438:	4b7f      	ldr	r3, [pc, #508]	; (8006638 <_printf_float+0x2ec>)
 800643a:	e7d1      	b.n	80063e0 <_printf_float+0x94>
 800643c:	6863      	ldr	r3, [r4, #4]
 800643e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006442:	9206      	str	r2, [sp, #24]
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	d13f      	bne.n	80064c8 <_printf_float+0x17c>
 8006448:	2306      	movs	r3, #6
 800644a:	6063      	str	r3, [r4, #4]
 800644c:	9b05      	ldr	r3, [sp, #20]
 800644e:	6861      	ldr	r1, [r4, #4]
 8006450:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006454:	2300      	movs	r3, #0
 8006456:	9303      	str	r3, [sp, #12]
 8006458:	ab0a      	add	r3, sp, #40	; 0x28
 800645a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800645e:	ab09      	add	r3, sp, #36	; 0x24
 8006460:	ec49 8b10 	vmov	d0, r8, r9
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	6022      	str	r2, [r4, #0]
 8006468:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800646c:	4628      	mov	r0, r5
 800646e:	f7ff fecd 	bl	800620c <__cvt>
 8006472:	9b06      	ldr	r3, [sp, #24]
 8006474:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006476:	2b47      	cmp	r3, #71	; 0x47
 8006478:	4680      	mov	r8, r0
 800647a:	d108      	bne.n	800648e <_printf_float+0x142>
 800647c:	1cc8      	adds	r0, r1, #3
 800647e:	db02      	blt.n	8006486 <_printf_float+0x13a>
 8006480:	6863      	ldr	r3, [r4, #4]
 8006482:	4299      	cmp	r1, r3
 8006484:	dd41      	ble.n	800650a <_printf_float+0x1be>
 8006486:	f1ab 0b02 	sub.w	fp, fp, #2
 800648a:	fa5f fb8b 	uxtb.w	fp, fp
 800648e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006492:	d820      	bhi.n	80064d6 <_printf_float+0x18a>
 8006494:	3901      	subs	r1, #1
 8006496:	465a      	mov	r2, fp
 8006498:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800649c:	9109      	str	r1, [sp, #36]	; 0x24
 800649e:	f7ff ff17 	bl	80062d0 <__exponent>
 80064a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064a4:	1813      	adds	r3, r2, r0
 80064a6:	2a01      	cmp	r2, #1
 80064a8:	4681      	mov	r9, r0
 80064aa:	6123      	str	r3, [r4, #16]
 80064ac:	dc02      	bgt.n	80064b4 <_printf_float+0x168>
 80064ae:	6822      	ldr	r2, [r4, #0]
 80064b0:	07d2      	lsls	r2, r2, #31
 80064b2:	d501      	bpl.n	80064b8 <_printf_float+0x16c>
 80064b4:	3301      	adds	r3, #1
 80064b6:	6123      	str	r3, [r4, #16]
 80064b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d09c      	beq.n	80063fa <_printf_float+0xae>
 80064c0:	232d      	movs	r3, #45	; 0x2d
 80064c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064c6:	e798      	b.n	80063fa <_printf_float+0xae>
 80064c8:	9a06      	ldr	r2, [sp, #24]
 80064ca:	2a47      	cmp	r2, #71	; 0x47
 80064cc:	d1be      	bne.n	800644c <_printf_float+0x100>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1bc      	bne.n	800644c <_printf_float+0x100>
 80064d2:	2301      	movs	r3, #1
 80064d4:	e7b9      	b.n	800644a <_printf_float+0xfe>
 80064d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80064da:	d118      	bne.n	800650e <_printf_float+0x1c2>
 80064dc:	2900      	cmp	r1, #0
 80064de:	6863      	ldr	r3, [r4, #4]
 80064e0:	dd0b      	ble.n	80064fa <_printf_float+0x1ae>
 80064e2:	6121      	str	r1, [r4, #16]
 80064e4:	b913      	cbnz	r3, 80064ec <_printf_float+0x1a0>
 80064e6:	6822      	ldr	r2, [r4, #0]
 80064e8:	07d0      	lsls	r0, r2, #31
 80064ea:	d502      	bpl.n	80064f2 <_printf_float+0x1a6>
 80064ec:	3301      	adds	r3, #1
 80064ee:	440b      	add	r3, r1
 80064f0:	6123      	str	r3, [r4, #16]
 80064f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80064f4:	f04f 0900 	mov.w	r9, #0
 80064f8:	e7de      	b.n	80064b8 <_printf_float+0x16c>
 80064fa:	b913      	cbnz	r3, 8006502 <_printf_float+0x1b6>
 80064fc:	6822      	ldr	r2, [r4, #0]
 80064fe:	07d2      	lsls	r2, r2, #31
 8006500:	d501      	bpl.n	8006506 <_printf_float+0x1ba>
 8006502:	3302      	adds	r3, #2
 8006504:	e7f4      	b.n	80064f0 <_printf_float+0x1a4>
 8006506:	2301      	movs	r3, #1
 8006508:	e7f2      	b.n	80064f0 <_printf_float+0x1a4>
 800650a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800650e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006510:	4299      	cmp	r1, r3
 8006512:	db05      	blt.n	8006520 <_printf_float+0x1d4>
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	6121      	str	r1, [r4, #16]
 8006518:	07d8      	lsls	r0, r3, #31
 800651a:	d5ea      	bpl.n	80064f2 <_printf_float+0x1a6>
 800651c:	1c4b      	adds	r3, r1, #1
 800651e:	e7e7      	b.n	80064f0 <_printf_float+0x1a4>
 8006520:	2900      	cmp	r1, #0
 8006522:	bfd4      	ite	le
 8006524:	f1c1 0202 	rsble	r2, r1, #2
 8006528:	2201      	movgt	r2, #1
 800652a:	4413      	add	r3, r2
 800652c:	e7e0      	b.n	80064f0 <_printf_float+0x1a4>
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	055a      	lsls	r2, r3, #21
 8006532:	d407      	bmi.n	8006544 <_printf_float+0x1f8>
 8006534:	6923      	ldr	r3, [r4, #16]
 8006536:	4642      	mov	r2, r8
 8006538:	4631      	mov	r1, r6
 800653a:	4628      	mov	r0, r5
 800653c:	47b8      	blx	r7
 800653e:	3001      	adds	r0, #1
 8006540:	d12c      	bne.n	800659c <_printf_float+0x250>
 8006542:	e764      	b.n	800640e <_printf_float+0xc2>
 8006544:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006548:	f240 80e0 	bls.w	800670c <_printf_float+0x3c0>
 800654c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006550:	2200      	movs	r2, #0
 8006552:	2300      	movs	r3, #0
 8006554:	f7fa fab8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006558:	2800      	cmp	r0, #0
 800655a:	d034      	beq.n	80065c6 <_printf_float+0x27a>
 800655c:	4a37      	ldr	r2, [pc, #220]	; (800663c <_printf_float+0x2f0>)
 800655e:	2301      	movs	r3, #1
 8006560:	4631      	mov	r1, r6
 8006562:	4628      	mov	r0, r5
 8006564:	47b8      	blx	r7
 8006566:	3001      	adds	r0, #1
 8006568:	f43f af51 	beq.w	800640e <_printf_float+0xc2>
 800656c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006570:	429a      	cmp	r2, r3
 8006572:	db02      	blt.n	800657a <_printf_float+0x22e>
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	07d8      	lsls	r0, r3, #31
 8006578:	d510      	bpl.n	800659c <_printf_float+0x250>
 800657a:	ee18 3a10 	vmov	r3, s16
 800657e:	4652      	mov	r2, sl
 8006580:	4631      	mov	r1, r6
 8006582:	4628      	mov	r0, r5
 8006584:	47b8      	blx	r7
 8006586:	3001      	adds	r0, #1
 8006588:	f43f af41 	beq.w	800640e <_printf_float+0xc2>
 800658c:	f04f 0800 	mov.w	r8, #0
 8006590:	f104 091a 	add.w	r9, r4, #26
 8006594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006596:	3b01      	subs	r3, #1
 8006598:	4543      	cmp	r3, r8
 800659a:	dc09      	bgt.n	80065b0 <_printf_float+0x264>
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	079b      	lsls	r3, r3, #30
 80065a0:	f100 8105 	bmi.w	80067ae <_printf_float+0x462>
 80065a4:	68e0      	ldr	r0, [r4, #12]
 80065a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065a8:	4298      	cmp	r0, r3
 80065aa:	bfb8      	it	lt
 80065ac:	4618      	movlt	r0, r3
 80065ae:	e730      	b.n	8006412 <_printf_float+0xc6>
 80065b0:	2301      	movs	r3, #1
 80065b2:	464a      	mov	r2, r9
 80065b4:	4631      	mov	r1, r6
 80065b6:	4628      	mov	r0, r5
 80065b8:	47b8      	blx	r7
 80065ba:	3001      	adds	r0, #1
 80065bc:	f43f af27 	beq.w	800640e <_printf_float+0xc2>
 80065c0:	f108 0801 	add.w	r8, r8, #1
 80065c4:	e7e6      	b.n	8006594 <_printf_float+0x248>
 80065c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	dc39      	bgt.n	8006640 <_printf_float+0x2f4>
 80065cc:	4a1b      	ldr	r2, [pc, #108]	; (800663c <_printf_float+0x2f0>)
 80065ce:	2301      	movs	r3, #1
 80065d0:	4631      	mov	r1, r6
 80065d2:	4628      	mov	r0, r5
 80065d4:	47b8      	blx	r7
 80065d6:	3001      	adds	r0, #1
 80065d8:	f43f af19 	beq.w	800640e <_printf_float+0xc2>
 80065dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065e0:	4313      	orrs	r3, r2
 80065e2:	d102      	bne.n	80065ea <_printf_float+0x29e>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	07d9      	lsls	r1, r3, #31
 80065e8:	d5d8      	bpl.n	800659c <_printf_float+0x250>
 80065ea:	ee18 3a10 	vmov	r3, s16
 80065ee:	4652      	mov	r2, sl
 80065f0:	4631      	mov	r1, r6
 80065f2:	4628      	mov	r0, r5
 80065f4:	47b8      	blx	r7
 80065f6:	3001      	adds	r0, #1
 80065f8:	f43f af09 	beq.w	800640e <_printf_float+0xc2>
 80065fc:	f04f 0900 	mov.w	r9, #0
 8006600:	f104 0a1a 	add.w	sl, r4, #26
 8006604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006606:	425b      	negs	r3, r3
 8006608:	454b      	cmp	r3, r9
 800660a:	dc01      	bgt.n	8006610 <_printf_float+0x2c4>
 800660c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800660e:	e792      	b.n	8006536 <_printf_float+0x1ea>
 8006610:	2301      	movs	r3, #1
 8006612:	4652      	mov	r2, sl
 8006614:	4631      	mov	r1, r6
 8006616:	4628      	mov	r0, r5
 8006618:	47b8      	blx	r7
 800661a:	3001      	adds	r0, #1
 800661c:	f43f aef7 	beq.w	800640e <_printf_float+0xc2>
 8006620:	f109 0901 	add.w	r9, r9, #1
 8006624:	e7ee      	b.n	8006604 <_printf_float+0x2b8>
 8006626:	bf00      	nop
 8006628:	7fefffff 	.word	0x7fefffff
 800662c:	08009508 	.word	0x08009508
 8006630:	0800950c 	.word	0x0800950c
 8006634:	08009514 	.word	0x08009514
 8006638:	08009510 	.word	0x08009510
 800663c:	08009518 	.word	0x08009518
 8006640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006642:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006644:	429a      	cmp	r2, r3
 8006646:	bfa8      	it	ge
 8006648:	461a      	movge	r2, r3
 800664a:	2a00      	cmp	r2, #0
 800664c:	4691      	mov	r9, r2
 800664e:	dc37      	bgt.n	80066c0 <_printf_float+0x374>
 8006650:	f04f 0b00 	mov.w	fp, #0
 8006654:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006658:	f104 021a 	add.w	r2, r4, #26
 800665c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800665e:	9305      	str	r3, [sp, #20]
 8006660:	eba3 0309 	sub.w	r3, r3, r9
 8006664:	455b      	cmp	r3, fp
 8006666:	dc33      	bgt.n	80066d0 <_printf_float+0x384>
 8006668:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800666c:	429a      	cmp	r2, r3
 800666e:	db3b      	blt.n	80066e8 <_printf_float+0x39c>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	07da      	lsls	r2, r3, #31
 8006674:	d438      	bmi.n	80066e8 <_printf_float+0x39c>
 8006676:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006678:	9b05      	ldr	r3, [sp, #20]
 800667a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	eba2 0901 	sub.w	r9, r2, r1
 8006682:	4599      	cmp	r9, r3
 8006684:	bfa8      	it	ge
 8006686:	4699      	movge	r9, r3
 8006688:	f1b9 0f00 	cmp.w	r9, #0
 800668c:	dc35      	bgt.n	80066fa <_printf_float+0x3ae>
 800668e:	f04f 0800 	mov.w	r8, #0
 8006692:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006696:	f104 0a1a 	add.w	sl, r4, #26
 800669a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800669e:	1a9b      	subs	r3, r3, r2
 80066a0:	eba3 0309 	sub.w	r3, r3, r9
 80066a4:	4543      	cmp	r3, r8
 80066a6:	f77f af79 	ble.w	800659c <_printf_float+0x250>
 80066aa:	2301      	movs	r3, #1
 80066ac:	4652      	mov	r2, sl
 80066ae:	4631      	mov	r1, r6
 80066b0:	4628      	mov	r0, r5
 80066b2:	47b8      	blx	r7
 80066b4:	3001      	adds	r0, #1
 80066b6:	f43f aeaa 	beq.w	800640e <_printf_float+0xc2>
 80066ba:	f108 0801 	add.w	r8, r8, #1
 80066be:	e7ec      	b.n	800669a <_printf_float+0x34e>
 80066c0:	4613      	mov	r3, r2
 80066c2:	4631      	mov	r1, r6
 80066c4:	4642      	mov	r2, r8
 80066c6:	4628      	mov	r0, r5
 80066c8:	47b8      	blx	r7
 80066ca:	3001      	adds	r0, #1
 80066cc:	d1c0      	bne.n	8006650 <_printf_float+0x304>
 80066ce:	e69e      	b.n	800640e <_printf_float+0xc2>
 80066d0:	2301      	movs	r3, #1
 80066d2:	4631      	mov	r1, r6
 80066d4:	4628      	mov	r0, r5
 80066d6:	9205      	str	r2, [sp, #20]
 80066d8:	47b8      	blx	r7
 80066da:	3001      	adds	r0, #1
 80066dc:	f43f ae97 	beq.w	800640e <_printf_float+0xc2>
 80066e0:	9a05      	ldr	r2, [sp, #20]
 80066e2:	f10b 0b01 	add.w	fp, fp, #1
 80066e6:	e7b9      	b.n	800665c <_printf_float+0x310>
 80066e8:	ee18 3a10 	vmov	r3, s16
 80066ec:	4652      	mov	r2, sl
 80066ee:	4631      	mov	r1, r6
 80066f0:	4628      	mov	r0, r5
 80066f2:	47b8      	blx	r7
 80066f4:	3001      	adds	r0, #1
 80066f6:	d1be      	bne.n	8006676 <_printf_float+0x32a>
 80066f8:	e689      	b.n	800640e <_printf_float+0xc2>
 80066fa:	9a05      	ldr	r2, [sp, #20]
 80066fc:	464b      	mov	r3, r9
 80066fe:	4442      	add	r2, r8
 8006700:	4631      	mov	r1, r6
 8006702:	4628      	mov	r0, r5
 8006704:	47b8      	blx	r7
 8006706:	3001      	adds	r0, #1
 8006708:	d1c1      	bne.n	800668e <_printf_float+0x342>
 800670a:	e680      	b.n	800640e <_printf_float+0xc2>
 800670c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800670e:	2a01      	cmp	r2, #1
 8006710:	dc01      	bgt.n	8006716 <_printf_float+0x3ca>
 8006712:	07db      	lsls	r3, r3, #31
 8006714:	d538      	bpl.n	8006788 <_printf_float+0x43c>
 8006716:	2301      	movs	r3, #1
 8006718:	4642      	mov	r2, r8
 800671a:	4631      	mov	r1, r6
 800671c:	4628      	mov	r0, r5
 800671e:	47b8      	blx	r7
 8006720:	3001      	adds	r0, #1
 8006722:	f43f ae74 	beq.w	800640e <_printf_float+0xc2>
 8006726:	ee18 3a10 	vmov	r3, s16
 800672a:	4652      	mov	r2, sl
 800672c:	4631      	mov	r1, r6
 800672e:	4628      	mov	r0, r5
 8006730:	47b8      	blx	r7
 8006732:	3001      	adds	r0, #1
 8006734:	f43f ae6b 	beq.w	800640e <_printf_float+0xc2>
 8006738:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800673c:	2200      	movs	r2, #0
 800673e:	2300      	movs	r3, #0
 8006740:	f7fa f9c2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006744:	b9d8      	cbnz	r0, 800677e <_printf_float+0x432>
 8006746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006748:	f108 0201 	add.w	r2, r8, #1
 800674c:	3b01      	subs	r3, #1
 800674e:	4631      	mov	r1, r6
 8006750:	4628      	mov	r0, r5
 8006752:	47b8      	blx	r7
 8006754:	3001      	adds	r0, #1
 8006756:	d10e      	bne.n	8006776 <_printf_float+0x42a>
 8006758:	e659      	b.n	800640e <_printf_float+0xc2>
 800675a:	2301      	movs	r3, #1
 800675c:	4652      	mov	r2, sl
 800675e:	4631      	mov	r1, r6
 8006760:	4628      	mov	r0, r5
 8006762:	47b8      	blx	r7
 8006764:	3001      	adds	r0, #1
 8006766:	f43f ae52 	beq.w	800640e <_printf_float+0xc2>
 800676a:	f108 0801 	add.w	r8, r8, #1
 800676e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006770:	3b01      	subs	r3, #1
 8006772:	4543      	cmp	r3, r8
 8006774:	dcf1      	bgt.n	800675a <_printf_float+0x40e>
 8006776:	464b      	mov	r3, r9
 8006778:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800677c:	e6dc      	b.n	8006538 <_printf_float+0x1ec>
 800677e:	f04f 0800 	mov.w	r8, #0
 8006782:	f104 0a1a 	add.w	sl, r4, #26
 8006786:	e7f2      	b.n	800676e <_printf_float+0x422>
 8006788:	2301      	movs	r3, #1
 800678a:	4642      	mov	r2, r8
 800678c:	e7df      	b.n	800674e <_printf_float+0x402>
 800678e:	2301      	movs	r3, #1
 8006790:	464a      	mov	r2, r9
 8006792:	4631      	mov	r1, r6
 8006794:	4628      	mov	r0, r5
 8006796:	47b8      	blx	r7
 8006798:	3001      	adds	r0, #1
 800679a:	f43f ae38 	beq.w	800640e <_printf_float+0xc2>
 800679e:	f108 0801 	add.w	r8, r8, #1
 80067a2:	68e3      	ldr	r3, [r4, #12]
 80067a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067a6:	1a5b      	subs	r3, r3, r1
 80067a8:	4543      	cmp	r3, r8
 80067aa:	dcf0      	bgt.n	800678e <_printf_float+0x442>
 80067ac:	e6fa      	b.n	80065a4 <_printf_float+0x258>
 80067ae:	f04f 0800 	mov.w	r8, #0
 80067b2:	f104 0919 	add.w	r9, r4, #25
 80067b6:	e7f4      	b.n	80067a2 <_printf_float+0x456>

080067b8 <_printf_common>:
 80067b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067bc:	4616      	mov	r6, r2
 80067be:	4699      	mov	r9, r3
 80067c0:	688a      	ldr	r2, [r1, #8]
 80067c2:	690b      	ldr	r3, [r1, #16]
 80067c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067c8:	4293      	cmp	r3, r2
 80067ca:	bfb8      	it	lt
 80067cc:	4613      	movlt	r3, r2
 80067ce:	6033      	str	r3, [r6, #0]
 80067d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067d4:	4607      	mov	r7, r0
 80067d6:	460c      	mov	r4, r1
 80067d8:	b10a      	cbz	r2, 80067de <_printf_common+0x26>
 80067da:	3301      	adds	r3, #1
 80067dc:	6033      	str	r3, [r6, #0]
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	0699      	lsls	r1, r3, #26
 80067e2:	bf42      	ittt	mi
 80067e4:	6833      	ldrmi	r3, [r6, #0]
 80067e6:	3302      	addmi	r3, #2
 80067e8:	6033      	strmi	r3, [r6, #0]
 80067ea:	6825      	ldr	r5, [r4, #0]
 80067ec:	f015 0506 	ands.w	r5, r5, #6
 80067f0:	d106      	bne.n	8006800 <_printf_common+0x48>
 80067f2:	f104 0a19 	add.w	sl, r4, #25
 80067f6:	68e3      	ldr	r3, [r4, #12]
 80067f8:	6832      	ldr	r2, [r6, #0]
 80067fa:	1a9b      	subs	r3, r3, r2
 80067fc:	42ab      	cmp	r3, r5
 80067fe:	dc26      	bgt.n	800684e <_printf_common+0x96>
 8006800:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006804:	1e13      	subs	r3, r2, #0
 8006806:	6822      	ldr	r2, [r4, #0]
 8006808:	bf18      	it	ne
 800680a:	2301      	movne	r3, #1
 800680c:	0692      	lsls	r2, r2, #26
 800680e:	d42b      	bmi.n	8006868 <_printf_common+0xb0>
 8006810:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006814:	4649      	mov	r1, r9
 8006816:	4638      	mov	r0, r7
 8006818:	47c0      	blx	r8
 800681a:	3001      	adds	r0, #1
 800681c:	d01e      	beq.n	800685c <_printf_common+0xa4>
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	68e5      	ldr	r5, [r4, #12]
 8006822:	6832      	ldr	r2, [r6, #0]
 8006824:	f003 0306 	and.w	r3, r3, #6
 8006828:	2b04      	cmp	r3, #4
 800682a:	bf08      	it	eq
 800682c:	1aad      	subeq	r5, r5, r2
 800682e:	68a3      	ldr	r3, [r4, #8]
 8006830:	6922      	ldr	r2, [r4, #16]
 8006832:	bf0c      	ite	eq
 8006834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006838:	2500      	movne	r5, #0
 800683a:	4293      	cmp	r3, r2
 800683c:	bfc4      	itt	gt
 800683e:	1a9b      	subgt	r3, r3, r2
 8006840:	18ed      	addgt	r5, r5, r3
 8006842:	2600      	movs	r6, #0
 8006844:	341a      	adds	r4, #26
 8006846:	42b5      	cmp	r5, r6
 8006848:	d11a      	bne.n	8006880 <_printf_common+0xc8>
 800684a:	2000      	movs	r0, #0
 800684c:	e008      	b.n	8006860 <_printf_common+0xa8>
 800684e:	2301      	movs	r3, #1
 8006850:	4652      	mov	r2, sl
 8006852:	4649      	mov	r1, r9
 8006854:	4638      	mov	r0, r7
 8006856:	47c0      	blx	r8
 8006858:	3001      	adds	r0, #1
 800685a:	d103      	bne.n	8006864 <_printf_common+0xac>
 800685c:	f04f 30ff 	mov.w	r0, #4294967295
 8006860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006864:	3501      	adds	r5, #1
 8006866:	e7c6      	b.n	80067f6 <_printf_common+0x3e>
 8006868:	18e1      	adds	r1, r4, r3
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	2030      	movs	r0, #48	; 0x30
 800686e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006872:	4422      	add	r2, r4
 8006874:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006878:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800687c:	3302      	adds	r3, #2
 800687e:	e7c7      	b.n	8006810 <_printf_common+0x58>
 8006880:	2301      	movs	r3, #1
 8006882:	4622      	mov	r2, r4
 8006884:	4649      	mov	r1, r9
 8006886:	4638      	mov	r0, r7
 8006888:	47c0      	blx	r8
 800688a:	3001      	adds	r0, #1
 800688c:	d0e6      	beq.n	800685c <_printf_common+0xa4>
 800688e:	3601      	adds	r6, #1
 8006890:	e7d9      	b.n	8006846 <_printf_common+0x8e>
	...

08006894 <_printf_i>:
 8006894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006898:	460c      	mov	r4, r1
 800689a:	4691      	mov	r9, r2
 800689c:	7e27      	ldrb	r7, [r4, #24]
 800689e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068a0:	2f78      	cmp	r7, #120	; 0x78
 80068a2:	4680      	mov	r8, r0
 80068a4:	469a      	mov	sl, r3
 80068a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068aa:	d807      	bhi.n	80068bc <_printf_i+0x28>
 80068ac:	2f62      	cmp	r7, #98	; 0x62
 80068ae:	d80a      	bhi.n	80068c6 <_printf_i+0x32>
 80068b0:	2f00      	cmp	r7, #0
 80068b2:	f000 80d8 	beq.w	8006a66 <_printf_i+0x1d2>
 80068b6:	2f58      	cmp	r7, #88	; 0x58
 80068b8:	f000 80a3 	beq.w	8006a02 <_printf_i+0x16e>
 80068bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068c4:	e03a      	b.n	800693c <_printf_i+0xa8>
 80068c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068ca:	2b15      	cmp	r3, #21
 80068cc:	d8f6      	bhi.n	80068bc <_printf_i+0x28>
 80068ce:	a001      	add	r0, pc, #4	; (adr r0, 80068d4 <_printf_i+0x40>)
 80068d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80068d4:	0800692d 	.word	0x0800692d
 80068d8:	08006941 	.word	0x08006941
 80068dc:	080068bd 	.word	0x080068bd
 80068e0:	080068bd 	.word	0x080068bd
 80068e4:	080068bd 	.word	0x080068bd
 80068e8:	080068bd 	.word	0x080068bd
 80068ec:	08006941 	.word	0x08006941
 80068f0:	080068bd 	.word	0x080068bd
 80068f4:	080068bd 	.word	0x080068bd
 80068f8:	080068bd 	.word	0x080068bd
 80068fc:	080068bd 	.word	0x080068bd
 8006900:	08006a4d 	.word	0x08006a4d
 8006904:	08006971 	.word	0x08006971
 8006908:	08006a2f 	.word	0x08006a2f
 800690c:	080068bd 	.word	0x080068bd
 8006910:	080068bd 	.word	0x080068bd
 8006914:	08006a6f 	.word	0x08006a6f
 8006918:	080068bd 	.word	0x080068bd
 800691c:	08006971 	.word	0x08006971
 8006920:	080068bd 	.word	0x080068bd
 8006924:	080068bd 	.word	0x080068bd
 8006928:	08006a37 	.word	0x08006a37
 800692c:	680b      	ldr	r3, [r1, #0]
 800692e:	1d1a      	adds	r2, r3, #4
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	600a      	str	r2, [r1, #0]
 8006934:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800693c:	2301      	movs	r3, #1
 800693e:	e0a3      	b.n	8006a88 <_printf_i+0x1f4>
 8006940:	6825      	ldr	r5, [r4, #0]
 8006942:	6808      	ldr	r0, [r1, #0]
 8006944:	062e      	lsls	r6, r5, #24
 8006946:	f100 0304 	add.w	r3, r0, #4
 800694a:	d50a      	bpl.n	8006962 <_printf_i+0xce>
 800694c:	6805      	ldr	r5, [r0, #0]
 800694e:	600b      	str	r3, [r1, #0]
 8006950:	2d00      	cmp	r5, #0
 8006952:	da03      	bge.n	800695c <_printf_i+0xc8>
 8006954:	232d      	movs	r3, #45	; 0x2d
 8006956:	426d      	negs	r5, r5
 8006958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800695c:	485e      	ldr	r0, [pc, #376]	; (8006ad8 <_printf_i+0x244>)
 800695e:	230a      	movs	r3, #10
 8006960:	e019      	b.n	8006996 <_printf_i+0x102>
 8006962:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006966:	6805      	ldr	r5, [r0, #0]
 8006968:	600b      	str	r3, [r1, #0]
 800696a:	bf18      	it	ne
 800696c:	b22d      	sxthne	r5, r5
 800696e:	e7ef      	b.n	8006950 <_printf_i+0xbc>
 8006970:	680b      	ldr	r3, [r1, #0]
 8006972:	6825      	ldr	r5, [r4, #0]
 8006974:	1d18      	adds	r0, r3, #4
 8006976:	6008      	str	r0, [r1, #0]
 8006978:	0628      	lsls	r0, r5, #24
 800697a:	d501      	bpl.n	8006980 <_printf_i+0xec>
 800697c:	681d      	ldr	r5, [r3, #0]
 800697e:	e002      	b.n	8006986 <_printf_i+0xf2>
 8006980:	0669      	lsls	r1, r5, #25
 8006982:	d5fb      	bpl.n	800697c <_printf_i+0xe8>
 8006984:	881d      	ldrh	r5, [r3, #0]
 8006986:	4854      	ldr	r0, [pc, #336]	; (8006ad8 <_printf_i+0x244>)
 8006988:	2f6f      	cmp	r7, #111	; 0x6f
 800698a:	bf0c      	ite	eq
 800698c:	2308      	moveq	r3, #8
 800698e:	230a      	movne	r3, #10
 8006990:	2100      	movs	r1, #0
 8006992:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006996:	6866      	ldr	r6, [r4, #4]
 8006998:	60a6      	str	r6, [r4, #8]
 800699a:	2e00      	cmp	r6, #0
 800699c:	bfa2      	ittt	ge
 800699e:	6821      	ldrge	r1, [r4, #0]
 80069a0:	f021 0104 	bicge.w	r1, r1, #4
 80069a4:	6021      	strge	r1, [r4, #0]
 80069a6:	b90d      	cbnz	r5, 80069ac <_printf_i+0x118>
 80069a8:	2e00      	cmp	r6, #0
 80069aa:	d04d      	beq.n	8006a48 <_printf_i+0x1b4>
 80069ac:	4616      	mov	r6, r2
 80069ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80069b2:	fb03 5711 	mls	r7, r3, r1, r5
 80069b6:	5dc7      	ldrb	r7, [r0, r7]
 80069b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069bc:	462f      	mov	r7, r5
 80069be:	42bb      	cmp	r3, r7
 80069c0:	460d      	mov	r5, r1
 80069c2:	d9f4      	bls.n	80069ae <_printf_i+0x11a>
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d10b      	bne.n	80069e0 <_printf_i+0x14c>
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	07df      	lsls	r7, r3, #31
 80069cc:	d508      	bpl.n	80069e0 <_printf_i+0x14c>
 80069ce:	6923      	ldr	r3, [r4, #16]
 80069d0:	6861      	ldr	r1, [r4, #4]
 80069d2:	4299      	cmp	r1, r3
 80069d4:	bfde      	ittt	le
 80069d6:	2330      	movle	r3, #48	; 0x30
 80069d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069e0:	1b92      	subs	r2, r2, r6
 80069e2:	6122      	str	r2, [r4, #16]
 80069e4:	f8cd a000 	str.w	sl, [sp]
 80069e8:	464b      	mov	r3, r9
 80069ea:	aa03      	add	r2, sp, #12
 80069ec:	4621      	mov	r1, r4
 80069ee:	4640      	mov	r0, r8
 80069f0:	f7ff fee2 	bl	80067b8 <_printf_common>
 80069f4:	3001      	adds	r0, #1
 80069f6:	d14c      	bne.n	8006a92 <_printf_i+0x1fe>
 80069f8:	f04f 30ff 	mov.w	r0, #4294967295
 80069fc:	b004      	add	sp, #16
 80069fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a02:	4835      	ldr	r0, [pc, #212]	; (8006ad8 <_printf_i+0x244>)
 8006a04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	680e      	ldr	r6, [r1, #0]
 8006a0c:	061f      	lsls	r7, r3, #24
 8006a0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a12:	600e      	str	r6, [r1, #0]
 8006a14:	d514      	bpl.n	8006a40 <_printf_i+0x1ac>
 8006a16:	07d9      	lsls	r1, r3, #31
 8006a18:	bf44      	itt	mi
 8006a1a:	f043 0320 	orrmi.w	r3, r3, #32
 8006a1e:	6023      	strmi	r3, [r4, #0]
 8006a20:	b91d      	cbnz	r5, 8006a2a <_printf_i+0x196>
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	f023 0320 	bic.w	r3, r3, #32
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	2310      	movs	r3, #16
 8006a2c:	e7b0      	b.n	8006990 <_printf_i+0xfc>
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	f043 0320 	orr.w	r3, r3, #32
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	2378      	movs	r3, #120	; 0x78
 8006a38:	4828      	ldr	r0, [pc, #160]	; (8006adc <_printf_i+0x248>)
 8006a3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a3e:	e7e3      	b.n	8006a08 <_printf_i+0x174>
 8006a40:	065e      	lsls	r6, r3, #25
 8006a42:	bf48      	it	mi
 8006a44:	b2ad      	uxthmi	r5, r5
 8006a46:	e7e6      	b.n	8006a16 <_printf_i+0x182>
 8006a48:	4616      	mov	r6, r2
 8006a4a:	e7bb      	b.n	80069c4 <_printf_i+0x130>
 8006a4c:	680b      	ldr	r3, [r1, #0]
 8006a4e:	6826      	ldr	r6, [r4, #0]
 8006a50:	6960      	ldr	r0, [r4, #20]
 8006a52:	1d1d      	adds	r5, r3, #4
 8006a54:	600d      	str	r5, [r1, #0]
 8006a56:	0635      	lsls	r5, r6, #24
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	d501      	bpl.n	8006a60 <_printf_i+0x1cc>
 8006a5c:	6018      	str	r0, [r3, #0]
 8006a5e:	e002      	b.n	8006a66 <_printf_i+0x1d2>
 8006a60:	0671      	lsls	r1, r6, #25
 8006a62:	d5fb      	bpl.n	8006a5c <_printf_i+0x1c8>
 8006a64:	8018      	strh	r0, [r3, #0]
 8006a66:	2300      	movs	r3, #0
 8006a68:	6123      	str	r3, [r4, #16]
 8006a6a:	4616      	mov	r6, r2
 8006a6c:	e7ba      	b.n	80069e4 <_printf_i+0x150>
 8006a6e:	680b      	ldr	r3, [r1, #0]
 8006a70:	1d1a      	adds	r2, r3, #4
 8006a72:	600a      	str	r2, [r1, #0]
 8006a74:	681e      	ldr	r6, [r3, #0]
 8006a76:	6862      	ldr	r2, [r4, #4]
 8006a78:	2100      	movs	r1, #0
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	f7f9 fbb0 	bl	80001e0 <memchr>
 8006a80:	b108      	cbz	r0, 8006a86 <_printf_i+0x1f2>
 8006a82:	1b80      	subs	r0, r0, r6
 8006a84:	6060      	str	r0, [r4, #4]
 8006a86:	6863      	ldr	r3, [r4, #4]
 8006a88:	6123      	str	r3, [r4, #16]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a90:	e7a8      	b.n	80069e4 <_printf_i+0x150>
 8006a92:	6923      	ldr	r3, [r4, #16]
 8006a94:	4632      	mov	r2, r6
 8006a96:	4649      	mov	r1, r9
 8006a98:	4640      	mov	r0, r8
 8006a9a:	47d0      	blx	sl
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	d0ab      	beq.n	80069f8 <_printf_i+0x164>
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	079b      	lsls	r3, r3, #30
 8006aa4:	d413      	bmi.n	8006ace <_printf_i+0x23a>
 8006aa6:	68e0      	ldr	r0, [r4, #12]
 8006aa8:	9b03      	ldr	r3, [sp, #12]
 8006aaa:	4298      	cmp	r0, r3
 8006aac:	bfb8      	it	lt
 8006aae:	4618      	movlt	r0, r3
 8006ab0:	e7a4      	b.n	80069fc <_printf_i+0x168>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	4632      	mov	r2, r6
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	4640      	mov	r0, r8
 8006aba:	47d0      	blx	sl
 8006abc:	3001      	adds	r0, #1
 8006abe:	d09b      	beq.n	80069f8 <_printf_i+0x164>
 8006ac0:	3501      	adds	r5, #1
 8006ac2:	68e3      	ldr	r3, [r4, #12]
 8006ac4:	9903      	ldr	r1, [sp, #12]
 8006ac6:	1a5b      	subs	r3, r3, r1
 8006ac8:	42ab      	cmp	r3, r5
 8006aca:	dcf2      	bgt.n	8006ab2 <_printf_i+0x21e>
 8006acc:	e7eb      	b.n	8006aa6 <_printf_i+0x212>
 8006ace:	2500      	movs	r5, #0
 8006ad0:	f104 0619 	add.w	r6, r4, #25
 8006ad4:	e7f5      	b.n	8006ac2 <_printf_i+0x22e>
 8006ad6:	bf00      	nop
 8006ad8:	0800951a 	.word	0x0800951a
 8006adc:	0800952b 	.word	0x0800952b

08006ae0 <siprintf>:
 8006ae0:	b40e      	push	{r1, r2, r3}
 8006ae2:	b500      	push	{lr}
 8006ae4:	b09c      	sub	sp, #112	; 0x70
 8006ae6:	ab1d      	add	r3, sp, #116	; 0x74
 8006ae8:	9002      	str	r0, [sp, #8]
 8006aea:	9006      	str	r0, [sp, #24]
 8006aec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006af0:	4809      	ldr	r0, [pc, #36]	; (8006b18 <siprintf+0x38>)
 8006af2:	9107      	str	r1, [sp, #28]
 8006af4:	9104      	str	r1, [sp, #16]
 8006af6:	4909      	ldr	r1, [pc, #36]	; (8006b1c <siprintf+0x3c>)
 8006af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006afc:	9105      	str	r1, [sp, #20]
 8006afe:	6800      	ldr	r0, [r0, #0]
 8006b00:	9301      	str	r3, [sp, #4]
 8006b02:	a902      	add	r1, sp, #8
 8006b04:	f001 fc4c 	bl	80083a0 <_svfiprintf_r>
 8006b08:	9b02      	ldr	r3, [sp, #8]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	701a      	strb	r2, [r3, #0]
 8006b0e:	b01c      	add	sp, #112	; 0x70
 8006b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b14:	b003      	add	sp, #12
 8006b16:	4770      	bx	lr
 8006b18:	20000010 	.word	0x20000010
 8006b1c:	ffff0208 	.word	0xffff0208

08006b20 <strtok>:
 8006b20:	4b16      	ldr	r3, [pc, #88]	; (8006b7c <strtok+0x5c>)
 8006b22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b24:	681e      	ldr	r6, [r3, #0]
 8006b26:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006b28:	4605      	mov	r5, r0
 8006b2a:	b9fc      	cbnz	r4, 8006b6c <strtok+0x4c>
 8006b2c:	2050      	movs	r0, #80	; 0x50
 8006b2e:	9101      	str	r1, [sp, #4]
 8006b30:	f000 ff8c 	bl	8007a4c <malloc>
 8006b34:	9901      	ldr	r1, [sp, #4]
 8006b36:	65b0      	str	r0, [r6, #88]	; 0x58
 8006b38:	4602      	mov	r2, r0
 8006b3a:	b920      	cbnz	r0, 8006b46 <strtok+0x26>
 8006b3c:	4b10      	ldr	r3, [pc, #64]	; (8006b80 <strtok+0x60>)
 8006b3e:	4811      	ldr	r0, [pc, #68]	; (8006b84 <strtok+0x64>)
 8006b40:	2157      	movs	r1, #87	; 0x57
 8006b42:	f000 f8d7 	bl	8006cf4 <__assert_func>
 8006b46:	e9c0 4400 	strd	r4, r4, [r0]
 8006b4a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006b4e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006b52:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006b56:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006b5a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006b5e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006b62:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006b66:	6184      	str	r4, [r0, #24]
 8006b68:	7704      	strb	r4, [r0, #28]
 8006b6a:	6244      	str	r4, [r0, #36]	; 0x24
 8006b6c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006b6e:	2301      	movs	r3, #1
 8006b70:	4628      	mov	r0, r5
 8006b72:	b002      	add	sp, #8
 8006b74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b78:	f000 b806 	b.w	8006b88 <__strtok_r>
 8006b7c:	20000010 	.word	0x20000010
 8006b80:	0800953c 	.word	0x0800953c
 8006b84:	08009553 	.word	0x08009553

08006b88 <__strtok_r>:
 8006b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b8a:	b908      	cbnz	r0, 8006b90 <__strtok_r+0x8>
 8006b8c:	6810      	ldr	r0, [r2, #0]
 8006b8e:	b188      	cbz	r0, 8006bb4 <__strtok_r+0x2c>
 8006b90:	4604      	mov	r4, r0
 8006b92:	4620      	mov	r0, r4
 8006b94:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006b98:	460f      	mov	r7, r1
 8006b9a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006b9e:	b91e      	cbnz	r6, 8006ba8 <__strtok_r+0x20>
 8006ba0:	b965      	cbnz	r5, 8006bbc <__strtok_r+0x34>
 8006ba2:	6015      	str	r5, [r2, #0]
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	e005      	b.n	8006bb4 <__strtok_r+0x2c>
 8006ba8:	42b5      	cmp	r5, r6
 8006baa:	d1f6      	bne.n	8006b9a <__strtok_r+0x12>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1f0      	bne.n	8006b92 <__strtok_r+0xa>
 8006bb0:	6014      	str	r4, [r2, #0]
 8006bb2:	7003      	strb	r3, [r0, #0]
 8006bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bb6:	461c      	mov	r4, r3
 8006bb8:	e00c      	b.n	8006bd4 <__strtok_r+0x4c>
 8006bba:	b915      	cbnz	r5, 8006bc2 <__strtok_r+0x3a>
 8006bbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006bc0:	460e      	mov	r6, r1
 8006bc2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006bc6:	42ab      	cmp	r3, r5
 8006bc8:	d1f7      	bne.n	8006bba <__strtok_r+0x32>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0f3      	beq.n	8006bb6 <__strtok_r+0x2e>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006bd4:	6014      	str	r4, [r2, #0]
 8006bd6:	e7ed      	b.n	8006bb4 <__strtok_r+0x2c>

08006bd8 <_strtol_l.isra.0>:
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bde:	d001      	beq.n	8006be4 <_strtol_l.isra.0+0xc>
 8006be0:	2b24      	cmp	r3, #36	; 0x24
 8006be2:	d906      	bls.n	8006bf2 <_strtol_l.isra.0+0x1a>
 8006be4:	f7ff fae0 	bl	80061a8 <__errno>
 8006be8:	2316      	movs	r3, #22
 8006bea:	6003      	str	r3, [r0, #0]
 8006bec:	2000      	movs	r0, #0
 8006bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf2:	4f3a      	ldr	r7, [pc, #232]	; (8006cdc <_strtol_l.isra.0+0x104>)
 8006bf4:	468e      	mov	lr, r1
 8006bf6:	4676      	mov	r6, lr
 8006bf8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006bfc:	5de5      	ldrb	r5, [r4, r7]
 8006bfe:	f015 0508 	ands.w	r5, r5, #8
 8006c02:	d1f8      	bne.n	8006bf6 <_strtol_l.isra.0+0x1e>
 8006c04:	2c2d      	cmp	r4, #45	; 0x2d
 8006c06:	d134      	bne.n	8006c72 <_strtol_l.isra.0+0x9a>
 8006c08:	f89e 4000 	ldrb.w	r4, [lr]
 8006c0c:	f04f 0801 	mov.w	r8, #1
 8006c10:	f106 0e02 	add.w	lr, r6, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d05c      	beq.n	8006cd2 <_strtol_l.isra.0+0xfa>
 8006c18:	2b10      	cmp	r3, #16
 8006c1a:	d10c      	bne.n	8006c36 <_strtol_l.isra.0+0x5e>
 8006c1c:	2c30      	cmp	r4, #48	; 0x30
 8006c1e:	d10a      	bne.n	8006c36 <_strtol_l.isra.0+0x5e>
 8006c20:	f89e 4000 	ldrb.w	r4, [lr]
 8006c24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006c28:	2c58      	cmp	r4, #88	; 0x58
 8006c2a:	d14d      	bne.n	8006cc8 <_strtol_l.isra.0+0xf0>
 8006c2c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006c30:	2310      	movs	r3, #16
 8006c32:	f10e 0e02 	add.w	lr, lr, #2
 8006c36:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006c3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006c3e:	2600      	movs	r6, #0
 8006c40:	fbbc f9f3 	udiv	r9, ip, r3
 8006c44:	4635      	mov	r5, r6
 8006c46:	fb03 ca19 	mls	sl, r3, r9, ip
 8006c4a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006c4e:	2f09      	cmp	r7, #9
 8006c50:	d818      	bhi.n	8006c84 <_strtol_l.isra.0+0xac>
 8006c52:	463c      	mov	r4, r7
 8006c54:	42a3      	cmp	r3, r4
 8006c56:	dd24      	ble.n	8006ca2 <_strtol_l.isra.0+0xca>
 8006c58:	2e00      	cmp	r6, #0
 8006c5a:	db1f      	blt.n	8006c9c <_strtol_l.isra.0+0xc4>
 8006c5c:	45a9      	cmp	r9, r5
 8006c5e:	d31d      	bcc.n	8006c9c <_strtol_l.isra.0+0xc4>
 8006c60:	d101      	bne.n	8006c66 <_strtol_l.isra.0+0x8e>
 8006c62:	45a2      	cmp	sl, r4
 8006c64:	db1a      	blt.n	8006c9c <_strtol_l.isra.0+0xc4>
 8006c66:	fb05 4503 	mla	r5, r5, r3, r4
 8006c6a:	2601      	movs	r6, #1
 8006c6c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006c70:	e7eb      	b.n	8006c4a <_strtol_l.isra.0+0x72>
 8006c72:	2c2b      	cmp	r4, #43	; 0x2b
 8006c74:	bf08      	it	eq
 8006c76:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006c7a:	46a8      	mov	r8, r5
 8006c7c:	bf08      	it	eq
 8006c7e:	f106 0e02 	addeq.w	lr, r6, #2
 8006c82:	e7c7      	b.n	8006c14 <_strtol_l.isra.0+0x3c>
 8006c84:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006c88:	2f19      	cmp	r7, #25
 8006c8a:	d801      	bhi.n	8006c90 <_strtol_l.isra.0+0xb8>
 8006c8c:	3c37      	subs	r4, #55	; 0x37
 8006c8e:	e7e1      	b.n	8006c54 <_strtol_l.isra.0+0x7c>
 8006c90:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006c94:	2f19      	cmp	r7, #25
 8006c96:	d804      	bhi.n	8006ca2 <_strtol_l.isra.0+0xca>
 8006c98:	3c57      	subs	r4, #87	; 0x57
 8006c9a:	e7db      	b.n	8006c54 <_strtol_l.isra.0+0x7c>
 8006c9c:	f04f 36ff 	mov.w	r6, #4294967295
 8006ca0:	e7e4      	b.n	8006c6c <_strtol_l.isra.0+0x94>
 8006ca2:	2e00      	cmp	r6, #0
 8006ca4:	da05      	bge.n	8006cb2 <_strtol_l.isra.0+0xda>
 8006ca6:	2322      	movs	r3, #34	; 0x22
 8006ca8:	6003      	str	r3, [r0, #0]
 8006caa:	4665      	mov	r5, ip
 8006cac:	b942      	cbnz	r2, 8006cc0 <_strtol_l.isra.0+0xe8>
 8006cae:	4628      	mov	r0, r5
 8006cb0:	e79d      	b.n	8006bee <_strtol_l.isra.0+0x16>
 8006cb2:	f1b8 0f00 	cmp.w	r8, #0
 8006cb6:	d000      	beq.n	8006cba <_strtol_l.isra.0+0xe2>
 8006cb8:	426d      	negs	r5, r5
 8006cba:	2a00      	cmp	r2, #0
 8006cbc:	d0f7      	beq.n	8006cae <_strtol_l.isra.0+0xd6>
 8006cbe:	b10e      	cbz	r6, 8006cc4 <_strtol_l.isra.0+0xec>
 8006cc0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006cc4:	6011      	str	r1, [r2, #0]
 8006cc6:	e7f2      	b.n	8006cae <_strtol_l.isra.0+0xd6>
 8006cc8:	2430      	movs	r4, #48	; 0x30
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1b3      	bne.n	8006c36 <_strtol_l.isra.0+0x5e>
 8006cce:	2308      	movs	r3, #8
 8006cd0:	e7b1      	b.n	8006c36 <_strtol_l.isra.0+0x5e>
 8006cd2:	2c30      	cmp	r4, #48	; 0x30
 8006cd4:	d0a4      	beq.n	8006c20 <_strtol_l.isra.0+0x48>
 8006cd6:	230a      	movs	r3, #10
 8006cd8:	e7ad      	b.n	8006c36 <_strtol_l.isra.0+0x5e>
 8006cda:	bf00      	nop
 8006cdc:	080095f1 	.word	0x080095f1

08006ce0 <strtol>:
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	460a      	mov	r2, r1
 8006ce4:	4601      	mov	r1, r0
 8006ce6:	4802      	ldr	r0, [pc, #8]	; (8006cf0 <strtol+0x10>)
 8006ce8:	6800      	ldr	r0, [r0, #0]
 8006cea:	f7ff bf75 	b.w	8006bd8 <_strtol_l.isra.0>
 8006cee:	bf00      	nop
 8006cf0:	20000010 	.word	0x20000010

08006cf4 <__assert_func>:
 8006cf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cf6:	4614      	mov	r4, r2
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	4b09      	ldr	r3, [pc, #36]	; (8006d20 <__assert_func+0x2c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4605      	mov	r5, r0
 8006d00:	68d8      	ldr	r0, [r3, #12]
 8006d02:	b14c      	cbz	r4, 8006d18 <__assert_func+0x24>
 8006d04:	4b07      	ldr	r3, [pc, #28]	; (8006d24 <__assert_func+0x30>)
 8006d06:	9100      	str	r1, [sp, #0]
 8006d08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d0c:	4906      	ldr	r1, [pc, #24]	; (8006d28 <__assert_func+0x34>)
 8006d0e:	462b      	mov	r3, r5
 8006d10:	f000 fe86 	bl	8007a20 <fiprintf>
 8006d14:	f001 fe6e 	bl	80089f4 <abort>
 8006d18:	4b04      	ldr	r3, [pc, #16]	; (8006d2c <__assert_func+0x38>)
 8006d1a:	461c      	mov	r4, r3
 8006d1c:	e7f3      	b.n	8006d06 <__assert_func+0x12>
 8006d1e:	bf00      	nop
 8006d20:	20000010 	.word	0x20000010
 8006d24:	080095b4 	.word	0x080095b4
 8006d28:	080095c1 	.word	0x080095c1
 8006d2c:	080095ef 	.word	0x080095ef

08006d30 <quorem>:
 8006d30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d34:	6903      	ldr	r3, [r0, #16]
 8006d36:	690c      	ldr	r4, [r1, #16]
 8006d38:	42a3      	cmp	r3, r4
 8006d3a:	4607      	mov	r7, r0
 8006d3c:	f2c0 8081 	blt.w	8006e42 <quorem+0x112>
 8006d40:	3c01      	subs	r4, #1
 8006d42:	f101 0814 	add.w	r8, r1, #20
 8006d46:	f100 0514 	add.w	r5, r0, #20
 8006d4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d4e:	9301      	str	r3, [sp, #4]
 8006d50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d64:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d68:	d331      	bcc.n	8006dce <quorem+0x9e>
 8006d6a:	f04f 0e00 	mov.w	lr, #0
 8006d6e:	4640      	mov	r0, r8
 8006d70:	46ac      	mov	ip, r5
 8006d72:	46f2      	mov	sl, lr
 8006d74:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d78:	b293      	uxth	r3, r2
 8006d7a:	fb06 e303 	mla	r3, r6, r3, lr
 8006d7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	ebaa 0303 	sub.w	r3, sl, r3
 8006d88:	0c12      	lsrs	r2, r2, #16
 8006d8a:	f8dc a000 	ldr.w	sl, [ip]
 8006d8e:	fb06 e202 	mla	r2, r6, r2, lr
 8006d92:	fa13 f38a 	uxtah	r3, r3, sl
 8006d96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d9a:	fa1f fa82 	uxth.w	sl, r2
 8006d9e:	f8dc 2000 	ldr.w	r2, [ip]
 8006da2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006da6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006db0:	4581      	cmp	r9, r0
 8006db2:	f84c 3b04 	str.w	r3, [ip], #4
 8006db6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006dba:	d2db      	bcs.n	8006d74 <quorem+0x44>
 8006dbc:	f855 300b 	ldr.w	r3, [r5, fp]
 8006dc0:	b92b      	cbnz	r3, 8006dce <quorem+0x9e>
 8006dc2:	9b01      	ldr	r3, [sp, #4]
 8006dc4:	3b04      	subs	r3, #4
 8006dc6:	429d      	cmp	r5, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	d32e      	bcc.n	8006e2a <quorem+0xfa>
 8006dcc:	613c      	str	r4, [r7, #16]
 8006dce:	4638      	mov	r0, r7
 8006dd0:	f001 f8d0 	bl	8007f74 <__mcmp>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	db24      	blt.n	8006e22 <quorem+0xf2>
 8006dd8:	3601      	adds	r6, #1
 8006dda:	4628      	mov	r0, r5
 8006ddc:	f04f 0c00 	mov.w	ip, #0
 8006de0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006de4:	f8d0 e000 	ldr.w	lr, [r0]
 8006de8:	b293      	uxth	r3, r2
 8006dea:	ebac 0303 	sub.w	r3, ip, r3
 8006dee:	0c12      	lsrs	r2, r2, #16
 8006df0:	fa13 f38e 	uxtah	r3, r3, lr
 8006df4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006df8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e02:	45c1      	cmp	r9, r8
 8006e04:	f840 3b04 	str.w	r3, [r0], #4
 8006e08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e0c:	d2e8      	bcs.n	8006de0 <quorem+0xb0>
 8006e0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e16:	b922      	cbnz	r2, 8006e22 <quorem+0xf2>
 8006e18:	3b04      	subs	r3, #4
 8006e1a:	429d      	cmp	r5, r3
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	d30a      	bcc.n	8006e36 <quorem+0x106>
 8006e20:	613c      	str	r4, [r7, #16]
 8006e22:	4630      	mov	r0, r6
 8006e24:	b003      	add	sp, #12
 8006e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e2a:	6812      	ldr	r2, [r2, #0]
 8006e2c:	3b04      	subs	r3, #4
 8006e2e:	2a00      	cmp	r2, #0
 8006e30:	d1cc      	bne.n	8006dcc <quorem+0x9c>
 8006e32:	3c01      	subs	r4, #1
 8006e34:	e7c7      	b.n	8006dc6 <quorem+0x96>
 8006e36:	6812      	ldr	r2, [r2, #0]
 8006e38:	3b04      	subs	r3, #4
 8006e3a:	2a00      	cmp	r2, #0
 8006e3c:	d1f0      	bne.n	8006e20 <quorem+0xf0>
 8006e3e:	3c01      	subs	r4, #1
 8006e40:	e7eb      	b.n	8006e1a <quorem+0xea>
 8006e42:	2000      	movs	r0, #0
 8006e44:	e7ee      	b.n	8006e24 <quorem+0xf4>
	...

08006e48 <_dtoa_r>:
 8006e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	ed2d 8b02 	vpush	{d8}
 8006e50:	ec57 6b10 	vmov	r6, r7, d0
 8006e54:	b095      	sub	sp, #84	; 0x54
 8006e56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006e5c:	9105      	str	r1, [sp, #20]
 8006e5e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006e62:	4604      	mov	r4, r0
 8006e64:	9209      	str	r2, [sp, #36]	; 0x24
 8006e66:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e68:	b975      	cbnz	r5, 8006e88 <_dtoa_r+0x40>
 8006e6a:	2010      	movs	r0, #16
 8006e6c:	f000 fdee 	bl	8007a4c <malloc>
 8006e70:	4602      	mov	r2, r0
 8006e72:	6260      	str	r0, [r4, #36]	; 0x24
 8006e74:	b920      	cbnz	r0, 8006e80 <_dtoa_r+0x38>
 8006e76:	4bb2      	ldr	r3, [pc, #712]	; (8007140 <_dtoa_r+0x2f8>)
 8006e78:	21ea      	movs	r1, #234	; 0xea
 8006e7a:	48b2      	ldr	r0, [pc, #712]	; (8007144 <_dtoa_r+0x2fc>)
 8006e7c:	f7ff ff3a 	bl	8006cf4 <__assert_func>
 8006e80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006e84:	6005      	str	r5, [r0, #0]
 8006e86:	60c5      	str	r5, [r0, #12]
 8006e88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e8a:	6819      	ldr	r1, [r3, #0]
 8006e8c:	b151      	cbz	r1, 8006ea4 <_dtoa_r+0x5c>
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	604a      	str	r2, [r1, #4]
 8006e92:	2301      	movs	r3, #1
 8006e94:	4093      	lsls	r3, r2
 8006e96:	608b      	str	r3, [r1, #8]
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f000 fe2d 	bl	8007af8 <_Bfree>
 8006e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	1e3b      	subs	r3, r7, #0
 8006ea6:	bfb9      	ittee	lt
 8006ea8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006eac:	9303      	strlt	r3, [sp, #12]
 8006eae:	2300      	movge	r3, #0
 8006eb0:	f8c8 3000 	strge.w	r3, [r8]
 8006eb4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006eb8:	4ba3      	ldr	r3, [pc, #652]	; (8007148 <_dtoa_r+0x300>)
 8006eba:	bfbc      	itt	lt
 8006ebc:	2201      	movlt	r2, #1
 8006ebe:	f8c8 2000 	strlt.w	r2, [r8]
 8006ec2:	ea33 0309 	bics.w	r3, r3, r9
 8006ec6:	d11b      	bne.n	8006f00 <_dtoa_r+0xb8>
 8006ec8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006eca:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ed4:	4333      	orrs	r3, r6
 8006ed6:	f000 857a 	beq.w	80079ce <_dtoa_r+0xb86>
 8006eda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006edc:	b963      	cbnz	r3, 8006ef8 <_dtoa_r+0xb0>
 8006ede:	4b9b      	ldr	r3, [pc, #620]	; (800714c <_dtoa_r+0x304>)
 8006ee0:	e024      	b.n	8006f2c <_dtoa_r+0xe4>
 8006ee2:	4b9b      	ldr	r3, [pc, #620]	; (8007150 <_dtoa_r+0x308>)
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	3308      	adds	r3, #8
 8006ee8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	9800      	ldr	r0, [sp, #0]
 8006eee:	b015      	add	sp, #84	; 0x54
 8006ef0:	ecbd 8b02 	vpop	{d8}
 8006ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef8:	4b94      	ldr	r3, [pc, #592]	; (800714c <_dtoa_r+0x304>)
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	3303      	adds	r3, #3
 8006efe:	e7f3      	b.n	8006ee8 <_dtoa_r+0xa0>
 8006f00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f04:	2200      	movs	r2, #0
 8006f06:	ec51 0b17 	vmov	r0, r1, d7
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006f10:	f7f9 fdda 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f14:	4680      	mov	r8, r0
 8006f16:	b158      	cbz	r0, 8006f30 <_dtoa_r+0xe8>
 8006f18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 8551 	beq.w	80079c8 <_dtoa_r+0xb80>
 8006f26:	488b      	ldr	r0, [pc, #556]	; (8007154 <_dtoa_r+0x30c>)
 8006f28:	6018      	str	r0, [r3, #0]
 8006f2a:	1e43      	subs	r3, r0, #1
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	e7dd      	b.n	8006eec <_dtoa_r+0xa4>
 8006f30:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006f34:	aa12      	add	r2, sp, #72	; 0x48
 8006f36:	a913      	add	r1, sp, #76	; 0x4c
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f001 f8bf 	bl	80080bc <__d2b>
 8006f3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f42:	4683      	mov	fp, r0
 8006f44:	2d00      	cmp	r5, #0
 8006f46:	d07c      	beq.n	8007042 <_dtoa_r+0x1fa>
 8006f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f4a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006f4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f52:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006f56:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006f5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006f5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006f62:	4b7d      	ldr	r3, [pc, #500]	; (8007158 <_dtoa_r+0x310>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	4630      	mov	r0, r6
 8006f68:	4639      	mov	r1, r7
 8006f6a:	f7f9 f98d 	bl	8000288 <__aeabi_dsub>
 8006f6e:	a36e      	add	r3, pc, #440	; (adr r3, 8007128 <_dtoa_r+0x2e0>)
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	f7f9 fb40 	bl	80005f8 <__aeabi_dmul>
 8006f78:	a36d      	add	r3, pc, #436	; (adr r3, 8007130 <_dtoa_r+0x2e8>)
 8006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7e:	f7f9 f985 	bl	800028c <__adddf3>
 8006f82:	4606      	mov	r6, r0
 8006f84:	4628      	mov	r0, r5
 8006f86:	460f      	mov	r7, r1
 8006f88:	f7f9 facc 	bl	8000524 <__aeabi_i2d>
 8006f8c:	a36a      	add	r3, pc, #424	; (adr r3, 8007138 <_dtoa_r+0x2f0>)
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	f7f9 fb31 	bl	80005f8 <__aeabi_dmul>
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	4639      	mov	r1, r7
 8006f9e:	f7f9 f975 	bl	800028c <__adddf3>
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	460f      	mov	r7, r1
 8006fa6:	f7f9 fdd7 	bl	8000b58 <__aeabi_d2iz>
 8006faa:	2200      	movs	r2, #0
 8006fac:	4682      	mov	sl, r0
 8006fae:	2300      	movs	r3, #0
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	f7f9 fd92 	bl	8000adc <__aeabi_dcmplt>
 8006fb8:	b148      	cbz	r0, 8006fce <_dtoa_r+0x186>
 8006fba:	4650      	mov	r0, sl
 8006fbc:	f7f9 fab2 	bl	8000524 <__aeabi_i2d>
 8006fc0:	4632      	mov	r2, r6
 8006fc2:	463b      	mov	r3, r7
 8006fc4:	f7f9 fd80 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fc8:	b908      	cbnz	r0, 8006fce <_dtoa_r+0x186>
 8006fca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fce:	f1ba 0f16 	cmp.w	sl, #22
 8006fd2:	d854      	bhi.n	800707e <_dtoa_r+0x236>
 8006fd4:	4b61      	ldr	r3, [pc, #388]	; (800715c <_dtoa_r+0x314>)
 8006fd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006fe2:	f7f9 fd7b 	bl	8000adc <__aeabi_dcmplt>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d04b      	beq.n	8007082 <_dtoa_r+0x23a>
 8006fea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fee:	2300      	movs	r3, #0
 8006ff0:	930e      	str	r3, [sp, #56]	; 0x38
 8006ff2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ff4:	1b5d      	subs	r5, r3, r5
 8006ff6:	1e6b      	subs	r3, r5, #1
 8006ff8:	9304      	str	r3, [sp, #16]
 8006ffa:	bf43      	ittte	mi
 8006ffc:	2300      	movmi	r3, #0
 8006ffe:	f1c5 0801 	rsbmi	r8, r5, #1
 8007002:	9304      	strmi	r3, [sp, #16]
 8007004:	f04f 0800 	movpl.w	r8, #0
 8007008:	f1ba 0f00 	cmp.w	sl, #0
 800700c:	db3b      	blt.n	8007086 <_dtoa_r+0x23e>
 800700e:	9b04      	ldr	r3, [sp, #16]
 8007010:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007014:	4453      	add	r3, sl
 8007016:	9304      	str	r3, [sp, #16]
 8007018:	2300      	movs	r3, #0
 800701a:	9306      	str	r3, [sp, #24]
 800701c:	9b05      	ldr	r3, [sp, #20]
 800701e:	2b09      	cmp	r3, #9
 8007020:	d869      	bhi.n	80070f6 <_dtoa_r+0x2ae>
 8007022:	2b05      	cmp	r3, #5
 8007024:	bfc4      	itt	gt
 8007026:	3b04      	subgt	r3, #4
 8007028:	9305      	strgt	r3, [sp, #20]
 800702a:	9b05      	ldr	r3, [sp, #20]
 800702c:	f1a3 0302 	sub.w	r3, r3, #2
 8007030:	bfcc      	ite	gt
 8007032:	2500      	movgt	r5, #0
 8007034:	2501      	movle	r5, #1
 8007036:	2b03      	cmp	r3, #3
 8007038:	d869      	bhi.n	800710e <_dtoa_r+0x2c6>
 800703a:	e8df f003 	tbb	[pc, r3]
 800703e:	4e2c      	.short	0x4e2c
 8007040:	5a4c      	.short	0x5a4c
 8007042:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007046:	441d      	add	r5, r3
 8007048:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800704c:	2b20      	cmp	r3, #32
 800704e:	bfc1      	itttt	gt
 8007050:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007054:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007058:	fa09 f303 	lslgt.w	r3, r9, r3
 800705c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007060:	bfda      	itte	le
 8007062:	f1c3 0320 	rsble	r3, r3, #32
 8007066:	fa06 f003 	lslle.w	r0, r6, r3
 800706a:	4318      	orrgt	r0, r3
 800706c:	f7f9 fa4a 	bl	8000504 <__aeabi_ui2d>
 8007070:	2301      	movs	r3, #1
 8007072:	4606      	mov	r6, r0
 8007074:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007078:	3d01      	subs	r5, #1
 800707a:	9310      	str	r3, [sp, #64]	; 0x40
 800707c:	e771      	b.n	8006f62 <_dtoa_r+0x11a>
 800707e:	2301      	movs	r3, #1
 8007080:	e7b6      	b.n	8006ff0 <_dtoa_r+0x1a8>
 8007082:	900e      	str	r0, [sp, #56]	; 0x38
 8007084:	e7b5      	b.n	8006ff2 <_dtoa_r+0x1aa>
 8007086:	f1ca 0300 	rsb	r3, sl, #0
 800708a:	9306      	str	r3, [sp, #24]
 800708c:	2300      	movs	r3, #0
 800708e:	eba8 080a 	sub.w	r8, r8, sl
 8007092:	930d      	str	r3, [sp, #52]	; 0x34
 8007094:	e7c2      	b.n	800701c <_dtoa_r+0x1d4>
 8007096:	2300      	movs	r3, #0
 8007098:	9308      	str	r3, [sp, #32]
 800709a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800709c:	2b00      	cmp	r3, #0
 800709e:	dc39      	bgt.n	8007114 <_dtoa_r+0x2cc>
 80070a0:	f04f 0901 	mov.w	r9, #1
 80070a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80070a8:	464b      	mov	r3, r9
 80070aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80070ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80070b0:	2200      	movs	r2, #0
 80070b2:	6042      	str	r2, [r0, #4]
 80070b4:	2204      	movs	r2, #4
 80070b6:	f102 0614 	add.w	r6, r2, #20
 80070ba:	429e      	cmp	r6, r3
 80070bc:	6841      	ldr	r1, [r0, #4]
 80070be:	d92f      	bls.n	8007120 <_dtoa_r+0x2d8>
 80070c0:	4620      	mov	r0, r4
 80070c2:	f000 fcd9 	bl	8007a78 <_Balloc>
 80070c6:	9000      	str	r0, [sp, #0]
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d14b      	bne.n	8007164 <_dtoa_r+0x31c>
 80070cc:	4b24      	ldr	r3, [pc, #144]	; (8007160 <_dtoa_r+0x318>)
 80070ce:	4602      	mov	r2, r0
 80070d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80070d4:	e6d1      	b.n	8006e7a <_dtoa_r+0x32>
 80070d6:	2301      	movs	r3, #1
 80070d8:	e7de      	b.n	8007098 <_dtoa_r+0x250>
 80070da:	2300      	movs	r3, #0
 80070dc:	9308      	str	r3, [sp, #32]
 80070de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e0:	eb0a 0903 	add.w	r9, sl, r3
 80070e4:	f109 0301 	add.w	r3, r9, #1
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	9301      	str	r3, [sp, #4]
 80070ec:	bfb8      	it	lt
 80070ee:	2301      	movlt	r3, #1
 80070f0:	e7dd      	b.n	80070ae <_dtoa_r+0x266>
 80070f2:	2301      	movs	r3, #1
 80070f4:	e7f2      	b.n	80070dc <_dtoa_r+0x294>
 80070f6:	2501      	movs	r5, #1
 80070f8:	2300      	movs	r3, #0
 80070fa:	9305      	str	r3, [sp, #20]
 80070fc:	9508      	str	r5, [sp, #32]
 80070fe:	f04f 39ff 	mov.w	r9, #4294967295
 8007102:	2200      	movs	r2, #0
 8007104:	f8cd 9004 	str.w	r9, [sp, #4]
 8007108:	2312      	movs	r3, #18
 800710a:	9209      	str	r2, [sp, #36]	; 0x24
 800710c:	e7cf      	b.n	80070ae <_dtoa_r+0x266>
 800710e:	2301      	movs	r3, #1
 8007110:	9308      	str	r3, [sp, #32]
 8007112:	e7f4      	b.n	80070fe <_dtoa_r+0x2b6>
 8007114:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007118:	f8cd 9004 	str.w	r9, [sp, #4]
 800711c:	464b      	mov	r3, r9
 800711e:	e7c6      	b.n	80070ae <_dtoa_r+0x266>
 8007120:	3101      	adds	r1, #1
 8007122:	6041      	str	r1, [r0, #4]
 8007124:	0052      	lsls	r2, r2, #1
 8007126:	e7c6      	b.n	80070b6 <_dtoa_r+0x26e>
 8007128:	636f4361 	.word	0x636f4361
 800712c:	3fd287a7 	.word	0x3fd287a7
 8007130:	8b60c8b3 	.word	0x8b60c8b3
 8007134:	3fc68a28 	.word	0x3fc68a28
 8007138:	509f79fb 	.word	0x509f79fb
 800713c:	3fd34413 	.word	0x3fd34413
 8007140:	0800953c 	.word	0x0800953c
 8007144:	080096fe 	.word	0x080096fe
 8007148:	7ff00000 	.word	0x7ff00000
 800714c:	080096fa 	.word	0x080096fa
 8007150:	080096f1 	.word	0x080096f1
 8007154:	08009519 	.word	0x08009519
 8007158:	3ff80000 	.word	0x3ff80000
 800715c:	080097f8 	.word	0x080097f8
 8007160:	0800975d 	.word	0x0800975d
 8007164:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007166:	9a00      	ldr	r2, [sp, #0]
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	9b01      	ldr	r3, [sp, #4]
 800716c:	2b0e      	cmp	r3, #14
 800716e:	f200 80ad 	bhi.w	80072cc <_dtoa_r+0x484>
 8007172:	2d00      	cmp	r5, #0
 8007174:	f000 80aa 	beq.w	80072cc <_dtoa_r+0x484>
 8007178:	f1ba 0f00 	cmp.w	sl, #0
 800717c:	dd36      	ble.n	80071ec <_dtoa_r+0x3a4>
 800717e:	4ac3      	ldr	r2, [pc, #780]	; (800748c <_dtoa_r+0x644>)
 8007180:	f00a 030f 	and.w	r3, sl, #15
 8007184:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007188:	ed93 7b00 	vldr	d7, [r3]
 800718c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007190:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007194:	eeb0 8a47 	vmov.f32	s16, s14
 8007198:	eef0 8a67 	vmov.f32	s17, s15
 800719c:	d016      	beq.n	80071cc <_dtoa_r+0x384>
 800719e:	4bbc      	ldr	r3, [pc, #752]	; (8007490 <_dtoa_r+0x648>)
 80071a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071a8:	f7f9 fb50 	bl	800084c <__aeabi_ddiv>
 80071ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071b0:	f007 070f 	and.w	r7, r7, #15
 80071b4:	2503      	movs	r5, #3
 80071b6:	4eb6      	ldr	r6, [pc, #728]	; (8007490 <_dtoa_r+0x648>)
 80071b8:	b957      	cbnz	r7, 80071d0 <_dtoa_r+0x388>
 80071ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071be:	ec53 2b18 	vmov	r2, r3, d8
 80071c2:	f7f9 fb43 	bl	800084c <__aeabi_ddiv>
 80071c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071ca:	e029      	b.n	8007220 <_dtoa_r+0x3d8>
 80071cc:	2502      	movs	r5, #2
 80071ce:	e7f2      	b.n	80071b6 <_dtoa_r+0x36e>
 80071d0:	07f9      	lsls	r1, r7, #31
 80071d2:	d508      	bpl.n	80071e6 <_dtoa_r+0x39e>
 80071d4:	ec51 0b18 	vmov	r0, r1, d8
 80071d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80071dc:	f7f9 fa0c 	bl	80005f8 <__aeabi_dmul>
 80071e0:	ec41 0b18 	vmov	d8, r0, r1
 80071e4:	3501      	adds	r5, #1
 80071e6:	107f      	asrs	r7, r7, #1
 80071e8:	3608      	adds	r6, #8
 80071ea:	e7e5      	b.n	80071b8 <_dtoa_r+0x370>
 80071ec:	f000 80a6 	beq.w	800733c <_dtoa_r+0x4f4>
 80071f0:	f1ca 0600 	rsb	r6, sl, #0
 80071f4:	4ba5      	ldr	r3, [pc, #660]	; (800748c <_dtoa_r+0x644>)
 80071f6:	4fa6      	ldr	r7, [pc, #664]	; (8007490 <_dtoa_r+0x648>)
 80071f8:	f006 020f 	and.w	r2, r6, #15
 80071fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007208:	f7f9 f9f6 	bl	80005f8 <__aeabi_dmul>
 800720c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007210:	1136      	asrs	r6, r6, #4
 8007212:	2300      	movs	r3, #0
 8007214:	2502      	movs	r5, #2
 8007216:	2e00      	cmp	r6, #0
 8007218:	f040 8085 	bne.w	8007326 <_dtoa_r+0x4de>
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1d2      	bne.n	80071c6 <_dtoa_r+0x37e>
 8007220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 808c 	beq.w	8007340 <_dtoa_r+0x4f8>
 8007228:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800722c:	4b99      	ldr	r3, [pc, #612]	; (8007494 <_dtoa_r+0x64c>)
 800722e:	2200      	movs	r2, #0
 8007230:	4630      	mov	r0, r6
 8007232:	4639      	mov	r1, r7
 8007234:	f7f9 fc52 	bl	8000adc <__aeabi_dcmplt>
 8007238:	2800      	cmp	r0, #0
 800723a:	f000 8081 	beq.w	8007340 <_dtoa_r+0x4f8>
 800723e:	9b01      	ldr	r3, [sp, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d07d      	beq.n	8007340 <_dtoa_r+0x4f8>
 8007244:	f1b9 0f00 	cmp.w	r9, #0
 8007248:	dd3c      	ble.n	80072c4 <_dtoa_r+0x47c>
 800724a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800724e:	9307      	str	r3, [sp, #28]
 8007250:	2200      	movs	r2, #0
 8007252:	4b91      	ldr	r3, [pc, #580]	; (8007498 <_dtoa_r+0x650>)
 8007254:	4630      	mov	r0, r6
 8007256:	4639      	mov	r1, r7
 8007258:	f7f9 f9ce 	bl	80005f8 <__aeabi_dmul>
 800725c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007260:	3501      	adds	r5, #1
 8007262:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007266:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800726a:	4628      	mov	r0, r5
 800726c:	f7f9 f95a 	bl	8000524 <__aeabi_i2d>
 8007270:	4632      	mov	r2, r6
 8007272:	463b      	mov	r3, r7
 8007274:	f7f9 f9c0 	bl	80005f8 <__aeabi_dmul>
 8007278:	4b88      	ldr	r3, [pc, #544]	; (800749c <_dtoa_r+0x654>)
 800727a:	2200      	movs	r2, #0
 800727c:	f7f9 f806 	bl	800028c <__adddf3>
 8007280:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007288:	9303      	str	r3, [sp, #12]
 800728a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800728c:	2b00      	cmp	r3, #0
 800728e:	d15c      	bne.n	800734a <_dtoa_r+0x502>
 8007290:	4b83      	ldr	r3, [pc, #524]	; (80074a0 <_dtoa_r+0x658>)
 8007292:	2200      	movs	r2, #0
 8007294:	4630      	mov	r0, r6
 8007296:	4639      	mov	r1, r7
 8007298:	f7f8 fff6 	bl	8000288 <__aeabi_dsub>
 800729c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072a0:	4606      	mov	r6, r0
 80072a2:	460f      	mov	r7, r1
 80072a4:	f7f9 fc38 	bl	8000b18 <__aeabi_dcmpgt>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	f040 8296 	bne.w	80077da <_dtoa_r+0x992>
 80072ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80072b2:	4630      	mov	r0, r6
 80072b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072b8:	4639      	mov	r1, r7
 80072ba:	f7f9 fc0f 	bl	8000adc <__aeabi_dcmplt>
 80072be:	2800      	cmp	r0, #0
 80072c0:	f040 8288 	bne.w	80077d4 <_dtoa_r+0x98c>
 80072c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80072c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f2c0 8158 	blt.w	8007584 <_dtoa_r+0x73c>
 80072d4:	f1ba 0f0e 	cmp.w	sl, #14
 80072d8:	f300 8154 	bgt.w	8007584 <_dtoa_r+0x73c>
 80072dc:	4b6b      	ldr	r3, [pc, #428]	; (800748c <_dtoa_r+0x644>)
 80072de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80072e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f280 80e3 	bge.w	80074b4 <_dtoa_r+0x66c>
 80072ee:	9b01      	ldr	r3, [sp, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f300 80df 	bgt.w	80074b4 <_dtoa_r+0x66c>
 80072f6:	f040 826d 	bne.w	80077d4 <_dtoa_r+0x98c>
 80072fa:	4b69      	ldr	r3, [pc, #420]	; (80074a0 <_dtoa_r+0x658>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	4640      	mov	r0, r8
 8007300:	4649      	mov	r1, r9
 8007302:	f7f9 f979 	bl	80005f8 <__aeabi_dmul>
 8007306:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800730a:	f7f9 fbfb 	bl	8000b04 <__aeabi_dcmpge>
 800730e:	9e01      	ldr	r6, [sp, #4]
 8007310:	4637      	mov	r7, r6
 8007312:	2800      	cmp	r0, #0
 8007314:	f040 8243 	bne.w	800779e <_dtoa_r+0x956>
 8007318:	9d00      	ldr	r5, [sp, #0]
 800731a:	2331      	movs	r3, #49	; 0x31
 800731c:	f805 3b01 	strb.w	r3, [r5], #1
 8007320:	f10a 0a01 	add.w	sl, sl, #1
 8007324:	e23f      	b.n	80077a6 <_dtoa_r+0x95e>
 8007326:	07f2      	lsls	r2, r6, #31
 8007328:	d505      	bpl.n	8007336 <_dtoa_r+0x4ee>
 800732a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800732e:	f7f9 f963 	bl	80005f8 <__aeabi_dmul>
 8007332:	3501      	adds	r5, #1
 8007334:	2301      	movs	r3, #1
 8007336:	1076      	asrs	r6, r6, #1
 8007338:	3708      	adds	r7, #8
 800733a:	e76c      	b.n	8007216 <_dtoa_r+0x3ce>
 800733c:	2502      	movs	r5, #2
 800733e:	e76f      	b.n	8007220 <_dtoa_r+0x3d8>
 8007340:	9b01      	ldr	r3, [sp, #4]
 8007342:	f8cd a01c 	str.w	sl, [sp, #28]
 8007346:	930c      	str	r3, [sp, #48]	; 0x30
 8007348:	e78d      	b.n	8007266 <_dtoa_r+0x41e>
 800734a:	9900      	ldr	r1, [sp, #0]
 800734c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800734e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007350:	4b4e      	ldr	r3, [pc, #312]	; (800748c <_dtoa_r+0x644>)
 8007352:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007356:	4401      	add	r1, r0
 8007358:	9102      	str	r1, [sp, #8]
 800735a:	9908      	ldr	r1, [sp, #32]
 800735c:	eeb0 8a47 	vmov.f32	s16, s14
 8007360:	eef0 8a67 	vmov.f32	s17, s15
 8007364:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007368:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800736c:	2900      	cmp	r1, #0
 800736e:	d045      	beq.n	80073fc <_dtoa_r+0x5b4>
 8007370:	494c      	ldr	r1, [pc, #304]	; (80074a4 <_dtoa_r+0x65c>)
 8007372:	2000      	movs	r0, #0
 8007374:	f7f9 fa6a 	bl	800084c <__aeabi_ddiv>
 8007378:	ec53 2b18 	vmov	r2, r3, d8
 800737c:	f7f8 ff84 	bl	8000288 <__aeabi_dsub>
 8007380:	9d00      	ldr	r5, [sp, #0]
 8007382:	ec41 0b18 	vmov	d8, r0, r1
 8007386:	4639      	mov	r1, r7
 8007388:	4630      	mov	r0, r6
 800738a:	f7f9 fbe5 	bl	8000b58 <__aeabi_d2iz>
 800738e:	900c      	str	r0, [sp, #48]	; 0x30
 8007390:	f7f9 f8c8 	bl	8000524 <__aeabi_i2d>
 8007394:	4602      	mov	r2, r0
 8007396:	460b      	mov	r3, r1
 8007398:	4630      	mov	r0, r6
 800739a:	4639      	mov	r1, r7
 800739c:	f7f8 ff74 	bl	8000288 <__aeabi_dsub>
 80073a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073a2:	3330      	adds	r3, #48	; 0x30
 80073a4:	f805 3b01 	strb.w	r3, [r5], #1
 80073a8:	ec53 2b18 	vmov	r2, r3, d8
 80073ac:	4606      	mov	r6, r0
 80073ae:	460f      	mov	r7, r1
 80073b0:	f7f9 fb94 	bl	8000adc <__aeabi_dcmplt>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d165      	bne.n	8007484 <_dtoa_r+0x63c>
 80073b8:	4632      	mov	r2, r6
 80073ba:	463b      	mov	r3, r7
 80073bc:	4935      	ldr	r1, [pc, #212]	; (8007494 <_dtoa_r+0x64c>)
 80073be:	2000      	movs	r0, #0
 80073c0:	f7f8 ff62 	bl	8000288 <__aeabi_dsub>
 80073c4:	ec53 2b18 	vmov	r2, r3, d8
 80073c8:	f7f9 fb88 	bl	8000adc <__aeabi_dcmplt>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	f040 80b9 	bne.w	8007544 <_dtoa_r+0x6fc>
 80073d2:	9b02      	ldr	r3, [sp, #8]
 80073d4:	429d      	cmp	r5, r3
 80073d6:	f43f af75 	beq.w	80072c4 <_dtoa_r+0x47c>
 80073da:	4b2f      	ldr	r3, [pc, #188]	; (8007498 <_dtoa_r+0x650>)
 80073dc:	ec51 0b18 	vmov	r0, r1, d8
 80073e0:	2200      	movs	r2, #0
 80073e2:	f7f9 f909 	bl	80005f8 <__aeabi_dmul>
 80073e6:	4b2c      	ldr	r3, [pc, #176]	; (8007498 <_dtoa_r+0x650>)
 80073e8:	ec41 0b18 	vmov	d8, r0, r1
 80073ec:	2200      	movs	r2, #0
 80073ee:	4630      	mov	r0, r6
 80073f0:	4639      	mov	r1, r7
 80073f2:	f7f9 f901 	bl	80005f8 <__aeabi_dmul>
 80073f6:	4606      	mov	r6, r0
 80073f8:	460f      	mov	r7, r1
 80073fa:	e7c4      	b.n	8007386 <_dtoa_r+0x53e>
 80073fc:	ec51 0b17 	vmov	r0, r1, d7
 8007400:	f7f9 f8fa 	bl	80005f8 <__aeabi_dmul>
 8007404:	9b02      	ldr	r3, [sp, #8]
 8007406:	9d00      	ldr	r5, [sp, #0]
 8007408:	930c      	str	r3, [sp, #48]	; 0x30
 800740a:	ec41 0b18 	vmov	d8, r0, r1
 800740e:	4639      	mov	r1, r7
 8007410:	4630      	mov	r0, r6
 8007412:	f7f9 fba1 	bl	8000b58 <__aeabi_d2iz>
 8007416:	9011      	str	r0, [sp, #68]	; 0x44
 8007418:	f7f9 f884 	bl	8000524 <__aeabi_i2d>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	4630      	mov	r0, r6
 8007422:	4639      	mov	r1, r7
 8007424:	f7f8 ff30 	bl	8000288 <__aeabi_dsub>
 8007428:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800742a:	3330      	adds	r3, #48	; 0x30
 800742c:	f805 3b01 	strb.w	r3, [r5], #1
 8007430:	9b02      	ldr	r3, [sp, #8]
 8007432:	429d      	cmp	r5, r3
 8007434:	4606      	mov	r6, r0
 8007436:	460f      	mov	r7, r1
 8007438:	f04f 0200 	mov.w	r2, #0
 800743c:	d134      	bne.n	80074a8 <_dtoa_r+0x660>
 800743e:	4b19      	ldr	r3, [pc, #100]	; (80074a4 <_dtoa_r+0x65c>)
 8007440:	ec51 0b18 	vmov	r0, r1, d8
 8007444:	f7f8 ff22 	bl	800028c <__adddf3>
 8007448:	4602      	mov	r2, r0
 800744a:	460b      	mov	r3, r1
 800744c:	4630      	mov	r0, r6
 800744e:	4639      	mov	r1, r7
 8007450:	f7f9 fb62 	bl	8000b18 <__aeabi_dcmpgt>
 8007454:	2800      	cmp	r0, #0
 8007456:	d175      	bne.n	8007544 <_dtoa_r+0x6fc>
 8007458:	ec53 2b18 	vmov	r2, r3, d8
 800745c:	4911      	ldr	r1, [pc, #68]	; (80074a4 <_dtoa_r+0x65c>)
 800745e:	2000      	movs	r0, #0
 8007460:	f7f8 ff12 	bl	8000288 <__aeabi_dsub>
 8007464:	4602      	mov	r2, r0
 8007466:	460b      	mov	r3, r1
 8007468:	4630      	mov	r0, r6
 800746a:	4639      	mov	r1, r7
 800746c:	f7f9 fb36 	bl	8000adc <__aeabi_dcmplt>
 8007470:	2800      	cmp	r0, #0
 8007472:	f43f af27 	beq.w	80072c4 <_dtoa_r+0x47c>
 8007476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007478:	1e6b      	subs	r3, r5, #1
 800747a:	930c      	str	r3, [sp, #48]	; 0x30
 800747c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007480:	2b30      	cmp	r3, #48	; 0x30
 8007482:	d0f8      	beq.n	8007476 <_dtoa_r+0x62e>
 8007484:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007488:	e04a      	b.n	8007520 <_dtoa_r+0x6d8>
 800748a:	bf00      	nop
 800748c:	080097f8 	.word	0x080097f8
 8007490:	080097d0 	.word	0x080097d0
 8007494:	3ff00000 	.word	0x3ff00000
 8007498:	40240000 	.word	0x40240000
 800749c:	401c0000 	.word	0x401c0000
 80074a0:	40140000 	.word	0x40140000
 80074a4:	3fe00000 	.word	0x3fe00000
 80074a8:	4baf      	ldr	r3, [pc, #700]	; (8007768 <_dtoa_r+0x920>)
 80074aa:	f7f9 f8a5 	bl	80005f8 <__aeabi_dmul>
 80074ae:	4606      	mov	r6, r0
 80074b0:	460f      	mov	r7, r1
 80074b2:	e7ac      	b.n	800740e <_dtoa_r+0x5c6>
 80074b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80074b8:	9d00      	ldr	r5, [sp, #0]
 80074ba:	4642      	mov	r2, r8
 80074bc:	464b      	mov	r3, r9
 80074be:	4630      	mov	r0, r6
 80074c0:	4639      	mov	r1, r7
 80074c2:	f7f9 f9c3 	bl	800084c <__aeabi_ddiv>
 80074c6:	f7f9 fb47 	bl	8000b58 <__aeabi_d2iz>
 80074ca:	9002      	str	r0, [sp, #8]
 80074cc:	f7f9 f82a 	bl	8000524 <__aeabi_i2d>
 80074d0:	4642      	mov	r2, r8
 80074d2:	464b      	mov	r3, r9
 80074d4:	f7f9 f890 	bl	80005f8 <__aeabi_dmul>
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	4630      	mov	r0, r6
 80074de:	4639      	mov	r1, r7
 80074e0:	f7f8 fed2 	bl	8000288 <__aeabi_dsub>
 80074e4:	9e02      	ldr	r6, [sp, #8]
 80074e6:	9f01      	ldr	r7, [sp, #4]
 80074e8:	3630      	adds	r6, #48	; 0x30
 80074ea:	f805 6b01 	strb.w	r6, [r5], #1
 80074ee:	9e00      	ldr	r6, [sp, #0]
 80074f0:	1bae      	subs	r6, r5, r6
 80074f2:	42b7      	cmp	r7, r6
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	d137      	bne.n	800756a <_dtoa_r+0x722>
 80074fa:	f7f8 fec7 	bl	800028c <__adddf3>
 80074fe:	4642      	mov	r2, r8
 8007500:	464b      	mov	r3, r9
 8007502:	4606      	mov	r6, r0
 8007504:	460f      	mov	r7, r1
 8007506:	f7f9 fb07 	bl	8000b18 <__aeabi_dcmpgt>
 800750a:	b9c8      	cbnz	r0, 8007540 <_dtoa_r+0x6f8>
 800750c:	4642      	mov	r2, r8
 800750e:	464b      	mov	r3, r9
 8007510:	4630      	mov	r0, r6
 8007512:	4639      	mov	r1, r7
 8007514:	f7f9 fad8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007518:	b110      	cbz	r0, 8007520 <_dtoa_r+0x6d8>
 800751a:	9b02      	ldr	r3, [sp, #8]
 800751c:	07d9      	lsls	r1, r3, #31
 800751e:	d40f      	bmi.n	8007540 <_dtoa_r+0x6f8>
 8007520:	4620      	mov	r0, r4
 8007522:	4659      	mov	r1, fp
 8007524:	f000 fae8 	bl	8007af8 <_Bfree>
 8007528:	2300      	movs	r3, #0
 800752a:	702b      	strb	r3, [r5, #0]
 800752c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800752e:	f10a 0001 	add.w	r0, sl, #1
 8007532:	6018      	str	r0, [r3, #0]
 8007534:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007536:	2b00      	cmp	r3, #0
 8007538:	f43f acd8 	beq.w	8006eec <_dtoa_r+0xa4>
 800753c:	601d      	str	r5, [r3, #0]
 800753e:	e4d5      	b.n	8006eec <_dtoa_r+0xa4>
 8007540:	f8cd a01c 	str.w	sl, [sp, #28]
 8007544:	462b      	mov	r3, r5
 8007546:	461d      	mov	r5, r3
 8007548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800754c:	2a39      	cmp	r2, #57	; 0x39
 800754e:	d108      	bne.n	8007562 <_dtoa_r+0x71a>
 8007550:	9a00      	ldr	r2, [sp, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d1f7      	bne.n	8007546 <_dtoa_r+0x6fe>
 8007556:	9a07      	ldr	r2, [sp, #28]
 8007558:	9900      	ldr	r1, [sp, #0]
 800755a:	3201      	adds	r2, #1
 800755c:	9207      	str	r2, [sp, #28]
 800755e:	2230      	movs	r2, #48	; 0x30
 8007560:	700a      	strb	r2, [r1, #0]
 8007562:	781a      	ldrb	r2, [r3, #0]
 8007564:	3201      	adds	r2, #1
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	e78c      	b.n	8007484 <_dtoa_r+0x63c>
 800756a:	4b7f      	ldr	r3, [pc, #508]	; (8007768 <_dtoa_r+0x920>)
 800756c:	2200      	movs	r2, #0
 800756e:	f7f9 f843 	bl	80005f8 <__aeabi_dmul>
 8007572:	2200      	movs	r2, #0
 8007574:	2300      	movs	r3, #0
 8007576:	4606      	mov	r6, r0
 8007578:	460f      	mov	r7, r1
 800757a:	f7f9 faa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800757e:	2800      	cmp	r0, #0
 8007580:	d09b      	beq.n	80074ba <_dtoa_r+0x672>
 8007582:	e7cd      	b.n	8007520 <_dtoa_r+0x6d8>
 8007584:	9a08      	ldr	r2, [sp, #32]
 8007586:	2a00      	cmp	r2, #0
 8007588:	f000 80c4 	beq.w	8007714 <_dtoa_r+0x8cc>
 800758c:	9a05      	ldr	r2, [sp, #20]
 800758e:	2a01      	cmp	r2, #1
 8007590:	f300 80a8 	bgt.w	80076e4 <_dtoa_r+0x89c>
 8007594:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007596:	2a00      	cmp	r2, #0
 8007598:	f000 80a0 	beq.w	80076dc <_dtoa_r+0x894>
 800759c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80075a0:	9e06      	ldr	r6, [sp, #24]
 80075a2:	4645      	mov	r5, r8
 80075a4:	9a04      	ldr	r2, [sp, #16]
 80075a6:	2101      	movs	r1, #1
 80075a8:	441a      	add	r2, r3
 80075aa:	4620      	mov	r0, r4
 80075ac:	4498      	add	r8, r3
 80075ae:	9204      	str	r2, [sp, #16]
 80075b0:	f000 fb5e 	bl	8007c70 <__i2b>
 80075b4:	4607      	mov	r7, r0
 80075b6:	2d00      	cmp	r5, #0
 80075b8:	dd0b      	ble.n	80075d2 <_dtoa_r+0x78a>
 80075ba:	9b04      	ldr	r3, [sp, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	dd08      	ble.n	80075d2 <_dtoa_r+0x78a>
 80075c0:	42ab      	cmp	r3, r5
 80075c2:	9a04      	ldr	r2, [sp, #16]
 80075c4:	bfa8      	it	ge
 80075c6:	462b      	movge	r3, r5
 80075c8:	eba8 0803 	sub.w	r8, r8, r3
 80075cc:	1aed      	subs	r5, r5, r3
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	9304      	str	r3, [sp, #16]
 80075d2:	9b06      	ldr	r3, [sp, #24]
 80075d4:	b1fb      	cbz	r3, 8007616 <_dtoa_r+0x7ce>
 80075d6:	9b08      	ldr	r3, [sp, #32]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 809f 	beq.w	800771c <_dtoa_r+0x8d4>
 80075de:	2e00      	cmp	r6, #0
 80075e0:	dd11      	ble.n	8007606 <_dtoa_r+0x7be>
 80075e2:	4639      	mov	r1, r7
 80075e4:	4632      	mov	r2, r6
 80075e6:	4620      	mov	r0, r4
 80075e8:	f000 fbfe 	bl	8007de8 <__pow5mult>
 80075ec:	465a      	mov	r2, fp
 80075ee:	4601      	mov	r1, r0
 80075f0:	4607      	mov	r7, r0
 80075f2:	4620      	mov	r0, r4
 80075f4:	f000 fb52 	bl	8007c9c <__multiply>
 80075f8:	4659      	mov	r1, fp
 80075fa:	9007      	str	r0, [sp, #28]
 80075fc:	4620      	mov	r0, r4
 80075fe:	f000 fa7b 	bl	8007af8 <_Bfree>
 8007602:	9b07      	ldr	r3, [sp, #28]
 8007604:	469b      	mov	fp, r3
 8007606:	9b06      	ldr	r3, [sp, #24]
 8007608:	1b9a      	subs	r2, r3, r6
 800760a:	d004      	beq.n	8007616 <_dtoa_r+0x7ce>
 800760c:	4659      	mov	r1, fp
 800760e:	4620      	mov	r0, r4
 8007610:	f000 fbea 	bl	8007de8 <__pow5mult>
 8007614:	4683      	mov	fp, r0
 8007616:	2101      	movs	r1, #1
 8007618:	4620      	mov	r0, r4
 800761a:	f000 fb29 	bl	8007c70 <__i2b>
 800761e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007620:	2b00      	cmp	r3, #0
 8007622:	4606      	mov	r6, r0
 8007624:	dd7c      	ble.n	8007720 <_dtoa_r+0x8d8>
 8007626:	461a      	mov	r2, r3
 8007628:	4601      	mov	r1, r0
 800762a:	4620      	mov	r0, r4
 800762c:	f000 fbdc 	bl	8007de8 <__pow5mult>
 8007630:	9b05      	ldr	r3, [sp, #20]
 8007632:	2b01      	cmp	r3, #1
 8007634:	4606      	mov	r6, r0
 8007636:	dd76      	ble.n	8007726 <_dtoa_r+0x8de>
 8007638:	2300      	movs	r3, #0
 800763a:	9306      	str	r3, [sp, #24]
 800763c:	6933      	ldr	r3, [r6, #16]
 800763e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007642:	6918      	ldr	r0, [r3, #16]
 8007644:	f000 fac4 	bl	8007bd0 <__hi0bits>
 8007648:	f1c0 0020 	rsb	r0, r0, #32
 800764c:	9b04      	ldr	r3, [sp, #16]
 800764e:	4418      	add	r0, r3
 8007650:	f010 001f 	ands.w	r0, r0, #31
 8007654:	f000 8086 	beq.w	8007764 <_dtoa_r+0x91c>
 8007658:	f1c0 0320 	rsb	r3, r0, #32
 800765c:	2b04      	cmp	r3, #4
 800765e:	dd7f      	ble.n	8007760 <_dtoa_r+0x918>
 8007660:	f1c0 001c 	rsb	r0, r0, #28
 8007664:	9b04      	ldr	r3, [sp, #16]
 8007666:	4403      	add	r3, r0
 8007668:	4480      	add	r8, r0
 800766a:	4405      	add	r5, r0
 800766c:	9304      	str	r3, [sp, #16]
 800766e:	f1b8 0f00 	cmp.w	r8, #0
 8007672:	dd05      	ble.n	8007680 <_dtoa_r+0x838>
 8007674:	4659      	mov	r1, fp
 8007676:	4642      	mov	r2, r8
 8007678:	4620      	mov	r0, r4
 800767a:	f000 fc0f 	bl	8007e9c <__lshift>
 800767e:	4683      	mov	fp, r0
 8007680:	9b04      	ldr	r3, [sp, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	dd05      	ble.n	8007692 <_dtoa_r+0x84a>
 8007686:	4631      	mov	r1, r6
 8007688:	461a      	mov	r2, r3
 800768a:	4620      	mov	r0, r4
 800768c:	f000 fc06 	bl	8007e9c <__lshift>
 8007690:	4606      	mov	r6, r0
 8007692:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007694:	2b00      	cmp	r3, #0
 8007696:	d069      	beq.n	800776c <_dtoa_r+0x924>
 8007698:	4631      	mov	r1, r6
 800769a:	4658      	mov	r0, fp
 800769c:	f000 fc6a 	bl	8007f74 <__mcmp>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	da63      	bge.n	800776c <_dtoa_r+0x924>
 80076a4:	2300      	movs	r3, #0
 80076a6:	4659      	mov	r1, fp
 80076a8:	220a      	movs	r2, #10
 80076aa:	4620      	mov	r0, r4
 80076ac:	f000 fa46 	bl	8007b3c <__multadd>
 80076b0:	9b08      	ldr	r3, [sp, #32]
 80076b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076b6:	4683      	mov	fp, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 818f 	beq.w	80079dc <_dtoa_r+0xb94>
 80076be:	4639      	mov	r1, r7
 80076c0:	2300      	movs	r3, #0
 80076c2:	220a      	movs	r2, #10
 80076c4:	4620      	mov	r0, r4
 80076c6:	f000 fa39 	bl	8007b3c <__multadd>
 80076ca:	f1b9 0f00 	cmp.w	r9, #0
 80076ce:	4607      	mov	r7, r0
 80076d0:	f300 808e 	bgt.w	80077f0 <_dtoa_r+0x9a8>
 80076d4:	9b05      	ldr	r3, [sp, #20]
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	dc50      	bgt.n	800777c <_dtoa_r+0x934>
 80076da:	e089      	b.n	80077f0 <_dtoa_r+0x9a8>
 80076dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80076e2:	e75d      	b.n	80075a0 <_dtoa_r+0x758>
 80076e4:	9b01      	ldr	r3, [sp, #4]
 80076e6:	1e5e      	subs	r6, r3, #1
 80076e8:	9b06      	ldr	r3, [sp, #24]
 80076ea:	42b3      	cmp	r3, r6
 80076ec:	bfbf      	itttt	lt
 80076ee:	9b06      	ldrlt	r3, [sp, #24]
 80076f0:	9606      	strlt	r6, [sp, #24]
 80076f2:	1af2      	sublt	r2, r6, r3
 80076f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80076f6:	bfb6      	itet	lt
 80076f8:	189b      	addlt	r3, r3, r2
 80076fa:	1b9e      	subge	r6, r3, r6
 80076fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80076fe:	9b01      	ldr	r3, [sp, #4]
 8007700:	bfb8      	it	lt
 8007702:	2600      	movlt	r6, #0
 8007704:	2b00      	cmp	r3, #0
 8007706:	bfb5      	itete	lt
 8007708:	eba8 0503 	sublt.w	r5, r8, r3
 800770c:	9b01      	ldrge	r3, [sp, #4]
 800770e:	2300      	movlt	r3, #0
 8007710:	4645      	movge	r5, r8
 8007712:	e747      	b.n	80075a4 <_dtoa_r+0x75c>
 8007714:	9e06      	ldr	r6, [sp, #24]
 8007716:	9f08      	ldr	r7, [sp, #32]
 8007718:	4645      	mov	r5, r8
 800771a:	e74c      	b.n	80075b6 <_dtoa_r+0x76e>
 800771c:	9a06      	ldr	r2, [sp, #24]
 800771e:	e775      	b.n	800760c <_dtoa_r+0x7c4>
 8007720:	9b05      	ldr	r3, [sp, #20]
 8007722:	2b01      	cmp	r3, #1
 8007724:	dc18      	bgt.n	8007758 <_dtoa_r+0x910>
 8007726:	9b02      	ldr	r3, [sp, #8]
 8007728:	b9b3      	cbnz	r3, 8007758 <_dtoa_r+0x910>
 800772a:	9b03      	ldr	r3, [sp, #12]
 800772c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007730:	b9a3      	cbnz	r3, 800775c <_dtoa_r+0x914>
 8007732:	9b03      	ldr	r3, [sp, #12]
 8007734:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007738:	0d1b      	lsrs	r3, r3, #20
 800773a:	051b      	lsls	r3, r3, #20
 800773c:	b12b      	cbz	r3, 800774a <_dtoa_r+0x902>
 800773e:	9b04      	ldr	r3, [sp, #16]
 8007740:	3301      	adds	r3, #1
 8007742:	9304      	str	r3, [sp, #16]
 8007744:	f108 0801 	add.w	r8, r8, #1
 8007748:	2301      	movs	r3, #1
 800774a:	9306      	str	r3, [sp, #24]
 800774c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800774e:	2b00      	cmp	r3, #0
 8007750:	f47f af74 	bne.w	800763c <_dtoa_r+0x7f4>
 8007754:	2001      	movs	r0, #1
 8007756:	e779      	b.n	800764c <_dtoa_r+0x804>
 8007758:	2300      	movs	r3, #0
 800775a:	e7f6      	b.n	800774a <_dtoa_r+0x902>
 800775c:	9b02      	ldr	r3, [sp, #8]
 800775e:	e7f4      	b.n	800774a <_dtoa_r+0x902>
 8007760:	d085      	beq.n	800766e <_dtoa_r+0x826>
 8007762:	4618      	mov	r0, r3
 8007764:	301c      	adds	r0, #28
 8007766:	e77d      	b.n	8007664 <_dtoa_r+0x81c>
 8007768:	40240000 	.word	0x40240000
 800776c:	9b01      	ldr	r3, [sp, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	dc38      	bgt.n	80077e4 <_dtoa_r+0x99c>
 8007772:	9b05      	ldr	r3, [sp, #20]
 8007774:	2b02      	cmp	r3, #2
 8007776:	dd35      	ble.n	80077e4 <_dtoa_r+0x99c>
 8007778:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800777c:	f1b9 0f00 	cmp.w	r9, #0
 8007780:	d10d      	bne.n	800779e <_dtoa_r+0x956>
 8007782:	4631      	mov	r1, r6
 8007784:	464b      	mov	r3, r9
 8007786:	2205      	movs	r2, #5
 8007788:	4620      	mov	r0, r4
 800778a:	f000 f9d7 	bl	8007b3c <__multadd>
 800778e:	4601      	mov	r1, r0
 8007790:	4606      	mov	r6, r0
 8007792:	4658      	mov	r0, fp
 8007794:	f000 fbee 	bl	8007f74 <__mcmp>
 8007798:	2800      	cmp	r0, #0
 800779a:	f73f adbd 	bgt.w	8007318 <_dtoa_r+0x4d0>
 800779e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a0:	9d00      	ldr	r5, [sp, #0]
 80077a2:	ea6f 0a03 	mvn.w	sl, r3
 80077a6:	f04f 0800 	mov.w	r8, #0
 80077aa:	4631      	mov	r1, r6
 80077ac:	4620      	mov	r0, r4
 80077ae:	f000 f9a3 	bl	8007af8 <_Bfree>
 80077b2:	2f00      	cmp	r7, #0
 80077b4:	f43f aeb4 	beq.w	8007520 <_dtoa_r+0x6d8>
 80077b8:	f1b8 0f00 	cmp.w	r8, #0
 80077bc:	d005      	beq.n	80077ca <_dtoa_r+0x982>
 80077be:	45b8      	cmp	r8, r7
 80077c0:	d003      	beq.n	80077ca <_dtoa_r+0x982>
 80077c2:	4641      	mov	r1, r8
 80077c4:	4620      	mov	r0, r4
 80077c6:	f000 f997 	bl	8007af8 <_Bfree>
 80077ca:	4639      	mov	r1, r7
 80077cc:	4620      	mov	r0, r4
 80077ce:	f000 f993 	bl	8007af8 <_Bfree>
 80077d2:	e6a5      	b.n	8007520 <_dtoa_r+0x6d8>
 80077d4:	2600      	movs	r6, #0
 80077d6:	4637      	mov	r7, r6
 80077d8:	e7e1      	b.n	800779e <_dtoa_r+0x956>
 80077da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80077dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80077e0:	4637      	mov	r7, r6
 80077e2:	e599      	b.n	8007318 <_dtoa_r+0x4d0>
 80077e4:	9b08      	ldr	r3, [sp, #32]
 80077e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 80fd 	beq.w	80079ea <_dtoa_r+0xba2>
 80077f0:	2d00      	cmp	r5, #0
 80077f2:	dd05      	ble.n	8007800 <_dtoa_r+0x9b8>
 80077f4:	4639      	mov	r1, r7
 80077f6:	462a      	mov	r2, r5
 80077f8:	4620      	mov	r0, r4
 80077fa:	f000 fb4f 	bl	8007e9c <__lshift>
 80077fe:	4607      	mov	r7, r0
 8007800:	9b06      	ldr	r3, [sp, #24]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d05c      	beq.n	80078c0 <_dtoa_r+0xa78>
 8007806:	6879      	ldr	r1, [r7, #4]
 8007808:	4620      	mov	r0, r4
 800780a:	f000 f935 	bl	8007a78 <_Balloc>
 800780e:	4605      	mov	r5, r0
 8007810:	b928      	cbnz	r0, 800781e <_dtoa_r+0x9d6>
 8007812:	4b80      	ldr	r3, [pc, #512]	; (8007a14 <_dtoa_r+0xbcc>)
 8007814:	4602      	mov	r2, r0
 8007816:	f240 21ea 	movw	r1, #746	; 0x2ea
 800781a:	f7ff bb2e 	b.w	8006e7a <_dtoa_r+0x32>
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	3202      	adds	r2, #2
 8007822:	0092      	lsls	r2, r2, #2
 8007824:	f107 010c 	add.w	r1, r7, #12
 8007828:	300c      	adds	r0, #12
 800782a:	f000 f917 	bl	8007a5c <memcpy>
 800782e:	2201      	movs	r2, #1
 8007830:	4629      	mov	r1, r5
 8007832:	4620      	mov	r0, r4
 8007834:	f000 fb32 	bl	8007e9c <__lshift>
 8007838:	9b00      	ldr	r3, [sp, #0]
 800783a:	3301      	adds	r3, #1
 800783c:	9301      	str	r3, [sp, #4]
 800783e:	9b00      	ldr	r3, [sp, #0]
 8007840:	444b      	add	r3, r9
 8007842:	9307      	str	r3, [sp, #28]
 8007844:	9b02      	ldr	r3, [sp, #8]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	46b8      	mov	r8, r7
 800784c:	9306      	str	r3, [sp, #24]
 800784e:	4607      	mov	r7, r0
 8007850:	9b01      	ldr	r3, [sp, #4]
 8007852:	4631      	mov	r1, r6
 8007854:	3b01      	subs	r3, #1
 8007856:	4658      	mov	r0, fp
 8007858:	9302      	str	r3, [sp, #8]
 800785a:	f7ff fa69 	bl	8006d30 <quorem>
 800785e:	4603      	mov	r3, r0
 8007860:	3330      	adds	r3, #48	; 0x30
 8007862:	9004      	str	r0, [sp, #16]
 8007864:	4641      	mov	r1, r8
 8007866:	4658      	mov	r0, fp
 8007868:	9308      	str	r3, [sp, #32]
 800786a:	f000 fb83 	bl	8007f74 <__mcmp>
 800786e:	463a      	mov	r2, r7
 8007870:	4681      	mov	r9, r0
 8007872:	4631      	mov	r1, r6
 8007874:	4620      	mov	r0, r4
 8007876:	f000 fb99 	bl	8007fac <__mdiff>
 800787a:	68c2      	ldr	r2, [r0, #12]
 800787c:	9b08      	ldr	r3, [sp, #32]
 800787e:	4605      	mov	r5, r0
 8007880:	bb02      	cbnz	r2, 80078c4 <_dtoa_r+0xa7c>
 8007882:	4601      	mov	r1, r0
 8007884:	4658      	mov	r0, fp
 8007886:	f000 fb75 	bl	8007f74 <__mcmp>
 800788a:	9b08      	ldr	r3, [sp, #32]
 800788c:	4602      	mov	r2, r0
 800788e:	4629      	mov	r1, r5
 8007890:	4620      	mov	r0, r4
 8007892:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007896:	f000 f92f 	bl	8007af8 <_Bfree>
 800789a:	9b05      	ldr	r3, [sp, #20]
 800789c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800789e:	9d01      	ldr	r5, [sp, #4]
 80078a0:	ea43 0102 	orr.w	r1, r3, r2
 80078a4:	9b06      	ldr	r3, [sp, #24]
 80078a6:	430b      	orrs	r3, r1
 80078a8:	9b08      	ldr	r3, [sp, #32]
 80078aa:	d10d      	bne.n	80078c8 <_dtoa_r+0xa80>
 80078ac:	2b39      	cmp	r3, #57	; 0x39
 80078ae:	d029      	beq.n	8007904 <_dtoa_r+0xabc>
 80078b0:	f1b9 0f00 	cmp.w	r9, #0
 80078b4:	dd01      	ble.n	80078ba <_dtoa_r+0xa72>
 80078b6:	9b04      	ldr	r3, [sp, #16]
 80078b8:	3331      	adds	r3, #49	; 0x31
 80078ba:	9a02      	ldr	r2, [sp, #8]
 80078bc:	7013      	strb	r3, [r2, #0]
 80078be:	e774      	b.n	80077aa <_dtoa_r+0x962>
 80078c0:	4638      	mov	r0, r7
 80078c2:	e7b9      	b.n	8007838 <_dtoa_r+0x9f0>
 80078c4:	2201      	movs	r2, #1
 80078c6:	e7e2      	b.n	800788e <_dtoa_r+0xa46>
 80078c8:	f1b9 0f00 	cmp.w	r9, #0
 80078cc:	db06      	blt.n	80078dc <_dtoa_r+0xa94>
 80078ce:	9905      	ldr	r1, [sp, #20]
 80078d0:	ea41 0909 	orr.w	r9, r1, r9
 80078d4:	9906      	ldr	r1, [sp, #24]
 80078d6:	ea59 0101 	orrs.w	r1, r9, r1
 80078da:	d120      	bne.n	800791e <_dtoa_r+0xad6>
 80078dc:	2a00      	cmp	r2, #0
 80078de:	ddec      	ble.n	80078ba <_dtoa_r+0xa72>
 80078e0:	4659      	mov	r1, fp
 80078e2:	2201      	movs	r2, #1
 80078e4:	4620      	mov	r0, r4
 80078e6:	9301      	str	r3, [sp, #4]
 80078e8:	f000 fad8 	bl	8007e9c <__lshift>
 80078ec:	4631      	mov	r1, r6
 80078ee:	4683      	mov	fp, r0
 80078f0:	f000 fb40 	bl	8007f74 <__mcmp>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	9b01      	ldr	r3, [sp, #4]
 80078f8:	dc02      	bgt.n	8007900 <_dtoa_r+0xab8>
 80078fa:	d1de      	bne.n	80078ba <_dtoa_r+0xa72>
 80078fc:	07da      	lsls	r2, r3, #31
 80078fe:	d5dc      	bpl.n	80078ba <_dtoa_r+0xa72>
 8007900:	2b39      	cmp	r3, #57	; 0x39
 8007902:	d1d8      	bne.n	80078b6 <_dtoa_r+0xa6e>
 8007904:	9a02      	ldr	r2, [sp, #8]
 8007906:	2339      	movs	r3, #57	; 0x39
 8007908:	7013      	strb	r3, [r2, #0]
 800790a:	462b      	mov	r3, r5
 800790c:	461d      	mov	r5, r3
 800790e:	3b01      	subs	r3, #1
 8007910:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007914:	2a39      	cmp	r2, #57	; 0x39
 8007916:	d050      	beq.n	80079ba <_dtoa_r+0xb72>
 8007918:	3201      	adds	r2, #1
 800791a:	701a      	strb	r2, [r3, #0]
 800791c:	e745      	b.n	80077aa <_dtoa_r+0x962>
 800791e:	2a00      	cmp	r2, #0
 8007920:	dd03      	ble.n	800792a <_dtoa_r+0xae2>
 8007922:	2b39      	cmp	r3, #57	; 0x39
 8007924:	d0ee      	beq.n	8007904 <_dtoa_r+0xabc>
 8007926:	3301      	adds	r3, #1
 8007928:	e7c7      	b.n	80078ba <_dtoa_r+0xa72>
 800792a:	9a01      	ldr	r2, [sp, #4]
 800792c:	9907      	ldr	r1, [sp, #28]
 800792e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007932:	428a      	cmp	r2, r1
 8007934:	d02a      	beq.n	800798c <_dtoa_r+0xb44>
 8007936:	4659      	mov	r1, fp
 8007938:	2300      	movs	r3, #0
 800793a:	220a      	movs	r2, #10
 800793c:	4620      	mov	r0, r4
 800793e:	f000 f8fd 	bl	8007b3c <__multadd>
 8007942:	45b8      	cmp	r8, r7
 8007944:	4683      	mov	fp, r0
 8007946:	f04f 0300 	mov.w	r3, #0
 800794a:	f04f 020a 	mov.w	r2, #10
 800794e:	4641      	mov	r1, r8
 8007950:	4620      	mov	r0, r4
 8007952:	d107      	bne.n	8007964 <_dtoa_r+0xb1c>
 8007954:	f000 f8f2 	bl	8007b3c <__multadd>
 8007958:	4680      	mov	r8, r0
 800795a:	4607      	mov	r7, r0
 800795c:	9b01      	ldr	r3, [sp, #4]
 800795e:	3301      	adds	r3, #1
 8007960:	9301      	str	r3, [sp, #4]
 8007962:	e775      	b.n	8007850 <_dtoa_r+0xa08>
 8007964:	f000 f8ea 	bl	8007b3c <__multadd>
 8007968:	4639      	mov	r1, r7
 800796a:	4680      	mov	r8, r0
 800796c:	2300      	movs	r3, #0
 800796e:	220a      	movs	r2, #10
 8007970:	4620      	mov	r0, r4
 8007972:	f000 f8e3 	bl	8007b3c <__multadd>
 8007976:	4607      	mov	r7, r0
 8007978:	e7f0      	b.n	800795c <_dtoa_r+0xb14>
 800797a:	f1b9 0f00 	cmp.w	r9, #0
 800797e:	9a00      	ldr	r2, [sp, #0]
 8007980:	bfcc      	ite	gt
 8007982:	464d      	movgt	r5, r9
 8007984:	2501      	movle	r5, #1
 8007986:	4415      	add	r5, r2
 8007988:	f04f 0800 	mov.w	r8, #0
 800798c:	4659      	mov	r1, fp
 800798e:	2201      	movs	r2, #1
 8007990:	4620      	mov	r0, r4
 8007992:	9301      	str	r3, [sp, #4]
 8007994:	f000 fa82 	bl	8007e9c <__lshift>
 8007998:	4631      	mov	r1, r6
 800799a:	4683      	mov	fp, r0
 800799c:	f000 faea 	bl	8007f74 <__mcmp>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	dcb2      	bgt.n	800790a <_dtoa_r+0xac2>
 80079a4:	d102      	bne.n	80079ac <_dtoa_r+0xb64>
 80079a6:	9b01      	ldr	r3, [sp, #4]
 80079a8:	07db      	lsls	r3, r3, #31
 80079aa:	d4ae      	bmi.n	800790a <_dtoa_r+0xac2>
 80079ac:	462b      	mov	r3, r5
 80079ae:	461d      	mov	r5, r3
 80079b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079b4:	2a30      	cmp	r2, #48	; 0x30
 80079b6:	d0fa      	beq.n	80079ae <_dtoa_r+0xb66>
 80079b8:	e6f7      	b.n	80077aa <_dtoa_r+0x962>
 80079ba:	9a00      	ldr	r2, [sp, #0]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d1a5      	bne.n	800790c <_dtoa_r+0xac4>
 80079c0:	f10a 0a01 	add.w	sl, sl, #1
 80079c4:	2331      	movs	r3, #49	; 0x31
 80079c6:	e779      	b.n	80078bc <_dtoa_r+0xa74>
 80079c8:	4b13      	ldr	r3, [pc, #76]	; (8007a18 <_dtoa_r+0xbd0>)
 80079ca:	f7ff baaf 	b.w	8006f2c <_dtoa_r+0xe4>
 80079ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f47f aa86 	bne.w	8006ee2 <_dtoa_r+0x9a>
 80079d6:	4b11      	ldr	r3, [pc, #68]	; (8007a1c <_dtoa_r+0xbd4>)
 80079d8:	f7ff baa8 	b.w	8006f2c <_dtoa_r+0xe4>
 80079dc:	f1b9 0f00 	cmp.w	r9, #0
 80079e0:	dc03      	bgt.n	80079ea <_dtoa_r+0xba2>
 80079e2:	9b05      	ldr	r3, [sp, #20]
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	f73f aec9 	bgt.w	800777c <_dtoa_r+0x934>
 80079ea:	9d00      	ldr	r5, [sp, #0]
 80079ec:	4631      	mov	r1, r6
 80079ee:	4658      	mov	r0, fp
 80079f0:	f7ff f99e 	bl	8006d30 <quorem>
 80079f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80079f8:	f805 3b01 	strb.w	r3, [r5], #1
 80079fc:	9a00      	ldr	r2, [sp, #0]
 80079fe:	1aaa      	subs	r2, r5, r2
 8007a00:	4591      	cmp	r9, r2
 8007a02:	ddba      	ble.n	800797a <_dtoa_r+0xb32>
 8007a04:	4659      	mov	r1, fp
 8007a06:	2300      	movs	r3, #0
 8007a08:	220a      	movs	r2, #10
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f000 f896 	bl	8007b3c <__multadd>
 8007a10:	4683      	mov	fp, r0
 8007a12:	e7eb      	b.n	80079ec <_dtoa_r+0xba4>
 8007a14:	0800975d 	.word	0x0800975d
 8007a18:	08009518 	.word	0x08009518
 8007a1c:	080096f1 	.word	0x080096f1

08007a20 <fiprintf>:
 8007a20:	b40e      	push	{r1, r2, r3}
 8007a22:	b503      	push	{r0, r1, lr}
 8007a24:	4601      	mov	r1, r0
 8007a26:	ab03      	add	r3, sp, #12
 8007a28:	4805      	ldr	r0, [pc, #20]	; (8007a40 <fiprintf+0x20>)
 8007a2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a2e:	6800      	ldr	r0, [r0, #0]
 8007a30:	9301      	str	r3, [sp, #4]
 8007a32:	f000 fddf 	bl	80085f4 <_vfiprintf_r>
 8007a36:	b002      	add	sp, #8
 8007a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a3c:	b003      	add	sp, #12
 8007a3e:	4770      	bx	lr
 8007a40:	20000010 	.word	0x20000010

08007a44 <_localeconv_r>:
 8007a44:	4800      	ldr	r0, [pc, #0]	; (8007a48 <_localeconv_r+0x4>)
 8007a46:	4770      	bx	lr
 8007a48:	20000164 	.word	0x20000164

08007a4c <malloc>:
 8007a4c:	4b02      	ldr	r3, [pc, #8]	; (8007a58 <malloc+0xc>)
 8007a4e:	4601      	mov	r1, r0
 8007a50:	6818      	ldr	r0, [r3, #0]
 8007a52:	f000 bbef 	b.w	8008234 <_malloc_r>
 8007a56:	bf00      	nop
 8007a58:	20000010 	.word	0x20000010

08007a5c <memcpy>:
 8007a5c:	440a      	add	r2, r1
 8007a5e:	4291      	cmp	r1, r2
 8007a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a64:	d100      	bne.n	8007a68 <memcpy+0xc>
 8007a66:	4770      	bx	lr
 8007a68:	b510      	push	{r4, lr}
 8007a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a72:	4291      	cmp	r1, r2
 8007a74:	d1f9      	bne.n	8007a6a <memcpy+0xe>
 8007a76:	bd10      	pop	{r4, pc}

08007a78 <_Balloc>:
 8007a78:	b570      	push	{r4, r5, r6, lr}
 8007a7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	460d      	mov	r5, r1
 8007a80:	b976      	cbnz	r6, 8007aa0 <_Balloc+0x28>
 8007a82:	2010      	movs	r0, #16
 8007a84:	f7ff ffe2 	bl	8007a4c <malloc>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	6260      	str	r0, [r4, #36]	; 0x24
 8007a8c:	b920      	cbnz	r0, 8007a98 <_Balloc+0x20>
 8007a8e:	4b18      	ldr	r3, [pc, #96]	; (8007af0 <_Balloc+0x78>)
 8007a90:	4818      	ldr	r0, [pc, #96]	; (8007af4 <_Balloc+0x7c>)
 8007a92:	2166      	movs	r1, #102	; 0x66
 8007a94:	f7ff f92e 	bl	8006cf4 <__assert_func>
 8007a98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a9c:	6006      	str	r6, [r0, #0]
 8007a9e:	60c6      	str	r6, [r0, #12]
 8007aa0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007aa2:	68f3      	ldr	r3, [r6, #12]
 8007aa4:	b183      	cbz	r3, 8007ac8 <_Balloc+0x50>
 8007aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007aae:	b9b8      	cbnz	r0, 8007ae0 <_Balloc+0x68>
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	fa01 f605 	lsl.w	r6, r1, r5
 8007ab6:	1d72      	adds	r2, r6, #5
 8007ab8:	0092      	lsls	r2, r2, #2
 8007aba:	4620      	mov	r0, r4
 8007abc:	f000 fb5a 	bl	8008174 <_calloc_r>
 8007ac0:	b160      	cbz	r0, 8007adc <_Balloc+0x64>
 8007ac2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ac6:	e00e      	b.n	8007ae6 <_Balloc+0x6e>
 8007ac8:	2221      	movs	r2, #33	; 0x21
 8007aca:	2104      	movs	r1, #4
 8007acc:	4620      	mov	r0, r4
 8007ace:	f000 fb51 	bl	8008174 <_calloc_r>
 8007ad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ad4:	60f0      	str	r0, [r6, #12]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e4      	bne.n	8007aa6 <_Balloc+0x2e>
 8007adc:	2000      	movs	r0, #0
 8007ade:	bd70      	pop	{r4, r5, r6, pc}
 8007ae0:	6802      	ldr	r2, [r0, #0]
 8007ae2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007aec:	e7f7      	b.n	8007ade <_Balloc+0x66>
 8007aee:	bf00      	nop
 8007af0:	0800953c 	.word	0x0800953c
 8007af4:	0800976e 	.word	0x0800976e

08007af8 <_Bfree>:
 8007af8:	b570      	push	{r4, r5, r6, lr}
 8007afa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007afc:	4605      	mov	r5, r0
 8007afe:	460c      	mov	r4, r1
 8007b00:	b976      	cbnz	r6, 8007b20 <_Bfree+0x28>
 8007b02:	2010      	movs	r0, #16
 8007b04:	f7ff ffa2 	bl	8007a4c <malloc>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	6268      	str	r0, [r5, #36]	; 0x24
 8007b0c:	b920      	cbnz	r0, 8007b18 <_Bfree+0x20>
 8007b0e:	4b09      	ldr	r3, [pc, #36]	; (8007b34 <_Bfree+0x3c>)
 8007b10:	4809      	ldr	r0, [pc, #36]	; (8007b38 <_Bfree+0x40>)
 8007b12:	218a      	movs	r1, #138	; 0x8a
 8007b14:	f7ff f8ee 	bl	8006cf4 <__assert_func>
 8007b18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b1c:	6006      	str	r6, [r0, #0]
 8007b1e:	60c6      	str	r6, [r0, #12]
 8007b20:	b13c      	cbz	r4, 8007b32 <_Bfree+0x3a>
 8007b22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b24:	6862      	ldr	r2, [r4, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b2c:	6021      	str	r1, [r4, #0]
 8007b2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b32:	bd70      	pop	{r4, r5, r6, pc}
 8007b34:	0800953c 	.word	0x0800953c
 8007b38:	0800976e 	.word	0x0800976e

08007b3c <__multadd>:
 8007b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b40:	690e      	ldr	r6, [r1, #16]
 8007b42:	4607      	mov	r7, r0
 8007b44:	4698      	mov	r8, r3
 8007b46:	460c      	mov	r4, r1
 8007b48:	f101 0014 	add.w	r0, r1, #20
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	6805      	ldr	r5, [r0, #0]
 8007b50:	b2a9      	uxth	r1, r5
 8007b52:	fb02 8101 	mla	r1, r2, r1, r8
 8007b56:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007b5a:	0c2d      	lsrs	r5, r5, #16
 8007b5c:	fb02 c505 	mla	r5, r2, r5, ip
 8007b60:	b289      	uxth	r1, r1
 8007b62:	3301      	adds	r3, #1
 8007b64:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007b68:	429e      	cmp	r6, r3
 8007b6a:	f840 1b04 	str.w	r1, [r0], #4
 8007b6e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007b72:	dcec      	bgt.n	8007b4e <__multadd+0x12>
 8007b74:	f1b8 0f00 	cmp.w	r8, #0
 8007b78:	d022      	beq.n	8007bc0 <__multadd+0x84>
 8007b7a:	68a3      	ldr	r3, [r4, #8]
 8007b7c:	42b3      	cmp	r3, r6
 8007b7e:	dc19      	bgt.n	8007bb4 <__multadd+0x78>
 8007b80:	6861      	ldr	r1, [r4, #4]
 8007b82:	4638      	mov	r0, r7
 8007b84:	3101      	adds	r1, #1
 8007b86:	f7ff ff77 	bl	8007a78 <_Balloc>
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	b928      	cbnz	r0, 8007b9a <__multadd+0x5e>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	4b0d      	ldr	r3, [pc, #52]	; (8007bc8 <__multadd+0x8c>)
 8007b92:	480e      	ldr	r0, [pc, #56]	; (8007bcc <__multadd+0x90>)
 8007b94:	21b5      	movs	r1, #181	; 0xb5
 8007b96:	f7ff f8ad 	bl	8006cf4 <__assert_func>
 8007b9a:	6922      	ldr	r2, [r4, #16]
 8007b9c:	3202      	adds	r2, #2
 8007b9e:	f104 010c 	add.w	r1, r4, #12
 8007ba2:	0092      	lsls	r2, r2, #2
 8007ba4:	300c      	adds	r0, #12
 8007ba6:	f7ff ff59 	bl	8007a5c <memcpy>
 8007baa:	4621      	mov	r1, r4
 8007bac:	4638      	mov	r0, r7
 8007bae:	f7ff ffa3 	bl	8007af8 <_Bfree>
 8007bb2:	462c      	mov	r4, r5
 8007bb4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007bb8:	3601      	adds	r6, #1
 8007bba:	f8c3 8014 	str.w	r8, [r3, #20]
 8007bbe:	6126      	str	r6, [r4, #16]
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bc6:	bf00      	nop
 8007bc8:	0800975d 	.word	0x0800975d
 8007bcc:	0800976e 	.word	0x0800976e

08007bd0 <__hi0bits>:
 8007bd0:	0c03      	lsrs	r3, r0, #16
 8007bd2:	041b      	lsls	r3, r3, #16
 8007bd4:	b9d3      	cbnz	r3, 8007c0c <__hi0bits+0x3c>
 8007bd6:	0400      	lsls	r0, r0, #16
 8007bd8:	2310      	movs	r3, #16
 8007bda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007bde:	bf04      	itt	eq
 8007be0:	0200      	lsleq	r0, r0, #8
 8007be2:	3308      	addeq	r3, #8
 8007be4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007be8:	bf04      	itt	eq
 8007bea:	0100      	lsleq	r0, r0, #4
 8007bec:	3304      	addeq	r3, #4
 8007bee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007bf2:	bf04      	itt	eq
 8007bf4:	0080      	lsleq	r0, r0, #2
 8007bf6:	3302      	addeq	r3, #2
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	db05      	blt.n	8007c08 <__hi0bits+0x38>
 8007bfc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007c00:	f103 0301 	add.w	r3, r3, #1
 8007c04:	bf08      	it	eq
 8007c06:	2320      	moveq	r3, #32
 8007c08:	4618      	mov	r0, r3
 8007c0a:	4770      	bx	lr
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	e7e4      	b.n	8007bda <__hi0bits+0xa>

08007c10 <__lo0bits>:
 8007c10:	6803      	ldr	r3, [r0, #0]
 8007c12:	f013 0207 	ands.w	r2, r3, #7
 8007c16:	4601      	mov	r1, r0
 8007c18:	d00b      	beq.n	8007c32 <__lo0bits+0x22>
 8007c1a:	07da      	lsls	r2, r3, #31
 8007c1c:	d424      	bmi.n	8007c68 <__lo0bits+0x58>
 8007c1e:	0798      	lsls	r0, r3, #30
 8007c20:	bf49      	itett	mi
 8007c22:	085b      	lsrmi	r3, r3, #1
 8007c24:	089b      	lsrpl	r3, r3, #2
 8007c26:	2001      	movmi	r0, #1
 8007c28:	600b      	strmi	r3, [r1, #0]
 8007c2a:	bf5c      	itt	pl
 8007c2c:	600b      	strpl	r3, [r1, #0]
 8007c2e:	2002      	movpl	r0, #2
 8007c30:	4770      	bx	lr
 8007c32:	b298      	uxth	r0, r3
 8007c34:	b9b0      	cbnz	r0, 8007c64 <__lo0bits+0x54>
 8007c36:	0c1b      	lsrs	r3, r3, #16
 8007c38:	2010      	movs	r0, #16
 8007c3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007c3e:	bf04      	itt	eq
 8007c40:	0a1b      	lsreq	r3, r3, #8
 8007c42:	3008      	addeq	r0, #8
 8007c44:	071a      	lsls	r2, r3, #28
 8007c46:	bf04      	itt	eq
 8007c48:	091b      	lsreq	r3, r3, #4
 8007c4a:	3004      	addeq	r0, #4
 8007c4c:	079a      	lsls	r2, r3, #30
 8007c4e:	bf04      	itt	eq
 8007c50:	089b      	lsreq	r3, r3, #2
 8007c52:	3002      	addeq	r0, #2
 8007c54:	07da      	lsls	r2, r3, #31
 8007c56:	d403      	bmi.n	8007c60 <__lo0bits+0x50>
 8007c58:	085b      	lsrs	r3, r3, #1
 8007c5a:	f100 0001 	add.w	r0, r0, #1
 8007c5e:	d005      	beq.n	8007c6c <__lo0bits+0x5c>
 8007c60:	600b      	str	r3, [r1, #0]
 8007c62:	4770      	bx	lr
 8007c64:	4610      	mov	r0, r2
 8007c66:	e7e8      	b.n	8007c3a <__lo0bits+0x2a>
 8007c68:	2000      	movs	r0, #0
 8007c6a:	4770      	bx	lr
 8007c6c:	2020      	movs	r0, #32
 8007c6e:	4770      	bx	lr

08007c70 <__i2b>:
 8007c70:	b510      	push	{r4, lr}
 8007c72:	460c      	mov	r4, r1
 8007c74:	2101      	movs	r1, #1
 8007c76:	f7ff feff 	bl	8007a78 <_Balloc>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	b928      	cbnz	r0, 8007c8a <__i2b+0x1a>
 8007c7e:	4b05      	ldr	r3, [pc, #20]	; (8007c94 <__i2b+0x24>)
 8007c80:	4805      	ldr	r0, [pc, #20]	; (8007c98 <__i2b+0x28>)
 8007c82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c86:	f7ff f835 	bl	8006cf4 <__assert_func>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	6144      	str	r4, [r0, #20]
 8007c8e:	6103      	str	r3, [r0, #16]
 8007c90:	bd10      	pop	{r4, pc}
 8007c92:	bf00      	nop
 8007c94:	0800975d 	.word	0x0800975d
 8007c98:	0800976e 	.word	0x0800976e

08007c9c <__multiply>:
 8007c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca0:	4614      	mov	r4, r2
 8007ca2:	690a      	ldr	r2, [r1, #16]
 8007ca4:	6923      	ldr	r3, [r4, #16]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	bfb8      	it	lt
 8007caa:	460b      	movlt	r3, r1
 8007cac:	460d      	mov	r5, r1
 8007cae:	bfbc      	itt	lt
 8007cb0:	4625      	movlt	r5, r4
 8007cb2:	461c      	movlt	r4, r3
 8007cb4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007cb8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007cbc:	68ab      	ldr	r3, [r5, #8]
 8007cbe:	6869      	ldr	r1, [r5, #4]
 8007cc0:	eb0a 0709 	add.w	r7, sl, r9
 8007cc4:	42bb      	cmp	r3, r7
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	bfb8      	it	lt
 8007cca:	3101      	addlt	r1, #1
 8007ccc:	f7ff fed4 	bl	8007a78 <_Balloc>
 8007cd0:	b930      	cbnz	r0, 8007ce0 <__multiply+0x44>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	4b42      	ldr	r3, [pc, #264]	; (8007de0 <__multiply+0x144>)
 8007cd6:	4843      	ldr	r0, [pc, #268]	; (8007de4 <__multiply+0x148>)
 8007cd8:	f240 115d 	movw	r1, #349	; 0x15d
 8007cdc:	f7ff f80a 	bl	8006cf4 <__assert_func>
 8007ce0:	f100 0614 	add.w	r6, r0, #20
 8007ce4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007ce8:	4633      	mov	r3, r6
 8007cea:	2200      	movs	r2, #0
 8007cec:	4543      	cmp	r3, r8
 8007cee:	d31e      	bcc.n	8007d2e <__multiply+0x92>
 8007cf0:	f105 0c14 	add.w	ip, r5, #20
 8007cf4:	f104 0314 	add.w	r3, r4, #20
 8007cf8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007cfc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007d00:	9202      	str	r2, [sp, #8]
 8007d02:	ebac 0205 	sub.w	r2, ip, r5
 8007d06:	3a15      	subs	r2, #21
 8007d08:	f022 0203 	bic.w	r2, r2, #3
 8007d0c:	3204      	adds	r2, #4
 8007d0e:	f105 0115 	add.w	r1, r5, #21
 8007d12:	458c      	cmp	ip, r1
 8007d14:	bf38      	it	cc
 8007d16:	2204      	movcc	r2, #4
 8007d18:	9201      	str	r2, [sp, #4]
 8007d1a:	9a02      	ldr	r2, [sp, #8]
 8007d1c:	9303      	str	r3, [sp, #12]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d808      	bhi.n	8007d34 <__multiply+0x98>
 8007d22:	2f00      	cmp	r7, #0
 8007d24:	dc55      	bgt.n	8007dd2 <__multiply+0x136>
 8007d26:	6107      	str	r7, [r0, #16]
 8007d28:	b005      	add	sp, #20
 8007d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d2e:	f843 2b04 	str.w	r2, [r3], #4
 8007d32:	e7db      	b.n	8007cec <__multiply+0x50>
 8007d34:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d38:	f1ba 0f00 	cmp.w	sl, #0
 8007d3c:	d020      	beq.n	8007d80 <__multiply+0xe4>
 8007d3e:	f105 0e14 	add.w	lr, r5, #20
 8007d42:	46b1      	mov	r9, r6
 8007d44:	2200      	movs	r2, #0
 8007d46:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007d4a:	f8d9 b000 	ldr.w	fp, [r9]
 8007d4e:	b2a1      	uxth	r1, r4
 8007d50:	fa1f fb8b 	uxth.w	fp, fp
 8007d54:	fb0a b101 	mla	r1, sl, r1, fp
 8007d58:	4411      	add	r1, r2
 8007d5a:	f8d9 2000 	ldr.w	r2, [r9]
 8007d5e:	0c24      	lsrs	r4, r4, #16
 8007d60:	0c12      	lsrs	r2, r2, #16
 8007d62:	fb0a 2404 	mla	r4, sl, r4, r2
 8007d66:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007d6a:	b289      	uxth	r1, r1
 8007d6c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007d70:	45f4      	cmp	ip, lr
 8007d72:	f849 1b04 	str.w	r1, [r9], #4
 8007d76:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007d7a:	d8e4      	bhi.n	8007d46 <__multiply+0xaa>
 8007d7c:	9901      	ldr	r1, [sp, #4]
 8007d7e:	5072      	str	r2, [r6, r1]
 8007d80:	9a03      	ldr	r2, [sp, #12]
 8007d82:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d86:	3304      	adds	r3, #4
 8007d88:	f1b9 0f00 	cmp.w	r9, #0
 8007d8c:	d01f      	beq.n	8007dce <__multiply+0x132>
 8007d8e:	6834      	ldr	r4, [r6, #0]
 8007d90:	f105 0114 	add.w	r1, r5, #20
 8007d94:	46b6      	mov	lr, r6
 8007d96:	f04f 0a00 	mov.w	sl, #0
 8007d9a:	880a      	ldrh	r2, [r1, #0]
 8007d9c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007da0:	fb09 b202 	mla	r2, r9, r2, fp
 8007da4:	4492      	add	sl, r2
 8007da6:	b2a4      	uxth	r4, r4
 8007da8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007dac:	f84e 4b04 	str.w	r4, [lr], #4
 8007db0:	f851 4b04 	ldr.w	r4, [r1], #4
 8007db4:	f8be 2000 	ldrh.w	r2, [lr]
 8007db8:	0c24      	lsrs	r4, r4, #16
 8007dba:	fb09 2404 	mla	r4, r9, r4, r2
 8007dbe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007dc2:	458c      	cmp	ip, r1
 8007dc4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007dc8:	d8e7      	bhi.n	8007d9a <__multiply+0xfe>
 8007dca:	9a01      	ldr	r2, [sp, #4]
 8007dcc:	50b4      	str	r4, [r6, r2]
 8007dce:	3604      	adds	r6, #4
 8007dd0:	e7a3      	b.n	8007d1a <__multiply+0x7e>
 8007dd2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1a5      	bne.n	8007d26 <__multiply+0x8a>
 8007dda:	3f01      	subs	r7, #1
 8007ddc:	e7a1      	b.n	8007d22 <__multiply+0x86>
 8007dde:	bf00      	nop
 8007de0:	0800975d 	.word	0x0800975d
 8007de4:	0800976e 	.word	0x0800976e

08007de8 <__pow5mult>:
 8007de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dec:	4615      	mov	r5, r2
 8007dee:	f012 0203 	ands.w	r2, r2, #3
 8007df2:	4606      	mov	r6, r0
 8007df4:	460f      	mov	r7, r1
 8007df6:	d007      	beq.n	8007e08 <__pow5mult+0x20>
 8007df8:	4c25      	ldr	r4, [pc, #148]	; (8007e90 <__pow5mult+0xa8>)
 8007dfa:	3a01      	subs	r2, #1
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e02:	f7ff fe9b 	bl	8007b3c <__multadd>
 8007e06:	4607      	mov	r7, r0
 8007e08:	10ad      	asrs	r5, r5, #2
 8007e0a:	d03d      	beq.n	8007e88 <__pow5mult+0xa0>
 8007e0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e0e:	b97c      	cbnz	r4, 8007e30 <__pow5mult+0x48>
 8007e10:	2010      	movs	r0, #16
 8007e12:	f7ff fe1b 	bl	8007a4c <malloc>
 8007e16:	4602      	mov	r2, r0
 8007e18:	6270      	str	r0, [r6, #36]	; 0x24
 8007e1a:	b928      	cbnz	r0, 8007e28 <__pow5mult+0x40>
 8007e1c:	4b1d      	ldr	r3, [pc, #116]	; (8007e94 <__pow5mult+0xac>)
 8007e1e:	481e      	ldr	r0, [pc, #120]	; (8007e98 <__pow5mult+0xb0>)
 8007e20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e24:	f7fe ff66 	bl	8006cf4 <__assert_func>
 8007e28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e2c:	6004      	str	r4, [r0, #0]
 8007e2e:	60c4      	str	r4, [r0, #12]
 8007e30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e38:	b94c      	cbnz	r4, 8007e4e <__pow5mult+0x66>
 8007e3a:	f240 2171 	movw	r1, #625	; 0x271
 8007e3e:	4630      	mov	r0, r6
 8007e40:	f7ff ff16 	bl	8007c70 <__i2b>
 8007e44:	2300      	movs	r3, #0
 8007e46:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	6003      	str	r3, [r0, #0]
 8007e4e:	f04f 0900 	mov.w	r9, #0
 8007e52:	07eb      	lsls	r3, r5, #31
 8007e54:	d50a      	bpl.n	8007e6c <__pow5mult+0x84>
 8007e56:	4639      	mov	r1, r7
 8007e58:	4622      	mov	r2, r4
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f7ff ff1e 	bl	8007c9c <__multiply>
 8007e60:	4639      	mov	r1, r7
 8007e62:	4680      	mov	r8, r0
 8007e64:	4630      	mov	r0, r6
 8007e66:	f7ff fe47 	bl	8007af8 <_Bfree>
 8007e6a:	4647      	mov	r7, r8
 8007e6c:	106d      	asrs	r5, r5, #1
 8007e6e:	d00b      	beq.n	8007e88 <__pow5mult+0xa0>
 8007e70:	6820      	ldr	r0, [r4, #0]
 8007e72:	b938      	cbnz	r0, 8007e84 <__pow5mult+0x9c>
 8007e74:	4622      	mov	r2, r4
 8007e76:	4621      	mov	r1, r4
 8007e78:	4630      	mov	r0, r6
 8007e7a:	f7ff ff0f 	bl	8007c9c <__multiply>
 8007e7e:	6020      	str	r0, [r4, #0]
 8007e80:	f8c0 9000 	str.w	r9, [r0]
 8007e84:	4604      	mov	r4, r0
 8007e86:	e7e4      	b.n	8007e52 <__pow5mult+0x6a>
 8007e88:	4638      	mov	r0, r7
 8007e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e8e:	bf00      	nop
 8007e90:	080098c0 	.word	0x080098c0
 8007e94:	0800953c 	.word	0x0800953c
 8007e98:	0800976e 	.word	0x0800976e

08007e9c <__lshift>:
 8007e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea0:	460c      	mov	r4, r1
 8007ea2:	6849      	ldr	r1, [r1, #4]
 8007ea4:	6923      	ldr	r3, [r4, #16]
 8007ea6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007eaa:	68a3      	ldr	r3, [r4, #8]
 8007eac:	4607      	mov	r7, r0
 8007eae:	4691      	mov	r9, r2
 8007eb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007eb4:	f108 0601 	add.w	r6, r8, #1
 8007eb8:	42b3      	cmp	r3, r6
 8007eba:	db0b      	blt.n	8007ed4 <__lshift+0x38>
 8007ebc:	4638      	mov	r0, r7
 8007ebe:	f7ff fddb 	bl	8007a78 <_Balloc>
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	b948      	cbnz	r0, 8007eda <__lshift+0x3e>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	4b28      	ldr	r3, [pc, #160]	; (8007f6c <__lshift+0xd0>)
 8007eca:	4829      	ldr	r0, [pc, #164]	; (8007f70 <__lshift+0xd4>)
 8007ecc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ed0:	f7fe ff10 	bl	8006cf4 <__assert_func>
 8007ed4:	3101      	adds	r1, #1
 8007ed6:	005b      	lsls	r3, r3, #1
 8007ed8:	e7ee      	b.n	8007eb8 <__lshift+0x1c>
 8007eda:	2300      	movs	r3, #0
 8007edc:	f100 0114 	add.w	r1, r0, #20
 8007ee0:	f100 0210 	add.w	r2, r0, #16
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	4553      	cmp	r3, sl
 8007ee8:	db33      	blt.n	8007f52 <__lshift+0xb6>
 8007eea:	6920      	ldr	r0, [r4, #16]
 8007eec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ef0:	f104 0314 	add.w	r3, r4, #20
 8007ef4:	f019 091f 	ands.w	r9, r9, #31
 8007ef8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007efc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f00:	d02b      	beq.n	8007f5a <__lshift+0xbe>
 8007f02:	f1c9 0e20 	rsb	lr, r9, #32
 8007f06:	468a      	mov	sl, r1
 8007f08:	2200      	movs	r2, #0
 8007f0a:	6818      	ldr	r0, [r3, #0]
 8007f0c:	fa00 f009 	lsl.w	r0, r0, r9
 8007f10:	4302      	orrs	r2, r0
 8007f12:	f84a 2b04 	str.w	r2, [sl], #4
 8007f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f1a:	459c      	cmp	ip, r3
 8007f1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f20:	d8f3      	bhi.n	8007f0a <__lshift+0x6e>
 8007f22:	ebac 0304 	sub.w	r3, ip, r4
 8007f26:	3b15      	subs	r3, #21
 8007f28:	f023 0303 	bic.w	r3, r3, #3
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	f104 0015 	add.w	r0, r4, #21
 8007f32:	4584      	cmp	ip, r0
 8007f34:	bf38      	it	cc
 8007f36:	2304      	movcc	r3, #4
 8007f38:	50ca      	str	r2, [r1, r3]
 8007f3a:	b10a      	cbz	r2, 8007f40 <__lshift+0xa4>
 8007f3c:	f108 0602 	add.w	r6, r8, #2
 8007f40:	3e01      	subs	r6, #1
 8007f42:	4638      	mov	r0, r7
 8007f44:	612e      	str	r6, [r5, #16]
 8007f46:	4621      	mov	r1, r4
 8007f48:	f7ff fdd6 	bl	8007af8 <_Bfree>
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f52:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f56:	3301      	adds	r3, #1
 8007f58:	e7c5      	b.n	8007ee6 <__lshift+0x4a>
 8007f5a:	3904      	subs	r1, #4
 8007f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f60:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f64:	459c      	cmp	ip, r3
 8007f66:	d8f9      	bhi.n	8007f5c <__lshift+0xc0>
 8007f68:	e7ea      	b.n	8007f40 <__lshift+0xa4>
 8007f6a:	bf00      	nop
 8007f6c:	0800975d 	.word	0x0800975d
 8007f70:	0800976e 	.word	0x0800976e

08007f74 <__mcmp>:
 8007f74:	b530      	push	{r4, r5, lr}
 8007f76:	6902      	ldr	r2, [r0, #16]
 8007f78:	690c      	ldr	r4, [r1, #16]
 8007f7a:	1b12      	subs	r2, r2, r4
 8007f7c:	d10e      	bne.n	8007f9c <__mcmp+0x28>
 8007f7e:	f100 0314 	add.w	r3, r0, #20
 8007f82:	3114      	adds	r1, #20
 8007f84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f94:	42a5      	cmp	r5, r4
 8007f96:	d003      	beq.n	8007fa0 <__mcmp+0x2c>
 8007f98:	d305      	bcc.n	8007fa6 <__mcmp+0x32>
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	bd30      	pop	{r4, r5, pc}
 8007fa0:	4283      	cmp	r3, r0
 8007fa2:	d3f3      	bcc.n	8007f8c <__mcmp+0x18>
 8007fa4:	e7fa      	b.n	8007f9c <__mcmp+0x28>
 8007fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8007faa:	e7f7      	b.n	8007f9c <__mcmp+0x28>

08007fac <__mdiff>:
 8007fac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	4617      	mov	r7, r2
 8007fba:	f7ff ffdb 	bl	8007f74 <__mcmp>
 8007fbe:	1e05      	subs	r5, r0, #0
 8007fc0:	d110      	bne.n	8007fe4 <__mdiff+0x38>
 8007fc2:	4629      	mov	r1, r5
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	f7ff fd57 	bl	8007a78 <_Balloc>
 8007fca:	b930      	cbnz	r0, 8007fda <__mdiff+0x2e>
 8007fcc:	4b39      	ldr	r3, [pc, #228]	; (80080b4 <__mdiff+0x108>)
 8007fce:	4602      	mov	r2, r0
 8007fd0:	f240 2132 	movw	r1, #562	; 0x232
 8007fd4:	4838      	ldr	r0, [pc, #224]	; (80080b8 <__mdiff+0x10c>)
 8007fd6:	f7fe fe8d 	bl	8006cf4 <__assert_func>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007fe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe4:	bfa4      	itt	ge
 8007fe6:	463b      	movge	r3, r7
 8007fe8:	4627      	movge	r7, r4
 8007fea:	4630      	mov	r0, r6
 8007fec:	6879      	ldr	r1, [r7, #4]
 8007fee:	bfa6      	itte	ge
 8007ff0:	461c      	movge	r4, r3
 8007ff2:	2500      	movge	r5, #0
 8007ff4:	2501      	movlt	r5, #1
 8007ff6:	f7ff fd3f 	bl	8007a78 <_Balloc>
 8007ffa:	b920      	cbnz	r0, 8008006 <__mdiff+0x5a>
 8007ffc:	4b2d      	ldr	r3, [pc, #180]	; (80080b4 <__mdiff+0x108>)
 8007ffe:	4602      	mov	r2, r0
 8008000:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008004:	e7e6      	b.n	8007fd4 <__mdiff+0x28>
 8008006:	693e      	ldr	r6, [r7, #16]
 8008008:	60c5      	str	r5, [r0, #12]
 800800a:	6925      	ldr	r5, [r4, #16]
 800800c:	f107 0114 	add.w	r1, r7, #20
 8008010:	f104 0914 	add.w	r9, r4, #20
 8008014:	f100 0e14 	add.w	lr, r0, #20
 8008018:	f107 0210 	add.w	r2, r7, #16
 800801c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008020:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008024:	46f2      	mov	sl, lr
 8008026:	2700      	movs	r7, #0
 8008028:	f859 3b04 	ldr.w	r3, [r9], #4
 800802c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008030:	fa1f f883 	uxth.w	r8, r3
 8008034:	fa17 f78b 	uxtah	r7, r7, fp
 8008038:	0c1b      	lsrs	r3, r3, #16
 800803a:	eba7 0808 	sub.w	r8, r7, r8
 800803e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008042:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008046:	fa1f f888 	uxth.w	r8, r8
 800804a:	141f      	asrs	r7, r3, #16
 800804c:	454d      	cmp	r5, r9
 800804e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008052:	f84a 3b04 	str.w	r3, [sl], #4
 8008056:	d8e7      	bhi.n	8008028 <__mdiff+0x7c>
 8008058:	1b2b      	subs	r3, r5, r4
 800805a:	3b15      	subs	r3, #21
 800805c:	f023 0303 	bic.w	r3, r3, #3
 8008060:	3304      	adds	r3, #4
 8008062:	3415      	adds	r4, #21
 8008064:	42a5      	cmp	r5, r4
 8008066:	bf38      	it	cc
 8008068:	2304      	movcc	r3, #4
 800806a:	4419      	add	r1, r3
 800806c:	4473      	add	r3, lr
 800806e:	469e      	mov	lr, r3
 8008070:	460d      	mov	r5, r1
 8008072:	4565      	cmp	r5, ip
 8008074:	d30e      	bcc.n	8008094 <__mdiff+0xe8>
 8008076:	f10c 0203 	add.w	r2, ip, #3
 800807a:	1a52      	subs	r2, r2, r1
 800807c:	f022 0203 	bic.w	r2, r2, #3
 8008080:	3903      	subs	r1, #3
 8008082:	458c      	cmp	ip, r1
 8008084:	bf38      	it	cc
 8008086:	2200      	movcc	r2, #0
 8008088:	441a      	add	r2, r3
 800808a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800808e:	b17b      	cbz	r3, 80080b0 <__mdiff+0x104>
 8008090:	6106      	str	r6, [r0, #16]
 8008092:	e7a5      	b.n	8007fe0 <__mdiff+0x34>
 8008094:	f855 8b04 	ldr.w	r8, [r5], #4
 8008098:	fa17 f488 	uxtah	r4, r7, r8
 800809c:	1422      	asrs	r2, r4, #16
 800809e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80080a2:	b2a4      	uxth	r4, r4
 80080a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80080a8:	f84e 4b04 	str.w	r4, [lr], #4
 80080ac:	1417      	asrs	r7, r2, #16
 80080ae:	e7e0      	b.n	8008072 <__mdiff+0xc6>
 80080b0:	3e01      	subs	r6, #1
 80080b2:	e7ea      	b.n	800808a <__mdiff+0xde>
 80080b4:	0800975d 	.word	0x0800975d
 80080b8:	0800976e 	.word	0x0800976e

080080bc <__d2b>:
 80080bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080c0:	4689      	mov	r9, r1
 80080c2:	2101      	movs	r1, #1
 80080c4:	ec57 6b10 	vmov	r6, r7, d0
 80080c8:	4690      	mov	r8, r2
 80080ca:	f7ff fcd5 	bl	8007a78 <_Balloc>
 80080ce:	4604      	mov	r4, r0
 80080d0:	b930      	cbnz	r0, 80080e0 <__d2b+0x24>
 80080d2:	4602      	mov	r2, r0
 80080d4:	4b25      	ldr	r3, [pc, #148]	; (800816c <__d2b+0xb0>)
 80080d6:	4826      	ldr	r0, [pc, #152]	; (8008170 <__d2b+0xb4>)
 80080d8:	f240 310a 	movw	r1, #778	; 0x30a
 80080dc:	f7fe fe0a 	bl	8006cf4 <__assert_func>
 80080e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80080e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080e8:	bb35      	cbnz	r5, 8008138 <__d2b+0x7c>
 80080ea:	2e00      	cmp	r6, #0
 80080ec:	9301      	str	r3, [sp, #4]
 80080ee:	d028      	beq.n	8008142 <__d2b+0x86>
 80080f0:	4668      	mov	r0, sp
 80080f2:	9600      	str	r6, [sp, #0]
 80080f4:	f7ff fd8c 	bl	8007c10 <__lo0bits>
 80080f8:	9900      	ldr	r1, [sp, #0]
 80080fa:	b300      	cbz	r0, 800813e <__d2b+0x82>
 80080fc:	9a01      	ldr	r2, [sp, #4]
 80080fe:	f1c0 0320 	rsb	r3, r0, #32
 8008102:	fa02 f303 	lsl.w	r3, r2, r3
 8008106:	430b      	orrs	r3, r1
 8008108:	40c2      	lsrs	r2, r0
 800810a:	6163      	str	r3, [r4, #20]
 800810c:	9201      	str	r2, [sp, #4]
 800810e:	9b01      	ldr	r3, [sp, #4]
 8008110:	61a3      	str	r3, [r4, #24]
 8008112:	2b00      	cmp	r3, #0
 8008114:	bf14      	ite	ne
 8008116:	2202      	movne	r2, #2
 8008118:	2201      	moveq	r2, #1
 800811a:	6122      	str	r2, [r4, #16]
 800811c:	b1d5      	cbz	r5, 8008154 <__d2b+0x98>
 800811e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008122:	4405      	add	r5, r0
 8008124:	f8c9 5000 	str.w	r5, [r9]
 8008128:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800812c:	f8c8 0000 	str.w	r0, [r8]
 8008130:	4620      	mov	r0, r4
 8008132:	b003      	add	sp, #12
 8008134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800813c:	e7d5      	b.n	80080ea <__d2b+0x2e>
 800813e:	6161      	str	r1, [r4, #20]
 8008140:	e7e5      	b.n	800810e <__d2b+0x52>
 8008142:	a801      	add	r0, sp, #4
 8008144:	f7ff fd64 	bl	8007c10 <__lo0bits>
 8008148:	9b01      	ldr	r3, [sp, #4]
 800814a:	6163      	str	r3, [r4, #20]
 800814c:	2201      	movs	r2, #1
 800814e:	6122      	str	r2, [r4, #16]
 8008150:	3020      	adds	r0, #32
 8008152:	e7e3      	b.n	800811c <__d2b+0x60>
 8008154:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008158:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800815c:	f8c9 0000 	str.w	r0, [r9]
 8008160:	6918      	ldr	r0, [r3, #16]
 8008162:	f7ff fd35 	bl	8007bd0 <__hi0bits>
 8008166:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800816a:	e7df      	b.n	800812c <__d2b+0x70>
 800816c:	0800975d 	.word	0x0800975d
 8008170:	0800976e 	.word	0x0800976e

08008174 <_calloc_r>:
 8008174:	b513      	push	{r0, r1, r4, lr}
 8008176:	434a      	muls	r2, r1
 8008178:	4611      	mov	r1, r2
 800817a:	9201      	str	r2, [sp, #4]
 800817c:	f000 f85a 	bl	8008234 <_malloc_r>
 8008180:	4604      	mov	r4, r0
 8008182:	b118      	cbz	r0, 800818c <_calloc_r+0x18>
 8008184:	9a01      	ldr	r2, [sp, #4]
 8008186:	2100      	movs	r1, #0
 8008188:	f7fe f838 	bl	80061fc <memset>
 800818c:	4620      	mov	r0, r4
 800818e:	b002      	add	sp, #8
 8008190:	bd10      	pop	{r4, pc}
	...

08008194 <_free_r>:
 8008194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008196:	2900      	cmp	r1, #0
 8008198:	d048      	beq.n	800822c <_free_r+0x98>
 800819a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800819e:	9001      	str	r0, [sp, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f1a1 0404 	sub.w	r4, r1, #4
 80081a6:	bfb8      	it	lt
 80081a8:	18e4      	addlt	r4, r4, r3
 80081aa:	f000 fe75 	bl	8008e98 <__malloc_lock>
 80081ae:	4a20      	ldr	r2, [pc, #128]	; (8008230 <_free_r+0x9c>)
 80081b0:	9801      	ldr	r0, [sp, #4]
 80081b2:	6813      	ldr	r3, [r2, #0]
 80081b4:	4615      	mov	r5, r2
 80081b6:	b933      	cbnz	r3, 80081c6 <_free_r+0x32>
 80081b8:	6063      	str	r3, [r4, #4]
 80081ba:	6014      	str	r4, [r2, #0]
 80081bc:	b003      	add	sp, #12
 80081be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081c2:	f000 be6f 	b.w	8008ea4 <__malloc_unlock>
 80081c6:	42a3      	cmp	r3, r4
 80081c8:	d90b      	bls.n	80081e2 <_free_r+0x4e>
 80081ca:	6821      	ldr	r1, [r4, #0]
 80081cc:	1862      	adds	r2, r4, r1
 80081ce:	4293      	cmp	r3, r2
 80081d0:	bf04      	itt	eq
 80081d2:	681a      	ldreq	r2, [r3, #0]
 80081d4:	685b      	ldreq	r3, [r3, #4]
 80081d6:	6063      	str	r3, [r4, #4]
 80081d8:	bf04      	itt	eq
 80081da:	1852      	addeq	r2, r2, r1
 80081dc:	6022      	streq	r2, [r4, #0]
 80081de:	602c      	str	r4, [r5, #0]
 80081e0:	e7ec      	b.n	80081bc <_free_r+0x28>
 80081e2:	461a      	mov	r2, r3
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	b10b      	cbz	r3, 80081ec <_free_r+0x58>
 80081e8:	42a3      	cmp	r3, r4
 80081ea:	d9fa      	bls.n	80081e2 <_free_r+0x4e>
 80081ec:	6811      	ldr	r1, [r2, #0]
 80081ee:	1855      	adds	r5, r2, r1
 80081f0:	42a5      	cmp	r5, r4
 80081f2:	d10b      	bne.n	800820c <_free_r+0x78>
 80081f4:	6824      	ldr	r4, [r4, #0]
 80081f6:	4421      	add	r1, r4
 80081f8:	1854      	adds	r4, r2, r1
 80081fa:	42a3      	cmp	r3, r4
 80081fc:	6011      	str	r1, [r2, #0]
 80081fe:	d1dd      	bne.n	80081bc <_free_r+0x28>
 8008200:	681c      	ldr	r4, [r3, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	6053      	str	r3, [r2, #4]
 8008206:	4421      	add	r1, r4
 8008208:	6011      	str	r1, [r2, #0]
 800820a:	e7d7      	b.n	80081bc <_free_r+0x28>
 800820c:	d902      	bls.n	8008214 <_free_r+0x80>
 800820e:	230c      	movs	r3, #12
 8008210:	6003      	str	r3, [r0, #0]
 8008212:	e7d3      	b.n	80081bc <_free_r+0x28>
 8008214:	6825      	ldr	r5, [r4, #0]
 8008216:	1961      	adds	r1, r4, r5
 8008218:	428b      	cmp	r3, r1
 800821a:	bf04      	itt	eq
 800821c:	6819      	ldreq	r1, [r3, #0]
 800821e:	685b      	ldreq	r3, [r3, #4]
 8008220:	6063      	str	r3, [r4, #4]
 8008222:	bf04      	itt	eq
 8008224:	1949      	addeq	r1, r1, r5
 8008226:	6021      	streq	r1, [r4, #0]
 8008228:	6054      	str	r4, [r2, #4]
 800822a:	e7c7      	b.n	80081bc <_free_r+0x28>
 800822c:	b003      	add	sp, #12
 800822e:	bd30      	pop	{r4, r5, pc}
 8008230:	2000065c 	.word	0x2000065c

08008234 <_malloc_r>:
 8008234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008236:	1ccd      	adds	r5, r1, #3
 8008238:	f025 0503 	bic.w	r5, r5, #3
 800823c:	3508      	adds	r5, #8
 800823e:	2d0c      	cmp	r5, #12
 8008240:	bf38      	it	cc
 8008242:	250c      	movcc	r5, #12
 8008244:	2d00      	cmp	r5, #0
 8008246:	4606      	mov	r6, r0
 8008248:	db01      	blt.n	800824e <_malloc_r+0x1a>
 800824a:	42a9      	cmp	r1, r5
 800824c:	d903      	bls.n	8008256 <_malloc_r+0x22>
 800824e:	230c      	movs	r3, #12
 8008250:	6033      	str	r3, [r6, #0]
 8008252:	2000      	movs	r0, #0
 8008254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008256:	f000 fe1f 	bl	8008e98 <__malloc_lock>
 800825a:	4921      	ldr	r1, [pc, #132]	; (80082e0 <_malloc_r+0xac>)
 800825c:	680a      	ldr	r2, [r1, #0]
 800825e:	4614      	mov	r4, r2
 8008260:	b99c      	cbnz	r4, 800828a <_malloc_r+0x56>
 8008262:	4f20      	ldr	r7, [pc, #128]	; (80082e4 <_malloc_r+0xb0>)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	b923      	cbnz	r3, 8008272 <_malloc_r+0x3e>
 8008268:	4621      	mov	r1, r4
 800826a:	4630      	mov	r0, r6
 800826c:	f000 faf2 	bl	8008854 <_sbrk_r>
 8008270:	6038      	str	r0, [r7, #0]
 8008272:	4629      	mov	r1, r5
 8008274:	4630      	mov	r0, r6
 8008276:	f000 faed 	bl	8008854 <_sbrk_r>
 800827a:	1c43      	adds	r3, r0, #1
 800827c:	d123      	bne.n	80082c6 <_malloc_r+0x92>
 800827e:	230c      	movs	r3, #12
 8008280:	6033      	str	r3, [r6, #0]
 8008282:	4630      	mov	r0, r6
 8008284:	f000 fe0e 	bl	8008ea4 <__malloc_unlock>
 8008288:	e7e3      	b.n	8008252 <_malloc_r+0x1e>
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	1b5b      	subs	r3, r3, r5
 800828e:	d417      	bmi.n	80082c0 <_malloc_r+0x8c>
 8008290:	2b0b      	cmp	r3, #11
 8008292:	d903      	bls.n	800829c <_malloc_r+0x68>
 8008294:	6023      	str	r3, [r4, #0]
 8008296:	441c      	add	r4, r3
 8008298:	6025      	str	r5, [r4, #0]
 800829a:	e004      	b.n	80082a6 <_malloc_r+0x72>
 800829c:	6863      	ldr	r3, [r4, #4]
 800829e:	42a2      	cmp	r2, r4
 80082a0:	bf0c      	ite	eq
 80082a2:	600b      	streq	r3, [r1, #0]
 80082a4:	6053      	strne	r3, [r2, #4]
 80082a6:	4630      	mov	r0, r6
 80082a8:	f000 fdfc 	bl	8008ea4 <__malloc_unlock>
 80082ac:	f104 000b 	add.w	r0, r4, #11
 80082b0:	1d23      	adds	r3, r4, #4
 80082b2:	f020 0007 	bic.w	r0, r0, #7
 80082b6:	1ac2      	subs	r2, r0, r3
 80082b8:	d0cc      	beq.n	8008254 <_malloc_r+0x20>
 80082ba:	1a1b      	subs	r3, r3, r0
 80082bc:	50a3      	str	r3, [r4, r2]
 80082be:	e7c9      	b.n	8008254 <_malloc_r+0x20>
 80082c0:	4622      	mov	r2, r4
 80082c2:	6864      	ldr	r4, [r4, #4]
 80082c4:	e7cc      	b.n	8008260 <_malloc_r+0x2c>
 80082c6:	1cc4      	adds	r4, r0, #3
 80082c8:	f024 0403 	bic.w	r4, r4, #3
 80082cc:	42a0      	cmp	r0, r4
 80082ce:	d0e3      	beq.n	8008298 <_malloc_r+0x64>
 80082d0:	1a21      	subs	r1, r4, r0
 80082d2:	4630      	mov	r0, r6
 80082d4:	f000 fabe 	bl	8008854 <_sbrk_r>
 80082d8:	3001      	adds	r0, #1
 80082da:	d1dd      	bne.n	8008298 <_malloc_r+0x64>
 80082dc:	e7cf      	b.n	800827e <_malloc_r+0x4a>
 80082de:	bf00      	nop
 80082e0:	2000065c 	.word	0x2000065c
 80082e4:	20000660 	.word	0x20000660

080082e8 <__ssputs_r>:
 80082e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ec:	688e      	ldr	r6, [r1, #8]
 80082ee:	429e      	cmp	r6, r3
 80082f0:	4682      	mov	sl, r0
 80082f2:	460c      	mov	r4, r1
 80082f4:	4690      	mov	r8, r2
 80082f6:	461f      	mov	r7, r3
 80082f8:	d838      	bhi.n	800836c <__ssputs_r+0x84>
 80082fa:	898a      	ldrh	r2, [r1, #12]
 80082fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008300:	d032      	beq.n	8008368 <__ssputs_r+0x80>
 8008302:	6825      	ldr	r5, [r4, #0]
 8008304:	6909      	ldr	r1, [r1, #16]
 8008306:	eba5 0901 	sub.w	r9, r5, r1
 800830a:	6965      	ldr	r5, [r4, #20]
 800830c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008310:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008314:	3301      	adds	r3, #1
 8008316:	444b      	add	r3, r9
 8008318:	106d      	asrs	r5, r5, #1
 800831a:	429d      	cmp	r5, r3
 800831c:	bf38      	it	cc
 800831e:	461d      	movcc	r5, r3
 8008320:	0553      	lsls	r3, r2, #21
 8008322:	d531      	bpl.n	8008388 <__ssputs_r+0xa0>
 8008324:	4629      	mov	r1, r5
 8008326:	f7ff ff85 	bl	8008234 <_malloc_r>
 800832a:	4606      	mov	r6, r0
 800832c:	b950      	cbnz	r0, 8008344 <__ssputs_r+0x5c>
 800832e:	230c      	movs	r3, #12
 8008330:	f8ca 3000 	str.w	r3, [sl]
 8008334:	89a3      	ldrh	r3, [r4, #12]
 8008336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800833a:	81a3      	strh	r3, [r4, #12]
 800833c:	f04f 30ff 	mov.w	r0, #4294967295
 8008340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008344:	6921      	ldr	r1, [r4, #16]
 8008346:	464a      	mov	r2, r9
 8008348:	f7ff fb88 	bl	8007a5c <memcpy>
 800834c:	89a3      	ldrh	r3, [r4, #12]
 800834e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008356:	81a3      	strh	r3, [r4, #12]
 8008358:	6126      	str	r6, [r4, #16]
 800835a:	6165      	str	r5, [r4, #20]
 800835c:	444e      	add	r6, r9
 800835e:	eba5 0509 	sub.w	r5, r5, r9
 8008362:	6026      	str	r6, [r4, #0]
 8008364:	60a5      	str	r5, [r4, #8]
 8008366:	463e      	mov	r6, r7
 8008368:	42be      	cmp	r6, r7
 800836a:	d900      	bls.n	800836e <__ssputs_r+0x86>
 800836c:	463e      	mov	r6, r7
 800836e:	4632      	mov	r2, r6
 8008370:	6820      	ldr	r0, [r4, #0]
 8008372:	4641      	mov	r1, r8
 8008374:	f000 fd76 	bl	8008e64 <memmove>
 8008378:	68a3      	ldr	r3, [r4, #8]
 800837a:	6822      	ldr	r2, [r4, #0]
 800837c:	1b9b      	subs	r3, r3, r6
 800837e:	4432      	add	r2, r6
 8008380:	60a3      	str	r3, [r4, #8]
 8008382:	6022      	str	r2, [r4, #0]
 8008384:	2000      	movs	r0, #0
 8008386:	e7db      	b.n	8008340 <__ssputs_r+0x58>
 8008388:	462a      	mov	r2, r5
 800838a:	f000 fd91 	bl	8008eb0 <_realloc_r>
 800838e:	4606      	mov	r6, r0
 8008390:	2800      	cmp	r0, #0
 8008392:	d1e1      	bne.n	8008358 <__ssputs_r+0x70>
 8008394:	6921      	ldr	r1, [r4, #16]
 8008396:	4650      	mov	r0, sl
 8008398:	f7ff fefc 	bl	8008194 <_free_r>
 800839c:	e7c7      	b.n	800832e <__ssputs_r+0x46>
	...

080083a0 <_svfiprintf_r>:
 80083a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a4:	4698      	mov	r8, r3
 80083a6:	898b      	ldrh	r3, [r1, #12]
 80083a8:	061b      	lsls	r3, r3, #24
 80083aa:	b09d      	sub	sp, #116	; 0x74
 80083ac:	4607      	mov	r7, r0
 80083ae:	460d      	mov	r5, r1
 80083b0:	4614      	mov	r4, r2
 80083b2:	d50e      	bpl.n	80083d2 <_svfiprintf_r+0x32>
 80083b4:	690b      	ldr	r3, [r1, #16]
 80083b6:	b963      	cbnz	r3, 80083d2 <_svfiprintf_r+0x32>
 80083b8:	2140      	movs	r1, #64	; 0x40
 80083ba:	f7ff ff3b 	bl	8008234 <_malloc_r>
 80083be:	6028      	str	r0, [r5, #0]
 80083c0:	6128      	str	r0, [r5, #16]
 80083c2:	b920      	cbnz	r0, 80083ce <_svfiprintf_r+0x2e>
 80083c4:	230c      	movs	r3, #12
 80083c6:	603b      	str	r3, [r7, #0]
 80083c8:	f04f 30ff 	mov.w	r0, #4294967295
 80083cc:	e0d1      	b.n	8008572 <_svfiprintf_r+0x1d2>
 80083ce:	2340      	movs	r3, #64	; 0x40
 80083d0:	616b      	str	r3, [r5, #20]
 80083d2:	2300      	movs	r3, #0
 80083d4:	9309      	str	r3, [sp, #36]	; 0x24
 80083d6:	2320      	movs	r3, #32
 80083d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80083e0:	2330      	movs	r3, #48	; 0x30
 80083e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800858c <_svfiprintf_r+0x1ec>
 80083e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083ea:	f04f 0901 	mov.w	r9, #1
 80083ee:	4623      	mov	r3, r4
 80083f0:	469a      	mov	sl, r3
 80083f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083f6:	b10a      	cbz	r2, 80083fc <_svfiprintf_r+0x5c>
 80083f8:	2a25      	cmp	r2, #37	; 0x25
 80083fa:	d1f9      	bne.n	80083f0 <_svfiprintf_r+0x50>
 80083fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008400:	d00b      	beq.n	800841a <_svfiprintf_r+0x7a>
 8008402:	465b      	mov	r3, fp
 8008404:	4622      	mov	r2, r4
 8008406:	4629      	mov	r1, r5
 8008408:	4638      	mov	r0, r7
 800840a:	f7ff ff6d 	bl	80082e8 <__ssputs_r>
 800840e:	3001      	adds	r0, #1
 8008410:	f000 80aa 	beq.w	8008568 <_svfiprintf_r+0x1c8>
 8008414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008416:	445a      	add	r2, fp
 8008418:	9209      	str	r2, [sp, #36]	; 0x24
 800841a:	f89a 3000 	ldrb.w	r3, [sl]
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 80a2 	beq.w	8008568 <_svfiprintf_r+0x1c8>
 8008424:	2300      	movs	r3, #0
 8008426:	f04f 32ff 	mov.w	r2, #4294967295
 800842a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800842e:	f10a 0a01 	add.w	sl, sl, #1
 8008432:	9304      	str	r3, [sp, #16]
 8008434:	9307      	str	r3, [sp, #28]
 8008436:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800843a:	931a      	str	r3, [sp, #104]	; 0x68
 800843c:	4654      	mov	r4, sl
 800843e:	2205      	movs	r2, #5
 8008440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008444:	4851      	ldr	r0, [pc, #324]	; (800858c <_svfiprintf_r+0x1ec>)
 8008446:	f7f7 fecb 	bl	80001e0 <memchr>
 800844a:	9a04      	ldr	r2, [sp, #16]
 800844c:	b9d8      	cbnz	r0, 8008486 <_svfiprintf_r+0xe6>
 800844e:	06d0      	lsls	r0, r2, #27
 8008450:	bf44      	itt	mi
 8008452:	2320      	movmi	r3, #32
 8008454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008458:	0711      	lsls	r1, r2, #28
 800845a:	bf44      	itt	mi
 800845c:	232b      	movmi	r3, #43	; 0x2b
 800845e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008462:	f89a 3000 	ldrb.w	r3, [sl]
 8008466:	2b2a      	cmp	r3, #42	; 0x2a
 8008468:	d015      	beq.n	8008496 <_svfiprintf_r+0xf6>
 800846a:	9a07      	ldr	r2, [sp, #28]
 800846c:	4654      	mov	r4, sl
 800846e:	2000      	movs	r0, #0
 8008470:	f04f 0c0a 	mov.w	ip, #10
 8008474:	4621      	mov	r1, r4
 8008476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800847a:	3b30      	subs	r3, #48	; 0x30
 800847c:	2b09      	cmp	r3, #9
 800847e:	d94e      	bls.n	800851e <_svfiprintf_r+0x17e>
 8008480:	b1b0      	cbz	r0, 80084b0 <_svfiprintf_r+0x110>
 8008482:	9207      	str	r2, [sp, #28]
 8008484:	e014      	b.n	80084b0 <_svfiprintf_r+0x110>
 8008486:	eba0 0308 	sub.w	r3, r0, r8
 800848a:	fa09 f303 	lsl.w	r3, r9, r3
 800848e:	4313      	orrs	r3, r2
 8008490:	9304      	str	r3, [sp, #16]
 8008492:	46a2      	mov	sl, r4
 8008494:	e7d2      	b.n	800843c <_svfiprintf_r+0x9c>
 8008496:	9b03      	ldr	r3, [sp, #12]
 8008498:	1d19      	adds	r1, r3, #4
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	9103      	str	r1, [sp, #12]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	bfbb      	ittet	lt
 80084a2:	425b      	neglt	r3, r3
 80084a4:	f042 0202 	orrlt.w	r2, r2, #2
 80084a8:	9307      	strge	r3, [sp, #28]
 80084aa:	9307      	strlt	r3, [sp, #28]
 80084ac:	bfb8      	it	lt
 80084ae:	9204      	strlt	r2, [sp, #16]
 80084b0:	7823      	ldrb	r3, [r4, #0]
 80084b2:	2b2e      	cmp	r3, #46	; 0x2e
 80084b4:	d10c      	bne.n	80084d0 <_svfiprintf_r+0x130>
 80084b6:	7863      	ldrb	r3, [r4, #1]
 80084b8:	2b2a      	cmp	r3, #42	; 0x2a
 80084ba:	d135      	bne.n	8008528 <_svfiprintf_r+0x188>
 80084bc:	9b03      	ldr	r3, [sp, #12]
 80084be:	1d1a      	adds	r2, r3, #4
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	9203      	str	r2, [sp, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	bfb8      	it	lt
 80084c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80084cc:	3402      	adds	r4, #2
 80084ce:	9305      	str	r3, [sp, #20]
 80084d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800859c <_svfiprintf_r+0x1fc>
 80084d4:	7821      	ldrb	r1, [r4, #0]
 80084d6:	2203      	movs	r2, #3
 80084d8:	4650      	mov	r0, sl
 80084da:	f7f7 fe81 	bl	80001e0 <memchr>
 80084de:	b140      	cbz	r0, 80084f2 <_svfiprintf_r+0x152>
 80084e0:	2340      	movs	r3, #64	; 0x40
 80084e2:	eba0 000a 	sub.w	r0, r0, sl
 80084e6:	fa03 f000 	lsl.w	r0, r3, r0
 80084ea:	9b04      	ldr	r3, [sp, #16]
 80084ec:	4303      	orrs	r3, r0
 80084ee:	3401      	adds	r4, #1
 80084f0:	9304      	str	r3, [sp, #16]
 80084f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084f6:	4826      	ldr	r0, [pc, #152]	; (8008590 <_svfiprintf_r+0x1f0>)
 80084f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084fc:	2206      	movs	r2, #6
 80084fe:	f7f7 fe6f 	bl	80001e0 <memchr>
 8008502:	2800      	cmp	r0, #0
 8008504:	d038      	beq.n	8008578 <_svfiprintf_r+0x1d8>
 8008506:	4b23      	ldr	r3, [pc, #140]	; (8008594 <_svfiprintf_r+0x1f4>)
 8008508:	bb1b      	cbnz	r3, 8008552 <_svfiprintf_r+0x1b2>
 800850a:	9b03      	ldr	r3, [sp, #12]
 800850c:	3307      	adds	r3, #7
 800850e:	f023 0307 	bic.w	r3, r3, #7
 8008512:	3308      	adds	r3, #8
 8008514:	9303      	str	r3, [sp, #12]
 8008516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008518:	4433      	add	r3, r6
 800851a:	9309      	str	r3, [sp, #36]	; 0x24
 800851c:	e767      	b.n	80083ee <_svfiprintf_r+0x4e>
 800851e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008522:	460c      	mov	r4, r1
 8008524:	2001      	movs	r0, #1
 8008526:	e7a5      	b.n	8008474 <_svfiprintf_r+0xd4>
 8008528:	2300      	movs	r3, #0
 800852a:	3401      	adds	r4, #1
 800852c:	9305      	str	r3, [sp, #20]
 800852e:	4619      	mov	r1, r3
 8008530:	f04f 0c0a 	mov.w	ip, #10
 8008534:	4620      	mov	r0, r4
 8008536:	f810 2b01 	ldrb.w	r2, [r0], #1
 800853a:	3a30      	subs	r2, #48	; 0x30
 800853c:	2a09      	cmp	r2, #9
 800853e:	d903      	bls.n	8008548 <_svfiprintf_r+0x1a8>
 8008540:	2b00      	cmp	r3, #0
 8008542:	d0c5      	beq.n	80084d0 <_svfiprintf_r+0x130>
 8008544:	9105      	str	r1, [sp, #20]
 8008546:	e7c3      	b.n	80084d0 <_svfiprintf_r+0x130>
 8008548:	fb0c 2101 	mla	r1, ip, r1, r2
 800854c:	4604      	mov	r4, r0
 800854e:	2301      	movs	r3, #1
 8008550:	e7f0      	b.n	8008534 <_svfiprintf_r+0x194>
 8008552:	ab03      	add	r3, sp, #12
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	462a      	mov	r2, r5
 8008558:	4b0f      	ldr	r3, [pc, #60]	; (8008598 <_svfiprintf_r+0x1f8>)
 800855a:	a904      	add	r1, sp, #16
 800855c:	4638      	mov	r0, r7
 800855e:	f7fd fef5 	bl	800634c <_printf_float>
 8008562:	1c42      	adds	r2, r0, #1
 8008564:	4606      	mov	r6, r0
 8008566:	d1d6      	bne.n	8008516 <_svfiprintf_r+0x176>
 8008568:	89ab      	ldrh	r3, [r5, #12]
 800856a:	065b      	lsls	r3, r3, #25
 800856c:	f53f af2c 	bmi.w	80083c8 <_svfiprintf_r+0x28>
 8008570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008572:	b01d      	add	sp, #116	; 0x74
 8008574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008578:	ab03      	add	r3, sp, #12
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	462a      	mov	r2, r5
 800857e:	4b06      	ldr	r3, [pc, #24]	; (8008598 <_svfiprintf_r+0x1f8>)
 8008580:	a904      	add	r1, sp, #16
 8008582:	4638      	mov	r0, r7
 8008584:	f7fe f986 	bl	8006894 <_printf_i>
 8008588:	e7eb      	b.n	8008562 <_svfiprintf_r+0x1c2>
 800858a:	bf00      	nop
 800858c:	080098cc 	.word	0x080098cc
 8008590:	080098d6 	.word	0x080098d6
 8008594:	0800634d 	.word	0x0800634d
 8008598:	080082e9 	.word	0x080082e9
 800859c:	080098d2 	.word	0x080098d2

080085a0 <__sfputc_r>:
 80085a0:	6893      	ldr	r3, [r2, #8]
 80085a2:	3b01      	subs	r3, #1
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	b410      	push	{r4}
 80085a8:	6093      	str	r3, [r2, #8]
 80085aa:	da08      	bge.n	80085be <__sfputc_r+0x1e>
 80085ac:	6994      	ldr	r4, [r2, #24]
 80085ae:	42a3      	cmp	r3, r4
 80085b0:	db01      	blt.n	80085b6 <__sfputc_r+0x16>
 80085b2:	290a      	cmp	r1, #10
 80085b4:	d103      	bne.n	80085be <__sfputc_r+0x1e>
 80085b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085ba:	f000 b95b 	b.w	8008874 <__swbuf_r>
 80085be:	6813      	ldr	r3, [r2, #0]
 80085c0:	1c58      	adds	r0, r3, #1
 80085c2:	6010      	str	r0, [r2, #0]
 80085c4:	7019      	strb	r1, [r3, #0]
 80085c6:	4608      	mov	r0, r1
 80085c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <__sfputs_r>:
 80085ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d0:	4606      	mov	r6, r0
 80085d2:	460f      	mov	r7, r1
 80085d4:	4614      	mov	r4, r2
 80085d6:	18d5      	adds	r5, r2, r3
 80085d8:	42ac      	cmp	r4, r5
 80085da:	d101      	bne.n	80085e0 <__sfputs_r+0x12>
 80085dc:	2000      	movs	r0, #0
 80085de:	e007      	b.n	80085f0 <__sfputs_r+0x22>
 80085e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085e4:	463a      	mov	r2, r7
 80085e6:	4630      	mov	r0, r6
 80085e8:	f7ff ffda 	bl	80085a0 <__sfputc_r>
 80085ec:	1c43      	adds	r3, r0, #1
 80085ee:	d1f3      	bne.n	80085d8 <__sfputs_r+0xa>
 80085f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085f4 <_vfiprintf_r>:
 80085f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f8:	460d      	mov	r5, r1
 80085fa:	b09d      	sub	sp, #116	; 0x74
 80085fc:	4614      	mov	r4, r2
 80085fe:	4698      	mov	r8, r3
 8008600:	4606      	mov	r6, r0
 8008602:	b118      	cbz	r0, 800860c <_vfiprintf_r+0x18>
 8008604:	6983      	ldr	r3, [r0, #24]
 8008606:	b90b      	cbnz	r3, 800860c <_vfiprintf_r+0x18>
 8008608:	f000 fb16 	bl	8008c38 <__sinit>
 800860c:	4b89      	ldr	r3, [pc, #548]	; (8008834 <_vfiprintf_r+0x240>)
 800860e:	429d      	cmp	r5, r3
 8008610:	d11b      	bne.n	800864a <_vfiprintf_r+0x56>
 8008612:	6875      	ldr	r5, [r6, #4]
 8008614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008616:	07d9      	lsls	r1, r3, #31
 8008618:	d405      	bmi.n	8008626 <_vfiprintf_r+0x32>
 800861a:	89ab      	ldrh	r3, [r5, #12]
 800861c:	059a      	lsls	r2, r3, #22
 800861e:	d402      	bmi.n	8008626 <_vfiprintf_r+0x32>
 8008620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008622:	f000 fba7 	bl	8008d74 <__retarget_lock_acquire_recursive>
 8008626:	89ab      	ldrh	r3, [r5, #12]
 8008628:	071b      	lsls	r3, r3, #28
 800862a:	d501      	bpl.n	8008630 <_vfiprintf_r+0x3c>
 800862c:	692b      	ldr	r3, [r5, #16]
 800862e:	b9eb      	cbnz	r3, 800866c <_vfiprintf_r+0x78>
 8008630:	4629      	mov	r1, r5
 8008632:	4630      	mov	r0, r6
 8008634:	f000 f970 	bl	8008918 <__swsetup_r>
 8008638:	b1c0      	cbz	r0, 800866c <_vfiprintf_r+0x78>
 800863a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800863c:	07dc      	lsls	r4, r3, #31
 800863e:	d50e      	bpl.n	800865e <_vfiprintf_r+0x6a>
 8008640:	f04f 30ff 	mov.w	r0, #4294967295
 8008644:	b01d      	add	sp, #116	; 0x74
 8008646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800864a:	4b7b      	ldr	r3, [pc, #492]	; (8008838 <_vfiprintf_r+0x244>)
 800864c:	429d      	cmp	r5, r3
 800864e:	d101      	bne.n	8008654 <_vfiprintf_r+0x60>
 8008650:	68b5      	ldr	r5, [r6, #8]
 8008652:	e7df      	b.n	8008614 <_vfiprintf_r+0x20>
 8008654:	4b79      	ldr	r3, [pc, #484]	; (800883c <_vfiprintf_r+0x248>)
 8008656:	429d      	cmp	r5, r3
 8008658:	bf08      	it	eq
 800865a:	68f5      	ldreq	r5, [r6, #12]
 800865c:	e7da      	b.n	8008614 <_vfiprintf_r+0x20>
 800865e:	89ab      	ldrh	r3, [r5, #12]
 8008660:	0598      	lsls	r0, r3, #22
 8008662:	d4ed      	bmi.n	8008640 <_vfiprintf_r+0x4c>
 8008664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008666:	f000 fb86 	bl	8008d76 <__retarget_lock_release_recursive>
 800866a:	e7e9      	b.n	8008640 <_vfiprintf_r+0x4c>
 800866c:	2300      	movs	r3, #0
 800866e:	9309      	str	r3, [sp, #36]	; 0x24
 8008670:	2320      	movs	r3, #32
 8008672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008676:	f8cd 800c 	str.w	r8, [sp, #12]
 800867a:	2330      	movs	r3, #48	; 0x30
 800867c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008840 <_vfiprintf_r+0x24c>
 8008680:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008684:	f04f 0901 	mov.w	r9, #1
 8008688:	4623      	mov	r3, r4
 800868a:	469a      	mov	sl, r3
 800868c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008690:	b10a      	cbz	r2, 8008696 <_vfiprintf_r+0xa2>
 8008692:	2a25      	cmp	r2, #37	; 0x25
 8008694:	d1f9      	bne.n	800868a <_vfiprintf_r+0x96>
 8008696:	ebba 0b04 	subs.w	fp, sl, r4
 800869a:	d00b      	beq.n	80086b4 <_vfiprintf_r+0xc0>
 800869c:	465b      	mov	r3, fp
 800869e:	4622      	mov	r2, r4
 80086a0:	4629      	mov	r1, r5
 80086a2:	4630      	mov	r0, r6
 80086a4:	f7ff ff93 	bl	80085ce <__sfputs_r>
 80086a8:	3001      	adds	r0, #1
 80086aa:	f000 80aa 	beq.w	8008802 <_vfiprintf_r+0x20e>
 80086ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086b0:	445a      	add	r2, fp
 80086b2:	9209      	str	r2, [sp, #36]	; 0x24
 80086b4:	f89a 3000 	ldrb.w	r3, [sl]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 80a2 	beq.w	8008802 <_vfiprintf_r+0x20e>
 80086be:	2300      	movs	r3, #0
 80086c0:	f04f 32ff 	mov.w	r2, #4294967295
 80086c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086c8:	f10a 0a01 	add.w	sl, sl, #1
 80086cc:	9304      	str	r3, [sp, #16]
 80086ce:	9307      	str	r3, [sp, #28]
 80086d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086d4:	931a      	str	r3, [sp, #104]	; 0x68
 80086d6:	4654      	mov	r4, sl
 80086d8:	2205      	movs	r2, #5
 80086da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086de:	4858      	ldr	r0, [pc, #352]	; (8008840 <_vfiprintf_r+0x24c>)
 80086e0:	f7f7 fd7e 	bl	80001e0 <memchr>
 80086e4:	9a04      	ldr	r2, [sp, #16]
 80086e6:	b9d8      	cbnz	r0, 8008720 <_vfiprintf_r+0x12c>
 80086e8:	06d1      	lsls	r1, r2, #27
 80086ea:	bf44      	itt	mi
 80086ec:	2320      	movmi	r3, #32
 80086ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086f2:	0713      	lsls	r3, r2, #28
 80086f4:	bf44      	itt	mi
 80086f6:	232b      	movmi	r3, #43	; 0x2b
 80086f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008700:	2b2a      	cmp	r3, #42	; 0x2a
 8008702:	d015      	beq.n	8008730 <_vfiprintf_r+0x13c>
 8008704:	9a07      	ldr	r2, [sp, #28]
 8008706:	4654      	mov	r4, sl
 8008708:	2000      	movs	r0, #0
 800870a:	f04f 0c0a 	mov.w	ip, #10
 800870e:	4621      	mov	r1, r4
 8008710:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008714:	3b30      	subs	r3, #48	; 0x30
 8008716:	2b09      	cmp	r3, #9
 8008718:	d94e      	bls.n	80087b8 <_vfiprintf_r+0x1c4>
 800871a:	b1b0      	cbz	r0, 800874a <_vfiprintf_r+0x156>
 800871c:	9207      	str	r2, [sp, #28]
 800871e:	e014      	b.n	800874a <_vfiprintf_r+0x156>
 8008720:	eba0 0308 	sub.w	r3, r0, r8
 8008724:	fa09 f303 	lsl.w	r3, r9, r3
 8008728:	4313      	orrs	r3, r2
 800872a:	9304      	str	r3, [sp, #16]
 800872c:	46a2      	mov	sl, r4
 800872e:	e7d2      	b.n	80086d6 <_vfiprintf_r+0xe2>
 8008730:	9b03      	ldr	r3, [sp, #12]
 8008732:	1d19      	adds	r1, r3, #4
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	9103      	str	r1, [sp, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	bfbb      	ittet	lt
 800873c:	425b      	neglt	r3, r3
 800873e:	f042 0202 	orrlt.w	r2, r2, #2
 8008742:	9307      	strge	r3, [sp, #28]
 8008744:	9307      	strlt	r3, [sp, #28]
 8008746:	bfb8      	it	lt
 8008748:	9204      	strlt	r2, [sp, #16]
 800874a:	7823      	ldrb	r3, [r4, #0]
 800874c:	2b2e      	cmp	r3, #46	; 0x2e
 800874e:	d10c      	bne.n	800876a <_vfiprintf_r+0x176>
 8008750:	7863      	ldrb	r3, [r4, #1]
 8008752:	2b2a      	cmp	r3, #42	; 0x2a
 8008754:	d135      	bne.n	80087c2 <_vfiprintf_r+0x1ce>
 8008756:	9b03      	ldr	r3, [sp, #12]
 8008758:	1d1a      	adds	r2, r3, #4
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	9203      	str	r2, [sp, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	bfb8      	it	lt
 8008762:	f04f 33ff 	movlt.w	r3, #4294967295
 8008766:	3402      	adds	r4, #2
 8008768:	9305      	str	r3, [sp, #20]
 800876a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008850 <_vfiprintf_r+0x25c>
 800876e:	7821      	ldrb	r1, [r4, #0]
 8008770:	2203      	movs	r2, #3
 8008772:	4650      	mov	r0, sl
 8008774:	f7f7 fd34 	bl	80001e0 <memchr>
 8008778:	b140      	cbz	r0, 800878c <_vfiprintf_r+0x198>
 800877a:	2340      	movs	r3, #64	; 0x40
 800877c:	eba0 000a 	sub.w	r0, r0, sl
 8008780:	fa03 f000 	lsl.w	r0, r3, r0
 8008784:	9b04      	ldr	r3, [sp, #16]
 8008786:	4303      	orrs	r3, r0
 8008788:	3401      	adds	r4, #1
 800878a:	9304      	str	r3, [sp, #16]
 800878c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008790:	482c      	ldr	r0, [pc, #176]	; (8008844 <_vfiprintf_r+0x250>)
 8008792:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008796:	2206      	movs	r2, #6
 8008798:	f7f7 fd22 	bl	80001e0 <memchr>
 800879c:	2800      	cmp	r0, #0
 800879e:	d03f      	beq.n	8008820 <_vfiprintf_r+0x22c>
 80087a0:	4b29      	ldr	r3, [pc, #164]	; (8008848 <_vfiprintf_r+0x254>)
 80087a2:	bb1b      	cbnz	r3, 80087ec <_vfiprintf_r+0x1f8>
 80087a4:	9b03      	ldr	r3, [sp, #12]
 80087a6:	3307      	adds	r3, #7
 80087a8:	f023 0307 	bic.w	r3, r3, #7
 80087ac:	3308      	adds	r3, #8
 80087ae:	9303      	str	r3, [sp, #12]
 80087b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b2:	443b      	add	r3, r7
 80087b4:	9309      	str	r3, [sp, #36]	; 0x24
 80087b6:	e767      	b.n	8008688 <_vfiprintf_r+0x94>
 80087b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80087bc:	460c      	mov	r4, r1
 80087be:	2001      	movs	r0, #1
 80087c0:	e7a5      	b.n	800870e <_vfiprintf_r+0x11a>
 80087c2:	2300      	movs	r3, #0
 80087c4:	3401      	adds	r4, #1
 80087c6:	9305      	str	r3, [sp, #20]
 80087c8:	4619      	mov	r1, r3
 80087ca:	f04f 0c0a 	mov.w	ip, #10
 80087ce:	4620      	mov	r0, r4
 80087d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087d4:	3a30      	subs	r2, #48	; 0x30
 80087d6:	2a09      	cmp	r2, #9
 80087d8:	d903      	bls.n	80087e2 <_vfiprintf_r+0x1ee>
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0c5      	beq.n	800876a <_vfiprintf_r+0x176>
 80087de:	9105      	str	r1, [sp, #20]
 80087e0:	e7c3      	b.n	800876a <_vfiprintf_r+0x176>
 80087e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80087e6:	4604      	mov	r4, r0
 80087e8:	2301      	movs	r3, #1
 80087ea:	e7f0      	b.n	80087ce <_vfiprintf_r+0x1da>
 80087ec:	ab03      	add	r3, sp, #12
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	462a      	mov	r2, r5
 80087f2:	4b16      	ldr	r3, [pc, #88]	; (800884c <_vfiprintf_r+0x258>)
 80087f4:	a904      	add	r1, sp, #16
 80087f6:	4630      	mov	r0, r6
 80087f8:	f7fd fda8 	bl	800634c <_printf_float>
 80087fc:	4607      	mov	r7, r0
 80087fe:	1c78      	adds	r0, r7, #1
 8008800:	d1d6      	bne.n	80087b0 <_vfiprintf_r+0x1bc>
 8008802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008804:	07d9      	lsls	r1, r3, #31
 8008806:	d405      	bmi.n	8008814 <_vfiprintf_r+0x220>
 8008808:	89ab      	ldrh	r3, [r5, #12]
 800880a:	059a      	lsls	r2, r3, #22
 800880c:	d402      	bmi.n	8008814 <_vfiprintf_r+0x220>
 800880e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008810:	f000 fab1 	bl	8008d76 <__retarget_lock_release_recursive>
 8008814:	89ab      	ldrh	r3, [r5, #12]
 8008816:	065b      	lsls	r3, r3, #25
 8008818:	f53f af12 	bmi.w	8008640 <_vfiprintf_r+0x4c>
 800881c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800881e:	e711      	b.n	8008644 <_vfiprintf_r+0x50>
 8008820:	ab03      	add	r3, sp, #12
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	462a      	mov	r2, r5
 8008826:	4b09      	ldr	r3, [pc, #36]	; (800884c <_vfiprintf_r+0x258>)
 8008828:	a904      	add	r1, sp, #16
 800882a:	4630      	mov	r0, r6
 800882c:	f7fe f832 	bl	8006894 <_printf_i>
 8008830:	e7e4      	b.n	80087fc <_vfiprintf_r+0x208>
 8008832:	bf00      	nop
 8008834:	08009900 	.word	0x08009900
 8008838:	08009920 	.word	0x08009920
 800883c:	080098e0 	.word	0x080098e0
 8008840:	080098cc 	.word	0x080098cc
 8008844:	080098d6 	.word	0x080098d6
 8008848:	0800634d 	.word	0x0800634d
 800884c:	080085cf 	.word	0x080085cf
 8008850:	080098d2 	.word	0x080098d2

08008854 <_sbrk_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4d06      	ldr	r5, [pc, #24]	; (8008870 <_sbrk_r+0x1c>)
 8008858:	2300      	movs	r3, #0
 800885a:	4604      	mov	r4, r0
 800885c:	4608      	mov	r0, r1
 800885e:	602b      	str	r3, [r5, #0]
 8008860:	f7f9 f9a8 	bl	8001bb4 <_sbrk>
 8008864:	1c43      	adds	r3, r0, #1
 8008866:	d102      	bne.n	800886e <_sbrk_r+0x1a>
 8008868:	682b      	ldr	r3, [r5, #0]
 800886a:	b103      	cbz	r3, 800886e <_sbrk_r+0x1a>
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	bd38      	pop	{r3, r4, r5, pc}
 8008870:	20000af4 	.word	0x20000af4

08008874 <__swbuf_r>:
 8008874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008876:	460e      	mov	r6, r1
 8008878:	4614      	mov	r4, r2
 800887a:	4605      	mov	r5, r0
 800887c:	b118      	cbz	r0, 8008886 <__swbuf_r+0x12>
 800887e:	6983      	ldr	r3, [r0, #24]
 8008880:	b90b      	cbnz	r3, 8008886 <__swbuf_r+0x12>
 8008882:	f000 f9d9 	bl	8008c38 <__sinit>
 8008886:	4b21      	ldr	r3, [pc, #132]	; (800890c <__swbuf_r+0x98>)
 8008888:	429c      	cmp	r4, r3
 800888a:	d12b      	bne.n	80088e4 <__swbuf_r+0x70>
 800888c:	686c      	ldr	r4, [r5, #4]
 800888e:	69a3      	ldr	r3, [r4, #24]
 8008890:	60a3      	str	r3, [r4, #8]
 8008892:	89a3      	ldrh	r3, [r4, #12]
 8008894:	071a      	lsls	r2, r3, #28
 8008896:	d52f      	bpl.n	80088f8 <__swbuf_r+0x84>
 8008898:	6923      	ldr	r3, [r4, #16]
 800889a:	b36b      	cbz	r3, 80088f8 <__swbuf_r+0x84>
 800889c:	6923      	ldr	r3, [r4, #16]
 800889e:	6820      	ldr	r0, [r4, #0]
 80088a0:	1ac0      	subs	r0, r0, r3
 80088a2:	6963      	ldr	r3, [r4, #20]
 80088a4:	b2f6      	uxtb	r6, r6
 80088a6:	4283      	cmp	r3, r0
 80088a8:	4637      	mov	r7, r6
 80088aa:	dc04      	bgt.n	80088b6 <__swbuf_r+0x42>
 80088ac:	4621      	mov	r1, r4
 80088ae:	4628      	mov	r0, r5
 80088b0:	f000 f92e 	bl	8008b10 <_fflush_r>
 80088b4:	bb30      	cbnz	r0, 8008904 <__swbuf_r+0x90>
 80088b6:	68a3      	ldr	r3, [r4, #8]
 80088b8:	3b01      	subs	r3, #1
 80088ba:	60a3      	str	r3, [r4, #8]
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	1c5a      	adds	r2, r3, #1
 80088c0:	6022      	str	r2, [r4, #0]
 80088c2:	701e      	strb	r6, [r3, #0]
 80088c4:	6963      	ldr	r3, [r4, #20]
 80088c6:	3001      	adds	r0, #1
 80088c8:	4283      	cmp	r3, r0
 80088ca:	d004      	beq.n	80088d6 <__swbuf_r+0x62>
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	07db      	lsls	r3, r3, #31
 80088d0:	d506      	bpl.n	80088e0 <__swbuf_r+0x6c>
 80088d2:	2e0a      	cmp	r6, #10
 80088d4:	d104      	bne.n	80088e0 <__swbuf_r+0x6c>
 80088d6:	4621      	mov	r1, r4
 80088d8:	4628      	mov	r0, r5
 80088da:	f000 f919 	bl	8008b10 <_fflush_r>
 80088de:	b988      	cbnz	r0, 8008904 <__swbuf_r+0x90>
 80088e0:	4638      	mov	r0, r7
 80088e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088e4:	4b0a      	ldr	r3, [pc, #40]	; (8008910 <__swbuf_r+0x9c>)
 80088e6:	429c      	cmp	r4, r3
 80088e8:	d101      	bne.n	80088ee <__swbuf_r+0x7a>
 80088ea:	68ac      	ldr	r4, [r5, #8]
 80088ec:	e7cf      	b.n	800888e <__swbuf_r+0x1a>
 80088ee:	4b09      	ldr	r3, [pc, #36]	; (8008914 <__swbuf_r+0xa0>)
 80088f0:	429c      	cmp	r4, r3
 80088f2:	bf08      	it	eq
 80088f4:	68ec      	ldreq	r4, [r5, #12]
 80088f6:	e7ca      	b.n	800888e <__swbuf_r+0x1a>
 80088f8:	4621      	mov	r1, r4
 80088fa:	4628      	mov	r0, r5
 80088fc:	f000 f80c 	bl	8008918 <__swsetup_r>
 8008900:	2800      	cmp	r0, #0
 8008902:	d0cb      	beq.n	800889c <__swbuf_r+0x28>
 8008904:	f04f 37ff 	mov.w	r7, #4294967295
 8008908:	e7ea      	b.n	80088e0 <__swbuf_r+0x6c>
 800890a:	bf00      	nop
 800890c:	08009900 	.word	0x08009900
 8008910:	08009920 	.word	0x08009920
 8008914:	080098e0 	.word	0x080098e0

08008918 <__swsetup_r>:
 8008918:	4b32      	ldr	r3, [pc, #200]	; (80089e4 <__swsetup_r+0xcc>)
 800891a:	b570      	push	{r4, r5, r6, lr}
 800891c:	681d      	ldr	r5, [r3, #0]
 800891e:	4606      	mov	r6, r0
 8008920:	460c      	mov	r4, r1
 8008922:	b125      	cbz	r5, 800892e <__swsetup_r+0x16>
 8008924:	69ab      	ldr	r3, [r5, #24]
 8008926:	b913      	cbnz	r3, 800892e <__swsetup_r+0x16>
 8008928:	4628      	mov	r0, r5
 800892a:	f000 f985 	bl	8008c38 <__sinit>
 800892e:	4b2e      	ldr	r3, [pc, #184]	; (80089e8 <__swsetup_r+0xd0>)
 8008930:	429c      	cmp	r4, r3
 8008932:	d10f      	bne.n	8008954 <__swsetup_r+0x3c>
 8008934:	686c      	ldr	r4, [r5, #4]
 8008936:	89a3      	ldrh	r3, [r4, #12]
 8008938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800893c:	0719      	lsls	r1, r3, #28
 800893e:	d42c      	bmi.n	800899a <__swsetup_r+0x82>
 8008940:	06dd      	lsls	r5, r3, #27
 8008942:	d411      	bmi.n	8008968 <__swsetup_r+0x50>
 8008944:	2309      	movs	r3, #9
 8008946:	6033      	str	r3, [r6, #0]
 8008948:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800894c:	81a3      	strh	r3, [r4, #12]
 800894e:	f04f 30ff 	mov.w	r0, #4294967295
 8008952:	e03e      	b.n	80089d2 <__swsetup_r+0xba>
 8008954:	4b25      	ldr	r3, [pc, #148]	; (80089ec <__swsetup_r+0xd4>)
 8008956:	429c      	cmp	r4, r3
 8008958:	d101      	bne.n	800895e <__swsetup_r+0x46>
 800895a:	68ac      	ldr	r4, [r5, #8]
 800895c:	e7eb      	b.n	8008936 <__swsetup_r+0x1e>
 800895e:	4b24      	ldr	r3, [pc, #144]	; (80089f0 <__swsetup_r+0xd8>)
 8008960:	429c      	cmp	r4, r3
 8008962:	bf08      	it	eq
 8008964:	68ec      	ldreq	r4, [r5, #12]
 8008966:	e7e6      	b.n	8008936 <__swsetup_r+0x1e>
 8008968:	0758      	lsls	r0, r3, #29
 800896a:	d512      	bpl.n	8008992 <__swsetup_r+0x7a>
 800896c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800896e:	b141      	cbz	r1, 8008982 <__swsetup_r+0x6a>
 8008970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008974:	4299      	cmp	r1, r3
 8008976:	d002      	beq.n	800897e <__swsetup_r+0x66>
 8008978:	4630      	mov	r0, r6
 800897a:	f7ff fc0b 	bl	8008194 <_free_r>
 800897e:	2300      	movs	r3, #0
 8008980:	6363      	str	r3, [r4, #52]	; 0x34
 8008982:	89a3      	ldrh	r3, [r4, #12]
 8008984:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008988:	81a3      	strh	r3, [r4, #12]
 800898a:	2300      	movs	r3, #0
 800898c:	6063      	str	r3, [r4, #4]
 800898e:	6923      	ldr	r3, [r4, #16]
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	89a3      	ldrh	r3, [r4, #12]
 8008994:	f043 0308 	orr.w	r3, r3, #8
 8008998:	81a3      	strh	r3, [r4, #12]
 800899a:	6923      	ldr	r3, [r4, #16]
 800899c:	b94b      	cbnz	r3, 80089b2 <__swsetup_r+0x9a>
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089a8:	d003      	beq.n	80089b2 <__swsetup_r+0x9a>
 80089aa:	4621      	mov	r1, r4
 80089ac:	4630      	mov	r0, r6
 80089ae:	f000 fa07 	bl	8008dc0 <__smakebuf_r>
 80089b2:	89a0      	ldrh	r0, [r4, #12]
 80089b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089b8:	f010 0301 	ands.w	r3, r0, #1
 80089bc:	d00a      	beq.n	80089d4 <__swsetup_r+0xbc>
 80089be:	2300      	movs	r3, #0
 80089c0:	60a3      	str	r3, [r4, #8]
 80089c2:	6963      	ldr	r3, [r4, #20]
 80089c4:	425b      	negs	r3, r3
 80089c6:	61a3      	str	r3, [r4, #24]
 80089c8:	6923      	ldr	r3, [r4, #16]
 80089ca:	b943      	cbnz	r3, 80089de <__swsetup_r+0xc6>
 80089cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089d0:	d1ba      	bne.n	8008948 <__swsetup_r+0x30>
 80089d2:	bd70      	pop	{r4, r5, r6, pc}
 80089d4:	0781      	lsls	r1, r0, #30
 80089d6:	bf58      	it	pl
 80089d8:	6963      	ldrpl	r3, [r4, #20]
 80089da:	60a3      	str	r3, [r4, #8]
 80089dc:	e7f4      	b.n	80089c8 <__swsetup_r+0xb0>
 80089de:	2000      	movs	r0, #0
 80089e0:	e7f7      	b.n	80089d2 <__swsetup_r+0xba>
 80089e2:	bf00      	nop
 80089e4:	20000010 	.word	0x20000010
 80089e8:	08009900 	.word	0x08009900
 80089ec:	08009920 	.word	0x08009920
 80089f0:	080098e0 	.word	0x080098e0

080089f4 <abort>:
 80089f4:	b508      	push	{r3, lr}
 80089f6:	2006      	movs	r0, #6
 80089f8:	f000 faa8 	bl	8008f4c <raise>
 80089fc:	2001      	movs	r0, #1
 80089fe:	f7f9 f861 	bl	8001ac4 <_exit>
	...

08008a04 <__sflush_r>:
 8008a04:	898a      	ldrh	r2, [r1, #12]
 8008a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0a:	4605      	mov	r5, r0
 8008a0c:	0710      	lsls	r0, r2, #28
 8008a0e:	460c      	mov	r4, r1
 8008a10:	d458      	bmi.n	8008ac4 <__sflush_r+0xc0>
 8008a12:	684b      	ldr	r3, [r1, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	dc05      	bgt.n	8008a24 <__sflush_r+0x20>
 8008a18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	dc02      	bgt.n	8008a24 <__sflush_r+0x20>
 8008a1e:	2000      	movs	r0, #0
 8008a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a26:	2e00      	cmp	r6, #0
 8008a28:	d0f9      	beq.n	8008a1e <__sflush_r+0x1a>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a30:	682f      	ldr	r7, [r5, #0]
 8008a32:	602b      	str	r3, [r5, #0]
 8008a34:	d032      	beq.n	8008a9c <__sflush_r+0x98>
 8008a36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a38:	89a3      	ldrh	r3, [r4, #12]
 8008a3a:	075a      	lsls	r2, r3, #29
 8008a3c:	d505      	bpl.n	8008a4a <__sflush_r+0x46>
 8008a3e:	6863      	ldr	r3, [r4, #4]
 8008a40:	1ac0      	subs	r0, r0, r3
 8008a42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a44:	b10b      	cbz	r3, 8008a4a <__sflush_r+0x46>
 8008a46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a48:	1ac0      	subs	r0, r0, r3
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a50:	6a21      	ldr	r1, [r4, #32]
 8008a52:	4628      	mov	r0, r5
 8008a54:	47b0      	blx	r6
 8008a56:	1c43      	adds	r3, r0, #1
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	d106      	bne.n	8008a6a <__sflush_r+0x66>
 8008a5c:	6829      	ldr	r1, [r5, #0]
 8008a5e:	291d      	cmp	r1, #29
 8008a60:	d82c      	bhi.n	8008abc <__sflush_r+0xb8>
 8008a62:	4a2a      	ldr	r2, [pc, #168]	; (8008b0c <__sflush_r+0x108>)
 8008a64:	40ca      	lsrs	r2, r1
 8008a66:	07d6      	lsls	r6, r2, #31
 8008a68:	d528      	bpl.n	8008abc <__sflush_r+0xb8>
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	6062      	str	r2, [r4, #4]
 8008a6e:	04d9      	lsls	r1, r3, #19
 8008a70:	6922      	ldr	r2, [r4, #16]
 8008a72:	6022      	str	r2, [r4, #0]
 8008a74:	d504      	bpl.n	8008a80 <__sflush_r+0x7c>
 8008a76:	1c42      	adds	r2, r0, #1
 8008a78:	d101      	bne.n	8008a7e <__sflush_r+0x7a>
 8008a7a:	682b      	ldr	r3, [r5, #0]
 8008a7c:	b903      	cbnz	r3, 8008a80 <__sflush_r+0x7c>
 8008a7e:	6560      	str	r0, [r4, #84]	; 0x54
 8008a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a82:	602f      	str	r7, [r5, #0]
 8008a84:	2900      	cmp	r1, #0
 8008a86:	d0ca      	beq.n	8008a1e <__sflush_r+0x1a>
 8008a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a8c:	4299      	cmp	r1, r3
 8008a8e:	d002      	beq.n	8008a96 <__sflush_r+0x92>
 8008a90:	4628      	mov	r0, r5
 8008a92:	f7ff fb7f 	bl	8008194 <_free_r>
 8008a96:	2000      	movs	r0, #0
 8008a98:	6360      	str	r0, [r4, #52]	; 0x34
 8008a9a:	e7c1      	b.n	8008a20 <__sflush_r+0x1c>
 8008a9c:	6a21      	ldr	r1, [r4, #32]
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	47b0      	blx	r6
 8008aa4:	1c41      	adds	r1, r0, #1
 8008aa6:	d1c7      	bne.n	8008a38 <__sflush_r+0x34>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d0c4      	beq.n	8008a38 <__sflush_r+0x34>
 8008aae:	2b1d      	cmp	r3, #29
 8008ab0:	d001      	beq.n	8008ab6 <__sflush_r+0xb2>
 8008ab2:	2b16      	cmp	r3, #22
 8008ab4:	d101      	bne.n	8008aba <__sflush_r+0xb6>
 8008ab6:	602f      	str	r7, [r5, #0]
 8008ab8:	e7b1      	b.n	8008a1e <__sflush_r+0x1a>
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ac0:	81a3      	strh	r3, [r4, #12]
 8008ac2:	e7ad      	b.n	8008a20 <__sflush_r+0x1c>
 8008ac4:	690f      	ldr	r7, [r1, #16]
 8008ac6:	2f00      	cmp	r7, #0
 8008ac8:	d0a9      	beq.n	8008a1e <__sflush_r+0x1a>
 8008aca:	0793      	lsls	r3, r2, #30
 8008acc:	680e      	ldr	r6, [r1, #0]
 8008ace:	bf08      	it	eq
 8008ad0:	694b      	ldreq	r3, [r1, #20]
 8008ad2:	600f      	str	r7, [r1, #0]
 8008ad4:	bf18      	it	ne
 8008ad6:	2300      	movne	r3, #0
 8008ad8:	eba6 0807 	sub.w	r8, r6, r7
 8008adc:	608b      	str	r3, [r1, #8]
 8008ade:	f1b8 0f00 	cmp.w	r8, #0
 8008ae2:	dd9c      	ble.n	8008a1e <__sflush_r+0x1a>
 8008ae4:	6a21      	ldr	r1, [r4, #32]
 8008ae6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ae8:	4643      	mov	r3, r8
 8008aea:	463a      	mov	r2, r7
 8008aec:	4628      	mov	r0, r5
 8008aee:	47b0      	blx	r6
 8008af0:	2800      	cmp	r0, #0
 8008af2:	dc06      	bgt.n	8008b02 <__sflush_r+0xfe>
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008afa:	81a3      	strh	r3, [r4, #12]
 8008afc:	f04f 30ff 	mov.w	r0, #4294967295
 8008b00:	e78e      	b.n	8008a20 <__sflush_r+0x1c>
 8008b02:	4407      	add	r7, r0
 8008b04:	eba8 0800 	sub.w	r8, r8, r0
 8008b08:	e7e9      	b.n	8008ade <__sflush_r+0xda>
 8008b0a:	bf00      	nop
 8008b0c:	20400001 	.word	0x20400001

08008b10 <_fflush_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	690b      	ldr	r3, [r1, #16]
 8008b14:	4605      	mov	r5, r0
 8008b16:	460c      	mov	r4, r1
 8008b18:	b913      	cbnz	r3, 8008b20 <_fflush_r+0x10>
 8008b1a:	2500      	movs	r5, #0
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	b118      	cbz	r0, 8008b2a <_fflush_r+0x1a>
 8008b22:	6983      	ldr	r3, [r0, #24]
 8008b24:	b90b      	cbnz	r3, 8008b2a <_fflush_r+0x1a>
 8008b26:	f000 f887 	bl	8008c38 <__sinit>
 8008b2a:	4b14      	ldr	r3, [pc, #80]	; (8008b7c <_fflush_r+0x6c>)
 8008b2c:	429c      	cmp	r4, r3
 8008b2e:	d11b      	bne.n	8008b68 <_fflush_r+0x58>
 8008b30:	686c      	ldr	r4, [r5, #4]
 8008b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d0ef      	beq.n	8008b1a <_fflush_r+0xa>
 8008b3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b3c:	07d0      	lsls	r0, r2, #31
 8008b3e:	d404      	bmi.n	8008b4a <_fflush_r+0x3a>
 8008b40:	0599      	lsls	r1, r3, #22
 8008b42:	d402      	bmi.n	8008b4a <_fflush_r+0x3a>
 8008b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b46:	f000 f915 	bl	8008d74 <__retarget_lock_acquire_recursive>
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	4621      	mov	r1, r4
 8008b4e:	f7ff ff59 	bl	8008a04 <__sflush_r>
 8008b52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b54:	07da      	lsls	r2, r3, #31
 8008b56:	4605      	mov	r5, r0
 8008b58:	d4e0      	bmi.n	8008b1c <_fflush_r+0xc>
 8008b5a:	89a3      	ldrh	r3, [r4, #12]
 8008b5c:	059b      	lsls	r3, r3, #22
 8008b5e:	d4dd      	bmi.n	8008b1c <_fflush_r+0xc>
 8008b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b62:	f000 f908 	bl	8008d76 <__retarget_lock_release_recursive>
 8008b66:	e7d9      	b.n	8008b1c <_fflush_r+0xc>
 8008b68:	4b05      	ldr	r3, [pc, #20]	; (8008b80 <_fflush_r+0x70>)
 8008b6a:	429c      	cmp	r4, r3
 8008b6c:	d101      	bne.n	8008b72 <_fflush_r+0x62>
 8008b6e:	68ac      	ldr	r4, [r5, #8]
 8008b70:	e7df      	b.n	8008b32 <_fflush_r+0x22>
 8008b72:	4b04      	ldr	r3, [pc, #16]	; (8008b84 <_fflush_r+0x74>)
 8008b74:	429c      	cmp	r4, r3
 8008b76:	bf08      	it	eq
 8008b78:	68ec      	ldreq	r4, [r5, #12]
 8008b7a:	e7da      	b.n	8008b32 <_fflush_r+0x22>
 8008b7c:	08009900 	.word	0x08009900
 8008b80:	08009920 	.word	0x08009920
 8008b84:	080098e0 	.word	0x080098e0

08008b88 <std>:
 8008b88:	2300      	movs	r3, #0
 8008b8a:	b510      	push	{r4, lr}
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8008b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b96:	6083      	str	r3, [r0, #8]
 8008b98:	8181      	strh	r1, [r0, #12]
 8008b9a:	6643      	str	r3, [r0, #100]	; 0x64
 8008b9c:	81c2      	strh	r2, [r0, #14]
 8008b9e:	6183      	str	r3, [r0, #24]
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	2208      	movs	r2, #8
 8008ba4:	305c      	adds	r0, #92	; 0x5c
 8008ba6:	f7fd fb29 	bl	80061fc <memset>
 8008baa:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <std+0x38>)
 8008bac:	6263      	str	r3, [r4, #36]	; 0x24
 8008bae:	4b05      	ldr	r3, [pc, #20]	; (8008bc4 <std+0x3c>)
 8008bb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bb2:	4b05      	ldr	r3, [pc, #20]	; (8008bc8 <std+0x40>)
 8008bb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008bb6:	4b05      	ldr	r3, [pc, #20]	; (8008bcc <std+0x44>)
 8008bb8:	6224      	str	r4, [r4, #32]
 8008bba:	6323      	str	r3, [r4, #48]	; 0x30
 8008bbc:	bd10      	pop	{r4, pc}
 8008bbe:	bf00      	nop
 8008bc0:	08008f85 	.word	0x08008f85
 8008bc4:	08008fa7 	.word	0x08008fa7
 8008bc8:	08008fdf 	.word	0x08008fdf
 8008bcc:	08009003 	.word	0x08009003

08008bd0 <_cleanup_r>:
 8008bd0:	4901      	ldr	r1, [pc, #4]	; (8008bd8 <_cleanup_r+0x8>)
 8008bd2:	f000 b8af 	b.w	8008d34 <_fwalk_reent>
 8008bd6:	bf00      	nop
 8008bd8:	08008b11 	.word	0x08008b11

08008bdc <__sfmoreglue>:
 8008bdc:	b570      	push	{r4, r5, r6, lr}
 8008bde:	1e4a      	subs	r2, r1, #1
 8008be0:	2568      	movs	r5, #104	; 0x68
 8008be2:	4355      	muls	r5, r2
 8008be4:	460e      	mov	r6, r1
 8008be6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008bea:	f7ff fb23 	bl	8008234 <_malloc_r>
 8008bee:	4604      	mov	r4, r0
 8008bf0:	b140      	cbz	r0, 8008c04 <__sfmoreglue+0x28>
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	e9c0 1600 	strd	r1, r6, [r0]
 8008bf8:	300c      	adds	r0, #12
 8008bfa:	60a0      	str	r0, [r4, #8]
 8008bfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c00:	f7fd fafc 	bl	80061fc <memset>
 8008c04:	4620      	mov	r0, r4
 8008c06:	bd70      	pop	{r4, r5, r6, pc}

08008c08 <__sfp_lock_acquire>:
 8008c08:	4801      	ldr	r0, [pc, #4]	; (8008c10 <__sfp_lock_acquire+0x8>)
 8008c0a:	f000 b8b3 	b.w	8008d74 <__retarget_lock_acquire_recursive>
 8008c0e:	bf00      	nop
 8008c10:	20000af0 	.word	0x20000af0

08008c14 <__sfp_lock_release>:
 8008c14:	4801      	ldr	r0, [pc, #4]	; (8008c1c <__sfp_lock_release+0x8>)
 8008c16:	f000 b8ae 	b.w	8008d76 <__retarget_lock_release_recursive>
 8008c1a:	bf00      	nop
 8008c1c:	20000af0 	.word	0x20000af0

08008c20 <__sinit_lock_acquire>:
 8008c20:	4801      	ldr	r0, [pc, #4]	; (8008c28 <__sinit_lock_acquire+0x8>)
 8008c22:	f000 b8a7 	b.w	8008d74 <__retarget_lock_acquire_recursive>
 8008c26:	bf00      	nop
 8008c28:	20000aeb 	.word	0x20000aeb

08008c2c <__sinit_lock_release>:
 8008c2c:	4801      	ldr	r0, [pc, #4]	; (8008c34 <__sinit_lock_release+0x8>)
 8008c2e:	f000 b8a2 	b.w	8008d76 <__retarget_lock_release_recursive>
 8008c32:	bf00      	nop
 8008c34:	20000aeb 	.word	0x20000aeb

08008c38 <__sinit>:
 8008c38:	b510      	push	{r4, lr}
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	f7ff fff0 	bl	8008c20 <__sinit_lock_acquire>
 8008c40:	69a3      	ldr	r3, [r4, #24]
 8008c42:	b11b      	cbz	r3, 8008c4c <__sinit+0x14>
 8008c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c48:	f7ff bff0 	b.w	8008c2c <__sinit_lock_release>
 8008c4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c50:	6523      	str	r3, [r4, #80]	; 0x50
 8008c52:	4b13      	ldr	r3, [pc, #76]	; (8008ca0 <__sinit+0x68>)
 8008c54:	4a13      	ldr	r2, [pc, #76]	; (8008ca4 <__sinit+0x6c>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c5a:	42a3      	cmp	r3, r4
 8008c5c:	bf04      	itt	eq
 8008c5e:	2301      	moveq	r3, #1
 8008c60:	61a3      	streq	r3, [r4, #24]
 8008c62:	4620      	mov	r0, r4
 8008c64:	f000 f820 	bl	8008ca8 <__sfp>
 8008c68:	6060      	str	r0, [r4, #4]
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f000 f81c 	bl	8008ca8 <__sfp>
 8008c70:	60a0      	str	r0, [r4, #8]
 8008c72:	4620      	mov	r0, r4
 8008c74:	f000 f818 	bl	8008ca8 <__sfp>
 8008c78:	2200      	movs	r2, #0
 8008c7a:	60e0      	str	r0, [r4, #12]
 8008c7c:	2104      	movs	r1, #4
 8008c7e:	6860      	ldr	r0, [r4, #4]
 8008c80:	f7ff ff82 	bl	8008b88 <std>
 8008c84:	68a0      	ldr	r0, [r4, #8]
 8008c86:	2201      	movs	r2, #1
 8008c88:	2109      	movs	r1, #9
 8008c8a:	f7ff ff7d 	bl	8008b88 <std>
 8008c8e:	68e0      	ldr	r0, [r4, #12]
 8008c90:	2202      	movs	r2, #2
 8008c92:	2112      	movs	r1, #18
 8008c94:	f7ff ff78 	bl	8008b88 <std>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	61a3      	str	r3, [r4, #24]
 8008c9c:	e7d2      	b.n	8008c44 <__sinit+0xc>
 8008c9e:	bf00      	nop
 8008ca0:	08009504 	.word	0x08009504
 8008ca4:	08008bd1 	.word	0x08008bd1

08008ca8 <__sfp>:
 8008ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008caa:	4607      	mov	r7, r0
 8008cac:	f7ff ffac 	bl	8008c08 <__sfp_lock_acquire>
 8008cb0:	4b1e      	ldr	r3, [pc, #120]	; (8008d2c <__sfp+0x84>)
 8008cb2:	681e      	ldr	r6, [r3, #0]
 8008cb4:	69b3      	ldr	r3, [r6, #24]
 8008cb6:	b913      	cbnz	r3, 8008cbe <__sfp+0x16>
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f7ff ffbd 	bl	8008c38 <__sinit>
 8008cbe:	3648      	adds	r6, #72	; 0x48
 8008cc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	d503      	bpl.n	8008cd0 <__sfp+0x28>
 8008cc8:	6833      	ldr	r3, [r6, #0]
 8008cca:	b30b      	cbz	r3, 8008d10 <__sfp+0x68>
 8008ccc:	6836      	ldr	r6, [r6, #0]
 8008cce:	e7f7      	b.n	8008cc0 <__sfp+0x18>
 8008cd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cd4:	b9d5      	cbnz	r5, 8008d0c <__sfp+0x64>
 8008cd6:	4b16      	ldr	r3, [pc, #88]	; (8008d30 <__sfp+0x88>)
 8008cd8:	60e3      	str	r3, [r4, #12]
 8008cda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cde:	6665      	str	r5, [r4, #100]	; 0x64
 8008ce0:	f000 f847 	bl	8008d72 <__retarget_lock_init_recursive>
 8008ce4:	f7ff ff96 	bl	8008c14 <__sfp_lock_release>
 8008ce8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008cec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008cf0:	6025      	str	r5, [r4, #0]
 8008cf2:	61a5      	str	r5, [r4, #24]
 8008cf4:	2208      	movs	r2, #8
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008cfc:	f7fd fa7e 	bl	80061fc <memset>
 8008d00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d08:	4620      	mov	r0, r4
 8008d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d0c:	3468      	adds	r4, #104	; 0x68
 8008d0e:	e7d9      	b.n	8008cc4 <__sfp+0x1c>
 8008d10:	2104      	movs	r1, #4
 8008d12:	4638      	mov	r0, r7
 8008d14:	f7ff ff62 	bl	8008bdc <__sfmoreglue>
 8008d18:	4604      	mov	r4, r0
 8008d1a:	6030      	str	r0, [r6, #0]
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	d1d5      	bne.n	8008ccc <__sfp+0x24>
 8008d20:	f7ff ff78 	bl	8008c14 <__sfp_lock_release>
 8008d24:	230c      	movs	r3, #12
 8008d26:	603b      	str	r3, [r7, #0]
 8008d28:	e7ee      	b.n	8008d08 <__sfp+0x60>
 8008d2a:	bf00      	nop
 8008d2c:	08009504 	.word	0x08009504
 8008d30:	ffff0001 	.word	0xffff0001

08008d34 <_fwalk_reent>:
 8008d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d38:	4606      	mov	r6, r0
 8008d3a:	4688      	mov	r8, r1
 8008d3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d40:	2700      	movs	r7, #0
 8008d42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d46:	f1b9 0901 	subs.w	r9, r9, #1
 8008d4a:	d505      	bpl.n	8008d58 <_fwalk_reent+0x24>
 8008d4c:	6824      	ldr	r4, [r4, #0]
 8008d4e:	2c00      	cmp	r4, #0
 8008d50:	d1f7      	bne.n	8008d42 <_fwalk_reent+0xe>
 8008d52:	4638      	mov	r0, r7
 8008d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d58:	89ab      	ldrh	r3, [r5, #12]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d907      	bls.n	8008d6e <_fwalk_reent+0x3a>
 8008d5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d62:	3301      	adds	r3, #1
 8008d64:	d003      	beq.n	8008d6e <_fwalk_reent+0x3a>
 8008d66:	4629      	mov	r1, r5
 8008d68:	4630      	mov	r0, r6
 8008d6a:	47c0      	blx	r8
 8008d6c:	4307      	orrs	r7, r0
 8008d6e:	3568      	adds	r5, #104	; 0x68
 8008d70:	e7e9      	b.n	8008d46 <_fwalk_reent+0x12>

08008d72 <__retarget_lock_init_recursive>:
 8008d72:	4770      	bx	lr

08008d74 <__retarget_lock_acquire_recursive>:
 8008d74:	4770      	bx	lr

08008d76 <__retarget_lock_release_recursive>:
 8008d76:	4770      	bx	lr

08008d78 <__swhatbuf_r>:
 8008d78:	b570      	push	{r4, r5, r6, lr}
 8008d7a:	460e      	mov	r6, r1
 8008d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d80:	2900      	cmp	r1, #0
 8008d82:	b096      	sub	sp, #88	; 0x58
 8008d84:	4614      	mov	r4, r2
 8008d86:	461d      	mov	r5, r3
 8008d88:	da07      	bge.n	8008d9a <__swhatbuf_r+0x22>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	602b      	str	r3, [r5, #0]
 8008d8e:	89b3      	ldrh	r3, [r6, #12]
 8008d90:	061a      	lsls	r2, r3, #24
 8008d92:	d410      	bmi.n	8008db6 <__swhatbuf_r+0x3e>
 8008d94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d98:	e00e      	b.n	8008db8 <__swhatbuf_r+0x40>
 8008d9a:	466a      	mov	r2, sp
 8008d9c:	f000 f964 	bl	8009068 <_fstat_r>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	dbf2      	blt.n	8008d8a <__swhatbuf_r+0x12>
 8008da4:	9a01      	ldr	r2, [sp, #4]
 8008da6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008daa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008dae:	425a      	negs	r2, r3
 8008db0:	415a      	adcs	r2, r3
 8008db2:	602a      	str	r2, [r5, #0]
 8008db4:	e7ee      	b.n	8008d94 <__swhatbuf_r+0x1c>
 8008db6:	2340      	movs	r3, #64	; 0x40
 8008db8:	2000      	movs	r0, #0
 8008dba:	6023      	str	r3, [r4, #0]
 8008dbc:	b016      	add	sp, #88	; 0x58
 8008dbe:	bd70      	pop	{r4, r5, r6, pc}

08008dc0 <__smakebuf_r>:
 8008dc0:	898b      	ldrh	r3, [r1, #12]
 8008dc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008dc4:	079d      	lsls	r5, r3, #30
 8008dc6:	4606      	mov	r6, r0
 8008dc8:	460c      	mov	r4, r1
 8008dca:	d507      	bpl.n	8008ddc <__smakebuf_r+0x1c>
 8008dcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	6123      	str	r3, [r4, #16]
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	6163      	str	r3, [r4, #20]
 8008dd8:	b002      	add	sp, #8
 8008dda:	bd70      	pop	{r4, r5, r6, pc}
 8008ddc:	ab01      	add	r3, sp, #4
 8008dde:	466a      	mov	r2, sp
 8008de0:	f7ff ffca 	bl	8008d78 <__swhatbuf_r>
 8008de4:	9900      	ldr	r1, [sp, #0]
 8008de6:	4605      	mov	r5, r0
 8008de8:	4630      	mov	r0, r6
 8008dea:	f7ff fa23 	bl	8008234 <_malloc_r>
 8008dee:	b948      	cbnz	r0, 8008e04 <__smakebuf_r+0x44>
 8008df0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008df4:	059a      	lsls	r2, r3, #22
 8008df6:	d4ef      	bmi.n	8008dd8 <__smakebuf_r+0x18>
 8008df8:	f023 0303 	bic.w	r3, r3, #3
 8008dfc:	f043 0302 	orr.w	r3, r3, #2
 8008e00:	81a3      	strh	r3, [r4, #12]
 8008e02:	e7e3      	b.n	8008dcc <__smakebuf_r+0xc>
 8008e04:	4b0d      	ldr	r3, [pc, #52]	; (8008e3c <__smakebuf_r+0x7c>)
 8008e06:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e08:	89a3      	ldrh	r3, [r4, #12]
 8008e0a:	6020      	str	r0, [r4, #0]
 8008e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e10:	81a3      	strh	r3, [r4, #12]
 8008e12:	9b00      	ldr	r3, [sp, #0]
 8008e14:	6163      	str	r3, [r4, #20]
 8008e16:	9b01      	ldr	r3, [sp, #4]
 8008e18:	6120      	str	r0, [r4, #16]
 8008e1a:	b15b      	cbz	r3, 8008e34 <__smakebuf_r+0x74>
 8008e1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e20:	4630      	mov	r0, r6
 8008e22:	f000 f933 	bl	800908c <_isatty_r>
 8008e26:	b128      	cbz	r0, 8008e34 <__smakebuf_r+0x74>
 8008e28:	89a3      	ldrh	r3, [r4, #12]
 8008e2a:	f023 0303 	bic.w	r3, r3, #3
 8008e2e:	f043 0301 	orr.w	r3, r3, #1
 8008e32:	81a3      	strh	r3, [r4, #12]
 8008e34:	89a0      	ldrh	r0, [r4, #12]
 8008e36:	4305      	orrs	r5, r0
 8008e38:	81a5      	strh	r5, [r4, #12]
 8008e3a:	e7cd      	b.n	8008dd8 <__smakebuf_r+0x18>
 8008e3c:	08008bd1 	.word	0x08008bd1

08008e40 <__ascii_mbtowc>:
 8008e40:	b082      	sub	sp, #8
 8008e42:	b901      	cbnz	r1, 8008e46 <__ascii_mbtowc+0x6>
 8008e44:	a901      	add	r1, sp, #4
 8008e46:	b142      	cbz	r2, 8008e5a <__ascii_mbtowc+0x1a>
 8008e48:	b14b      	cbz	r3, 8008e5e <__ascii_mbtowc+0x1e>
 8008e4a:	7813      	ldrb	r3, [r2, #0]
 8008e4c:	600b      	str	r3, [r1, #0]
 8008e4e:	7812      	ldrb	r2, [r2, #0]
 8008e50:	1e10      	subs	r0, r2, #0
 8008e52:	bf18      	it	ne
 8008e54:	2001      	movne	r0, #1
 8008e56:	b002      	add	sp, #8
 8008e58:	4770      	bx	lr
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	e7fb      	b.n	8008e56 <__ascii_mbtowc+0x16>
 8008e5e:	f06f 0001 	mvn.w	r0, #1
 8008e62:	e7f8      	b.n	8008e56 <__ascii_mbtowc+0x16>

08008e64 <memmove>:
 8008e64:	4288      	cmp	r0, r1
 8008e66:	b510      	push	{r4, lr}
 8008e68:	eb01 0402 	add.w	r4, r1, r2
 8008e6c:	d902      	bls.n	8008e74 <memmove+0x10>
 8008e6e:	4284      	cmp	r4, r0
 8008e70:	4623      	mov	r3, r4
 8008e72:	d807      	bhi.n	8008e84 <memmove+0x20>
 8008e74:	1e43      	subs	r3, r0, #1
 8008e76:	42a1      	cmp	r1, r4
 8008e78:	d008      	beq.n	8008e8c <memmove+0x28>
 8008e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e82:	e7f8      	b.n	8008e76 <memmove+0x12>
 8008e84:	4402      	add	r2, r0
 8008e86:	4601      	mov	r1, r0
 8008e88:	428a      	cmp	r2, r1
 8008e8a:	d100      	bne.n	8008e8e <memmove+0x2a>
 8008e8c:	bd10      	pop	{r4, pc}
 8008e8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e96:	e7f7      	b.n	8008e88 <memmove+0x24>

08008e98 <__malloc_lock>:
 8008e98:	4801      	ldr	r0, [pc, #4]	; (8008ea0 <__malloc_lock+0x8>)
 8008e9a:	f7ff bf6b 	b.w	8008d74 <__retarget_lock_acquire_recursive>
 8008e9e:	bf00      	nop
 8008ea0:	20000aec 	.word	0x20000aec

08008ea4 <__malloc_unlock>:
 8008ea4:	4801      	ldr	r0, [pc, #4]	; (8008eac <__malloc_unlock+0x8>)
 8008ea6:	f7ff bf66 	b.w	8008d76 <__retarget_lock_release_recursive>
 8008eaa:	bf00      	nop
 8008eac:	20000aec 	.word	0x20000aec

08008eb0 <_realloc_r>:
 8008eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb2:	4607      	mov	r7, r0
 8008eb4:	4614      	mov	r4, r2
 8008eb6:	460e      	mov	r6, r1
 8008eb8:	b921      	cbnz	r1, 8008ec4 <_realloc_r+0x14>
 8008eba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	f7ff b9b8 	b.w	8008234 <_malloc_r>
 8008ec4:	b922      	cbnz	r2, 8008ed0 <_realloc_r+0x20>
 8008ec6:	f7ff f965 	bl	8008194 <_free_r>
 8008eca:	4625      	mov	r5, r4
 8008ecc:	4628      	mov	r0, r5
 8008ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ed0:	f000 f8fe 	bl	80090d0 <_malloc_usable_size_r>
 8008ed4:	42a0      	cmp	r0, r4
 8008ed6:	d20f      	bcs.n	8008ef8 <_realloc_r+0x48>
 8008ed8:	4621      	mov	r1, r4
 8008eda:	4638      	mov	r0, r7
 8008edc:	f7ff f9aa 	bl	8008234 <_malloc_r>
 8008ee0:	4605      	mov	r5, r0
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d0f2      	beq.n	8008ecc <_realloc_r+0x1c>
 8008ee6:	4631      	mov	r1, r6
 8008ee8:	4622      	mov	r2, r4
 8008eea:	f7fe fdb7 	bl	8007a5c <memcpy>
 8008eee:	4631      	mov	r1, r6
 8008ef0:	4638      	mov	r0, r7
 8008ef2:	f7ff f94f 	bl	8008194 <_free_r>
 8008ef6:	e7e9      	b.n	8008ecc <_realloc_r+0x1c>
 8008ef8:	4635      	mov	r5, r6
 8008efa:	e7e7      	b.n	8008ecc <_realloc_r+0x1c>

08008efc <_raise_r>:
 8008efc:	291f      	cmp	r1, #31
 8008efe:	b538      	push	{r3, r4, r5, lr}
 8008f00:	4604      	mov	r4, r0
 8008f02:	460d      	mov	r5, r1
 8008f04:	d904      	bls.n	8008f10 <_raise_r+0x14>
 8008f06:	2316      	movs	r3, #22
 8008f08:	6003      	str	r3, [r0, #0]
 8008f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f12:	b112      	cbz	r2, 8008f1a <_raise_r+0x1e>
 8008f14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f18:	b94b      	cbnz	r3, 8008f2e <_raise_r+0x32>
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 f830 	bl	8008f80 <_getpid_r>
 8008f20:	462a      	mov	r2, r5
 8008f22:	4601      	mov	r1, r0
 8008f24:	4620      	mov	r0, r4
 8008f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f2a:	f000 b817 	b.w	8008f5c <_kill_r>
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d00a      	beq.n	8008f48 <_raise_r+0x4c>
 8008f32:	1c59      	adds	r1, r3, #1
 8008f34:	d103      	bne.n	8008f3e <_raise_r+0x42>
 8008f36:	2316      	movs	r3, #22
 8008f38:	6003      	str	r3, [r0, #0]
 8008f3a:	2001      	movs	r0, #1
 8008f3c:	e7e7      	b.n	8008f0e <_raise_r+0x12>
 8008f3e:	2400      	movs	r4, #0
 8008f40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f44:	4628      	mov	r0, r5
 8008f46:	4798      	blx	r3
 8008f48:	2000      	movs	r0, #0
 8008f4a:	e7e0      	b.n	8008f0e <_raise_r+0x12>

08008f4c <raise>:
 8008f4c:	4b02      	ldr	r3, [pc, #8]	; (8008f58 <raise+0xc>)
 8008f4e:	4601      	mov	r1, r0
 8008f50:	6818      	ldr	r0, [r3, #0]
 8008f52:	f7ff bfd3 	b.w	8008efc <_raise_r>
 8008f56:	bf00      	nop
 8008f58:	20000010 	.word	0x20000010

08008f5c <_kill_r>:
 8008f5c:	b538      	push	{r3, r4, r5, lr}
 8008f5e:	4d07      	ldr	r5, [pc, #28]	; (8008f7c <_kill_r+0x20>)
 8008f60:	2300      	movs	r3, #0
 8008f62:	4604      	mov	r4, r0
 8008f64:	4608      	mov	r0, r1
 8008f66:	4611      	mov	r1, r2
 8008f68:	602b      	str	r3, [r5, #0]
 8008f6a:	f7f8 fd9b 	bl	8001aa4 <_kill>
 8008f6e:	1c43      	adds	r3, r0, #1
 8008f70:	d102      	bne.n	8008f78 <_kill_r+0x1c>
 8008f72:	682b      	ldr	r3, [r5, #0]
 8008f74:	b103      	cbz	r3, 8008f78 <_kill_r+0x1c>
 8008f76:	6023      	str	r3, [r4, #0]
 8008f78:	bd38      	pop	{r3, r4, r5, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000af4 	.word	0x20000af4

08008f80 <_getpid_r>:
 8008f80:	f7f8 bd88 	b.w	8001a94 <_getpid>

08008f84 <__sread>:
 8008f84:	b510      	push	{r4, lr}
 8008f86:	460c      	mov	r4, r1
 8008f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f8c:	f000 f8a8 	bl	80090e0 <_read_r>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	bfab      	itete	ge
 8008f94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f96:	89a3      	ldrhlt	r3, [r4, #12]
 8008f98:	181b      	addge	r3, r3, r0
 8008f9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f9e:	bfac      	ite	ge
 8008fa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fa2:	81a3      	strhlt	r3, [r4, #12]
 8008fa4:	bd10      	pop	{r4, pc}

08008fa6 <__swrite>:
 8008fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008faa:	461f      	mov	r7, r3
 8008fac:	898b      	ldrh	r3, [r1, #12]
 8008fae:	05db      	lsls	r3, r3, #23
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	460c      	mov	r4, r1
 8008fb4:	4616      	mov	r6, r2
 8008fb6:	d505      	bpl.n	8008fc4 <__swrite+0x1e>
 8008fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f000 f874 	bl	80090ac <_lseek_r>
 8008fc4:	89a3      	ldrh	r3, [r4, #12]
 8008fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fce:	81a3      	strh	r3, [r4, #12]
 8008fd0:	4632      	mov	r2, r6
 8008fd2:	463b      	mov	r3, r7
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fda:	f000 b823 	b.w	8009024 <_write_r>

08008fde <__sseek>:
 8008fde:	b510      	push	{r4, lr}
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe6:	f000 f861 	bl	80090ac <_lseek_r>
 8008fea:	1c43      	adds	r3, r0, #1
 8008fec:	89a3      	ldrh	r3, [r4, #12]
 8008fee:	bf15      	itete	ne
 8008ff0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ff2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ff6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ffa:	81a3      	strheq	r3, [r4, #12]
 8008ffc:	bf18      	it	ne
 8008ffe:	81a3      	strhne	r3, [r4, #12]
 8009000:	bd10      	pop	{r4, pc}

08009002 <__sclose>:
 8009002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009006:	f000 b81f 	b.w	8009048 <_close_r>

0800900a <__ascii_wctomb>:
 800900a:	b149      	cbz	r1, 8009020 <__ascii_wctomb+0x16>
 800900c:	2aff      	cmp	r2, #255	; 0xff
 800900e:	bf85      	ittet	hi
 8009010:	238a      	movhi	r3, #138	; 0x8a
 8009012:	6003      	strhi	r3, [r0, #0]
 8009014:	700a      	strbls	r2, [r1, #0]
 8009016:	f04f 30ff 	movhi.w	r0, #4294967295
 800901a:	bf98      	it	ls
 800901c:	2001      	movls	r0, #1
 800901e:	4770      	bx	lr
 8009020:	4608      	mov	r0, r1
 8009022:	4770      	bx	lr

08009024 <_write_r>:
 8009024:	b538      	push	{r3, r4, r5, lr}
 8009026:	4d07      	ldr	r5, [pc, #28]	; (8009044 <_write_r+0x20>)
 8009028:	4604      	mov	r4, r0
 800902a:	4608      	mov	r0, r1
 800902c:	4611      	mov	r1, r2
 800902e:	2200      	movs	r2, #0
 8009030:	602a      	str	r2, [r5, #0]
 8009032:	461a      	mov	r2, r3
 8009034:	f7f8 fd6d 	bl	8001b12 <_write>
 8009038:	1c43      	adds	r3, r0, #1
 800903a:	d102      	bne.n	8009042 <_write_r+0x1e>
 800903c:	682b      	ldr	r3, [r5, #0]
 800903e:	b103      	cbz	r3, 8009042 <_write_r+0x1e>
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	bd38      	pop	{r3, r4, r5, pc}
 8009044:	20000af4 	.word	0x20000af4

08009048 <_close_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	4d06      	ldr	r5, [pc, #24]	; (8009064 <_close_r+0x1c>)
 800904c:	2300      	movs	r3, #0
 800904e:	4604      	mov	r4, r0
 8009050:	4608      	mov	r0, r1
 8009052:	602b      	str	r3, [r5, #0]
 8009054:	f7f8 fd79 	bl	8001b4a <_close>
 8009058:	1c43      	adds	r3, r0, #1
 800905a:	d102      	bne.n	8009062 <_close_r+0x1a>
 800905c:	682b      	ldr	r3, [r5, #0]
 800905e:	b103      	cbz	r3, 8009062 <_close_r+0x1a>
 8009060:	6023      	str	r3, [r4, #0]
 8009062:	bd38      	pop	{r3, r4, r5, pc}
 8009064:	20000af4 	.word	0x20000af4

08009068 <_fstat_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	4d07      	ldr	r5, [pc, #28]	; (8009088 <_fstat_r+0x20>)
 800906c:	2300      	movs	r3, #0
 800906e:	4604      	mov	r4, r0
 8009070:	4608      	mov	r0, r1
 8009072:	4611      	mov	r1, r2
 8009074:	602b      	str	r3, [r5, #0]
 8009076:	f7f8 fd74 	bl	8001b62 <_fstat>
 800907a:	1c43      	adds	r3, r0, #1
 800907c:	d102      	bne.n	8009084 <_fstat_r+0x1c>
 800907e:	682b      	ldr	r3, [r5, #0]
 8009080:	b103      	cbz	r3, 8009084 <_fstat_r+0x1c>
 8009082:	6023      	str	r3, [r4, #0]
 8009084:	bd38      	pop	{r3, r4, r5, pc}
 8009086:	bf00      	nop
 8009088:	20000af4 	.word	0x20000af4

0800908c <_isatty_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4d06      	ldr	r5, [pc, #24]	; (80090a8 <_isatty_r+0x1c>)
 8009090:	2300      	movs	r3, #0
 8009092:	4604      	mov	r4, r0
 8009094:	4608      	mov	r0, r1
 8009096:	602b      	str	r3, [r5, #0]
 8009098:	f7f8 fd73 	bl	8001b82 <_isatty>
 800909c:	1c43      	adds	r3, r0, #1
 800909e:	d102      	bne.n	80090a6 <_isatty_r+0x1a>
 80090a0:	682b      	ldr	r3, [r5, #0]
 80090a2:	b103      	cbz	r3, 80090a6 <_isatty_r+0x1a>
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	bd38      	pop	{r3, r4, r5, pc}
 80090a8:	20000af4 	.word	0x20000af4

080090ac <_lseek_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	4d07      	ldr	r5, [pc, #28]	; (80090cc <_lseek_r+0x20>)
 80090b0:	4604      	mov	r4, r0
 80090b2:	4608      	mov	r0, r1
 80090b4:	4611      	mov	r1, r2
 80090b6:	2200      	movs	r2, #0
 80090b8:	602a      	str	r2, [r5, #0]
 80090ba:	461a      	mov	r2, r3
 80090bc:	f7f8 fd6c 	bl	8001b98 <_lseek>
 80090c0:	1c43      	adds	r3, r0, #1
 80090c2:	d102      	bne.n	80090ca <_lseek_r+0x1e>
 80090c4:	682b      	ldr	r3, [r5, #0]
 80090c6:	b103      	cbz	r3, 80090ca <_lseek_r+0x1e>
 80090c8:	6023      	str	r3, [r4, #0]
 80090ca:	bd38      	pop	{r3, r4, r5, pc}
 80090cc:	20000af4 	.word	0x20000af4

080090d0 <_malloc_usable_size_r>:
 80090d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090d4:	1f18      	subs	r0, r3, #4
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	bfbc      	itt	lt
 80090da:	580b      	ldrlt	r3, [r1, r0]
 80090dc:	18c0      	addlt	r0, r0, r3
 80090de:	4770      	bx	lr

080090e0 <_read_r>:
 80090e0:	b538      	push	{r3, r4, r5, lr}
 80090e2:	4d07      	ldr	r5, [pc, #28]	; (8009100 <_read_r+0x20>)
 80090e4:	4604      	mov	r4, r0
 80090e6:	4608      	mov	r0, r1
 80090e8:	4611      	mov	r1, r2
 80090ea:	2200      	movs	r2, #0
 80090ec:	602a      	str	r2, [r5, #0]
 80090ee:	461a      	mov	r2, r3
 80090f0:	f7f8 fcf2 	bl	8001ad8 <_read>
 80090f4:	1c43      	adds	r3, r0, #1
 80090f6:	d102      	bne.n	80090fe <_read_r+0x1e>
 80090f8:	682b      	ldr	r3, [r5, #0]
 80090fa:	b103      	cbz	r3, 80090fe <_read_r+0x1e>
 80090fc:	6023      	str	r3, [r4, #0]
 80090fe:	bd38      	pop	{r3, r4, r5, pc}
 8009100:	20000af4 	.word	0x20000af4
 8009104:	00000000 	.word	0x00000000

08009108 <exp>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	ed2d 8b02 	vpush	{d8}
 800910e:	ec55 4b10 	vmov	r4, r5, d0
 8009112:	f000 f849 	bl	80091a8 <__ieee754_exp>
 8009116:	4b22      	ldr	r3, [pc, #136]	; (80091a0 <exp+0x98>)
 8009118:	eeb0 8a40 	vmov.f32	s16, s0
 800911c:	eef0 8a60 	vmov.f32	s17, s1
 8009120:	f993 3000 	ldrsb.w	r3, [r3]
 8009124:	3301      	adds	r3, #1
 8009126:	d012      	beq.n	800914e <exp+0x46>
 8009128:	ec45 4b10 	vmov	d0, r4, r5
 800912c:	f000 f9b6 	bl	800949c <finite>
 8009130:	b168      	cbz	r0, 800914e <exp+0x46>
 8009132:	a313      	add	r3, pc, #76	; (adr r3, 8009180 <exp+0x78>)
 8009134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009138:	4620      	mov	r0, r4
 800913a:	4629      	mov	r1, r5
 800913c:	f7f7 fcec 	bl	8000b18 <__aeabi_dcmpgt>
 8009140:	b160      	cbz	r0, 800915c <exp+0x54>
 8009142:	f7fd f831 	bl	80061a8 <__errno>
 8009146:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8009188 <exp+0x80>
 800914a:	2322      	movs	r3, #34	; 0x22
 800914c:	6003      	str	r3, [r0, #0]
 800914e:	eeb0 0a48 	vmov.f32	s0, s16
 8009152:	eef0 0a68 	vmov.f32	s1, s17
 8009156:	ecbd 8b02 	vpop	{d8}
 800915a:	bd38      	pop	{r3, r4, r5, pc}
 800915c:	a30c      	add	r3, pc, #48	; (adr r3, 8009190 <exp+0x88>)
 800915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009162:	4620      	mov	r0, r4
 8009164:	4629      	mov	r1, r5
 8009166:	f7f7 fcb9 	bl	8000adc <__aeabi_dcmplt>
 800916a:	2800      	cmp	r0, #0
 800916c:	d0ef      	beq.n	800914e <exp+0x46>
 800916e:	f7fd f81b 	bl	80061a8 <__errno>
 8009172:	2322      	movs	r3, #34	; 0x22
 8009174:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8009198 <exp+0x90>
 8009178:	6003      	str	r3, [r0, #0]
 800917a:	e7e8      	b.n	800914e <exp+0x46>
 800917c:	f3af 8000 	nop.w
 8009180:	fefa39ef 	.word	0xfefa39ef
 8009184:	40862e42 	.word	0x40862e42
 8009188:	00000000 	.word	0x00000000
 800918c:	7ff00000 	.word	0x7ff00000
 8009190:	d52d3051 	.word	0xd52d3051
 8009194:	c0874910 	.word	0xc0874910
	...
 80091a0:	200001e0 	.word	0x200001e0
 80091a4:	00000000 	.word	0x00000000

080091a8 <__ieee754_exp>:
 80091a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091ac:	ec55 4b10 	vmov	r4, r5, d0
 80091b0:	49b1      	ldr	r1, [pc, #708]	; (8009478 <__ieee754_exp+0x2d0>)
 80091b2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80091b6:	428b      	cmp	r3, r1
 80091b8:	ed2d 8b04 	vpush	{d8-d9}
 80091bc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80091c0:	d937      	bls.n	8009232 <__ieee754_exp+0x8a>
 80091c2:	49ae      	ldr	r1, [pc, #696]	; (800947c <__ieee754_exp+0x2d4>)
 80091c4:	428b      	cmp	r3, r1
 80091c6:	d916      	bls.n	80091f6 <__ieee754_exp+0x4e>
 80091c8:	ee10 3a10 	vmov	r3, s0
 80091cc:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80091d0:	4313      	orrs	r3, r2
 80091d2:	d009      	beq.n	80091e8 <__ieee754_exp+0x40>
 80091d4:	ee10 2a10 	vmov	r2, s0
 80091d8:	462b      	mov	r3, r5
 80091da:	4620      	mov	r0, r4
 80091dc:	4629      	mov	r1, r5
 80091de:	f7f7 f855 	bl	800028c <__adddf3>
 80091e2:	4604      	mov	r4, r0
 80091e4:	460d      	mov	r5, r1
 80091e6:	e000      	b.n	80091ea <__ieee754_exp+0x42>
 80091e8:	bb06      	cbnz	r6, 800922c <__ieee754_exp+0x84>
 80091ea:	ecbd 8b04 	vpop	{d8-d9}
 80091ee:	ec45 4b10 	vmov	d0, r4, r5
 80091f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f6:	a38a      	add	r3, pc, #552	; (adr r3, 8009420 <__ieee754_exp+0x278>)
 80091f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fc:	ee10 0a10 	vmov	r0, s0
 8009200:	4629      	mov	r1, r5
 8009202:	f7f7 fc89 	bl	8000b18 <__aeabi_dcmpgt>
 8009206:	b138      	cbz	r0, 8009218 <__ieee754_exp+0x70>
 8009208:	a387      	add	r3, pc, #540	; (adr r3, 8009428 <__ieee754_exp+0x280>)
 800920a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920e:	4610      	mov	r0, r2
 8009210:	4619      	mov	r1, r3
 8009212:	f7f7 f9f1 	bl	80005f8 <__aeabi_dmul>
 8009216:	e7e4      	b.n	80091e2 <__ieee754_exp+0x3a>
 8009218:	a385      	add	r3, pc, #532	; (adr r3, 8009430 <__ieee754_exp+0x288>)
 800921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921e:	4620      	mov	r0, r4
 8009220:	4629      	mov	r1, r5
 8009222:	f7f7 fc5b 	bl	8000adc <__aeabi_dcmplt>
 8009226:	2800      	cmp	r0, #0
 8009228:	f000 8087 	beq.w	800933a <__ieee754_exp+0x192>
 800922c:	2400      	movs	r4, #0
 800922e:	2500      	movs	r5, #0
 8009230:	e7db      	b.n	80091ea <__ieee754_exp+0x42>
 8009232:	4a93      	ldr	r2, [pc, #588]	; (8009480 <__ieee754_exp+0x2d8>)
 8009234:	4293      	cmp	r3, r2
 8009236:	f240 80ac 	bls.w	8009392 <__ieee754_exp+0x1ea>
 800923a:	4a92      	ldr	r2, [pc, #584]	; (8009484 <__ieee754_exp+0x2dc>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d87c      	bhi.n	800933a <__ieee754_exp+0x192>
 8009240:	4b91      	ldr	r3, [pc, #580]	; (8009488 <__ieee754_exp+0x2e0>)
 8009242:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	ee10 0a10 	vmov	r0, s0
 800924e:	4629      	mov	r1, r5
 8009250:	f7f7 f81a 	bl	8000288 <__aeabi_dsub>
 8009254:	4b8d      	ldr	r3, [pc, #564]	; (800948c <__ieee754_exp+0x2e4>)
 8009256:	00f7      	lsls	r7, r6, #3
 8009258:	443b      	add	r3, r7
 800925a:	ed93 7b00 	vldr	d7, [r3]
 800925e:	f1c6 0a01 	rsb	sl, r6, #1
 8009262:	4680      	mov	r8, r0
 8009264:	4689      	mov	r9, r1
 8009266:	ebaa 0a06 	sub.w	sl, sl, r6
 800926a:	eeb0 8a47 	vmov.f32	s16, s14
 800926e:	eef0 8a67 	vmov.f32	s17, s15
 8009272:	ec53 2b18 	vmov	r2, r3, d8
 8009276:	4640      	mov	r0, r8
 8009278:	4649      	mov	r1, r9
 800927a:	f7f7 f805 	bl	8000288 <__aeabi_dsub>
 800927e:	4604      	mov	r4, r0
 8009280:	460d      	mov	r5, r1
 8009282:	4622      	mov	r2, r4
 8009284:	462b      	mov	r3, r5
 8009286:	4620      	mov	r0, r4
 8009288:	4629      	mov	r1, r5
 800928a:	f7f7 f9b5 	bl	80005f8 <__aeabi_dmul>
 800928e:	a36a      	add	r3, pc, #424	; (adr r3, 8009438 <__ieee754_exp+0x290>)
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	4606      	mov	r6, r0
 8009296:	460f      	mov	r7, r1
 8009298:	f7f7 f9ae 	bl	80005f8 <__aeabi_dmul>
 800929c:	a368      	add	r3, pc, #416	; (adr r3, 8009440 <__ieee754_exp+0x298>)
 800929e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a2:	f7f6 fff1 	bl	8000288 <__aeabi_dsub>
 80092a6:	4632      	mov	r2, r6
 80092a8:	463b      	mov	r3, r7
 80092aa:	f7f7 f9a5 	bl	80005f8 <__aeabi_dmul>
 80092ae:	a366      	add	r3, pc, #408	; (adr r3, 8009448 <__ieee754_exp+0x2a0>)
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	f7f6 ffea 	bl	800028c <__adddf3>
 80092b8:	4632      	mov	r2, r6
 80092ba:	463b      	mov	r3, r7
 80092bc:	f7f7 f99c 	bl	80005f8 <__aeabi_dmul>
 80092c0:	a363      	add	r3, pc, #396	; (adr r3, 8009450 <__ieee754_exp+0x2a8>)
 80092c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c6:	f7f6 ffdf 	bl	8000288 <__aeabi_dsub>
 80092ca:	4632      	mov	r2, r6
 80092cc:	463b      	mov	r3, r7
 80092ce:	f7f7 f993 	bl	80005f8 <__aeabi_dmul>
 80092d2:	a361      	add	r3, pc, #388	; (adr r3, 8009458 <__ieee754_exp+0x2b0>)
 80092d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d8:	f7f6 ffd8 	bl	800028c <__adddf3>
 80092dc:	4632      	mov	r2, r6
 80092de:	463b      	mov	r3, r7
 80092e0:	f7f7 f98a 	bl	80005f8 <__aeabi_dmul>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	4620      	mov	r0, r4
 80092ea:	4629      	mov	r1, r5
 80092ec:	f7f6 ffcc 	bl	8000288 <__aeabi_dsub>
 80092f0:	4602      	mov	r2, r0
 80092f2:	460b      	mov	r3, r1
 80092f4:	4606      	mov	r6, r0
 80092f6:	460f      	mov	r7, r1
 80092f8:	4620      	mov	r0, r4
 80092fa:	4629      	mov	r1, r5
 80092fc:	f7f7 f97c 	bl	80005f8 <__aeabi_dmul>
 8009300:	ec41 0b19 	vmov	d9, r0, r1
 8009304:	f1ba 0f00 	cmp.w	sl, #0
 8009308:	d15d      	bne.n	80093c6 <__ieee754_exp+0x21e>
 800930a:	2200      	movs	r2, #0
 800930c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009310:	4630      	mov	r0, r6
 8009312:	4639      	mov	r1, r7
 8009314:	f7f6 ffb8 	bl	8000288 <__aeabi_dsub>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	ec51 0b19 	vmov	r0, r1, d9
 8009320:	f7f7 fa94 	bl	800084c <__aeabi_ddiv>
 8009324:	4622      	mov	r2, r4
 8009326:	462b      	mov	r3, r5
 8009328:	f7f6 ffae 	bl	8000288 <__aeabi_dsub>
 800932c:	4602      	mov	r2, r0
 800932e:	460b      	mov	r3, r1
 8009330:	2000      	movs	r0, #0
 8009332:	4957      	ldr	r1, [pc, #348]	; (8009490 <__ieee754_exp+0x2e8>)
 8009334:	f7f6 ffa8 	bl	8000288 <__aeabi_dsub>
 8009338:	e753      	b.n	80091e2 <__ieee754_exp+0x3a>
 800933a:	4856      	ldr	r0, [pc, #344]	; (8009494 <__ieee754_exp+0x2ec>)
 800933c:	a348      	add	r3, pc, #288	; (adr r3, 8009460 <__ieee754_exp+0x2b8>)
 800933e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009342:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8009346:	4629      	mov	r1, r5
 8009348:	4620      	mov	r0, r4
 800934a:	f7f7 f955 	bl	80005f8 <__aeabi_dmul>
 800934e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009352:	f7f6 ff9b 	bl	800028c <__adddf3>
 8009356:	f7f7 fbff 	bl	8000b58 <__aeabi_d2iz>
 800935a:	4682      	mov	sl, r0
 800935c:	f7f7 f8e2 	bl	8000524 <__aeabi_i2d>
 8009360:	a341      	add	r3, pc, #260	; (adr r3, 8009468 <__ieee754_exp+0x2c0>)
 8009362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009366:	4606      	mov	r6, r0
 8009368:	460f      	mov	r7, r1
 800936a:	f7f7 f945 	bl	80005f8 <__aeabi_dmul>
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	4620      	mov	r0, r4
 8009374:	4629      	mov	r1, r5
 8009376:	f7f6 ff87 	bl	8000288 <__aeabi_dsub>
 800937a:	a33d      	add	r3, pc, #244	; (adr r3, 8009470 <__ieee754_exp+0x2c8>)
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	4680      	mov	r8, r0
 8009382:	4689      	mov	r9, r1
 8009384:	4630      	mov	r0, r6
 8009386:	4639      	mov	r1, r7
 8009388:	f7f7 f936 	bl	80005f8 <__aeabi_dmul>
 800938c:	ec41 0b18 	vmov	d8, r0, r1
 8009390:	e76f      	b.n	8009272 <__ieee754_exp+0xca>
 8009392:	4a41      	ldr	r2, [pc, #260]	; (8009498 <__ieee754_exp+0x2f0>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d811      	bhi.n	80093bc <__ieee754_exp+0x214>
 8009398:	a323      	add	r3, pc, #140	; (adr r3, 8009428 <__ieee754_exp+0x280>)
 800939a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939e:	ee10 0a10 	vmov	r0, s0
 80093a2:	4629      	mov	r1, r5
 80093a4:	f7f6 ff72 	bl	800028c <__adddf3>
 80093a8:	4b39      	ldr	r3, [pc, #228]	; (8009490 <__ieee754_exp+0x2e8>)
 80093aa:	2200      	movs	r2, #0
 80093ac:	f7f7 fbb4 	bl	8000b18 <__aeabi_dcmpgt>
 80093b0:	b138      	cbz	r0, 80093c2 <__ieee754_exp+0x21a>
 80093b2:	4b37      	ldr	r3, [pc, #220]	; (8009490 <__ieee754_exp+0x2e8>)
 80093b4:	2200      	movs	r2, #0
 80093b6:	4620      	mov	r0, r4
 80093b8:	4629      	mov	r1, r5
 80093ba:	e710      	b.n	80091de <__ieee754_exp+0x36>
 80093bc:	f04f 0a00 	mov.w	sl, #0
 80093c0:	e75f      	b.n	8009282 <__ieee754_exp+0xda>
 80093c2:	4682      	mov	sl, r0
 80093c4:	e75d      	b.n	8009282 <__ieee754_exp+0xda>
 80093c6:	4632      	mov	r2, r6
 80093c8:	463b      	mov	r3, r7
 80093ca:	2000      	movs	r0, #0
 80093cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80093d0:	f7f6 ff5a 	bl	8000288 <__aeabi_dsub>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	ec51 0b19 	vmov	r0, r1, d9
 80093dc:	f7f7 fa36 	bl	800084c <__aeabi_ddiv>
 80093e0:	4602      	mov	r2, r0
 80093e2:	460b      	mov	r3, r1
 80093e4:	ec51 0b18 	vmov	r0, r1, d8
 80093e8:	f7f6 ff4e 	bl	8000288 <__aeabi_dsub>
 80093ec:	4642      	mov	r2, r8
 80093ee:	464b      	mov	r3, r9
 80093f0:	f7f6 ff4a 	bl	8000288 <__aeabi_dsub>
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	2000      	movs	r0, #0
 80093fa:	4925      	ldr	r1, [pc, #148]	; (8009490 <__ieee754_exp+0x2e8>)
 80093fc:	f7f6 ff44 	bl	8000288 <__aeabi_dsub>
 8009400:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8009404:	4592      	cmp	sl, r2
 8009406:	db02      	blt.n	800940e <__ieee754_exp+0x266>
 8009408:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800940c:	e6e9      	b.n	80091e2 <__ieee754_exp+0x3a>
 800940e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8009412:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8009416:	2200      	movs	r2, #0
 8009418:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800941c:	e6f9      	b.n	8009212 <__ieee754_exp+0x6a>
 800941e:	bf00      	nop
 8009420:	fefa39ef 	.word	0xfefa39ef
 8009424:	40862e42 	.word	0x40862e42
 8009428:	8800759c 	.word	0x8800759c
 800942c:	7e37e43c 	.word	0x7e37e43c
 8009430:	d52d3051 	.word	0xd52d3051
 8009434:	c0874910 	.word	0xc0874910
 8009438:	72bea4d0 	.word	0x72bea4d0
 800943c:	3e663769 	.word	0x3e663769
 8009440:	c5d26bf1 	.word	0xc5d26bf1
 8009444:	3ebbbd41 	.word	0x3ebbbd41
 8009448:	af25de2c 	.word	0xaf25de2c
 800944c:	3f11566a 	.word	0x3f11566a
 8009450:	16bebd93 	.word	0x16bebd93
 8009454:	3f66c16c 	.word	0x3f66c16c
 8009458:	5555553e 	.word	0x5555553e
 800945c:	3fc55555 	.word	0x3fc55555
 8009460:	652b82fe 	.word	0x652b82fe
 8009464:	3ff71547 	.word	0x3ff71547
 8009468:	fee00000 	.word	0xfee00000
 800946c:	3fe62e42 	.word	0x3fe62e42
 8009470:	35793c76 	.word	0x35793c76
 8009474:	3dea39ef 	.word	0x3dea39ef
 8009478:	40862e41 	.word	0x40862e41
 800947c:	7fefffff 	.word	0x7fefffff
 8009480:	3fd62e42 	.word	0x3fd62e42
 8009484:	3ff0a2b1 	.word	0x3ff0a2b1
 8009488:	08009960 	.word	0x08009960
 800948c:	08009970 	.word	0x08009970
 8009490:	3ff00000 	.word	0x3ff00000
 8009494:	08009950 	.word	0x08009950
 8009498:	3e2fffff 	.word	0x3e2fffff

0800949c <finite>:
 800949c:	b082      	sub	sp, #8
 800949e:	ed8d 0b00 	vstr	d0, [sp]
 80094a2:	9801      	ldr	r0, [sp, #4]
 80094a4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80094a8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80094ac:	0fc0      	lsrs	r0, r0, #31
 80094ae:	b002      	add	sp, #8
 80094b0:	4770      	bx	lr
	...

080094b4 <_init>:
 80094b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b6:	bf00      	nop
 80094b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ba:	bc08      	pop	{r3}
 80094bc:	469e      	mov	lr, r3
 80094be:	4770      	bx	lr

080094c0 <_fini>:
 80094c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c2:	bf00      	nop
 80094c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094c6:	bc08      	pop	{r3}
 80094c8:	469e      	mov	lr, r3
 80094ca:	4770      	bx	lr
