
AIGO_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08009008  08009008  00019008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009424  08009424  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08009424  08009424  00019424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800942c  0800942c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800942c  0800942c  0001942c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009430  08009430  00019430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          00000bc0  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000dac  20000dac  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   000100ed  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000257c  00000000  00000000  00030309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00032888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ce8  00000000  00000000  00033668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000227f5  00000000  00000000  00034350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f998  00000000  00000000  00056b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccde1  00000000  00000000  000664dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001332be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a74  00000000  00000000  00133314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008fec 	.word	0x08008fec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	08008fec 	.word	0x08008fec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <MX_DMA_Init+0x88>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a1e      	ldr	r2, [pc, #120]	; (8000f28 <MX_DMA_Init+0x88>)
 8000eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <MX_DMA_Init+0x88>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_DMA_Init+0x88>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a17      	ldr	r2, [pc, #92]	; (8000f28 <MX_DMA_Init+0x88>)
 8000ecc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_DMA_Init+0x88>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	200c      	movs	r0, #12
 8000ee4:	f001 fd87 	bl	80029f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ee8:	200c      	movs	r0, #12
 8000eea:	f001 fda0 	bl	8002a2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	200e      	movs	r0, #14
 8000ef4:	f001 fd7f 	bl	80029f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ef8:	200e      	movs	r0, #14
 8000efa:	f001 fd98 	bl	8002a2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	2039      	movs	r0, #57	; 0x39
 8000f04:	f001 fd77 	bl	80029f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f08:	2039      	movs	r0, #57	; 0x39
 8000f0a:	f001 fd90 	bl	8002a2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	2045      	movs	r0, #69	; 0x45
 8000f14:	f001 fd6f 	bl	80029f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000f18:	2045      	movs	r0, #69	; 0x45
 8000f1a:	f001 fd88 	bl	8002a2e <HAL_NVIC_EnableIRQ>

}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800

08000f2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	; 0x30
 8000f30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
 8000f46:	4b68      	ldr	r3, [pc, #416]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a67      	ldr	r2, [pc, #412]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f4c:	f043 0310 	orr.w	r3, r3, #16
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b65      	ldr	r3, [pc, #404]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0310 	and.w	r3, r3, #16
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	4b61      	ldr	r3, [pc, #388]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a60      	ldr	r2, [pc, #384]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b5e      	ldr	r3, [pc, #376]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b5a      	ldr	r3, [pc, #360]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a59      	ldr	r2, [pc, #356]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b57      	ldr	r3, [pc, #348]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b53      	ldr	r3, [pc, #332]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a52      	ldr	r2, [pc, #328]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b50      	ldr	r3, [pc, #320]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a4b      	ldr	r2, [pc, #300]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b49      	ldr	r3, [pc, #292]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a44      	ldr	r2, [pc, #272]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b42      	ldr	r3, [pc, #264]	; (80010e8 <MX_GPIO_Init+0x1bc>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2138      	movs	r1, #56	; 0x38
 8000fee:	483f      	ldr	r0, [pc, #252]	; (80010ec <MX_GPIO_Init+0x1c0>)
 8000ff0:	f002 fad6 	bl	80035a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ffa:	483d      	ldr	r0, [pc, #244]	; (80010f0 <MX_GPIO_Init+0x1c4>)
 8000ffc:	f002 fad0 	bl	80035a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2101      	movs	r1, #1
 8001004:	483a      	ldr	r0, [pc, #232]	; (80010f0 <MX_GPIO_Init+0x1c4>)
 8001006:	f002 facb 	bl	80035a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001010:	4838      	ldr	r0, [pc, #224]	; (80010f4 <MX_GPIO_Init+0x1c8>)
 8001012:	f002 fac5 	bl	80035a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 6171 	mov.w	r1, #3856	; 0xf10
 800101c:	4836      	ldr	r0, [pc, #216]	; (80010f8 <MX_GPIO_Init+0x1cc>)
 800101e:	f002 fabf 	bl	80035a0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PE4 PE5 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8001022:	2338      	movs	r3, #56	; 0x38
 8001024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	482c      	ldr	r0, [pc, #176]	; (80010ec <MX_GPIO_Init+0x1c0>)
 800103a:	f002 f915 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|OTG_FS_PowerSwitchOn_Pin;
 800103e:	f242 0301 	movw	r3, #8193	; 0x2001
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	4826      	ldr	r0, [pc, #152]	; (80010f0 <MX_GPIO_Init+0x1c4>)
 8001058:	f002 f906 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800105c:	2304      	movs	r3, #4
 800105e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	4821      	ldr	r0, [pc, #132]	; (80010f4 <MX_GPIO_Init+0x1c8>)
 8001070:	f002 f8fa 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001074:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4819      	ldr	r0, [pc, #100]	; (80010f4 <MX_GPIO_Init+0x1c8>)
 800108e:	f002 f8eb 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001092:	f44f 6371 	mov.w	r3, #3856	; 0xf10
 8001096:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	4813      	ldr	r0, [pc, #76]	; (80010f8 <MX_GPIO_Init+0x1cc>)
 80010ac:	f002 f8dc 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010b0:	2320      	movs	r3, #32
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_GPIO_Init+0x1cc>)
 80010c4:	f002 f8d0 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_GPIO_Init+0x1d0>)
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_GPIO_Init+0x1c0>)
 80010dc:	f002 f8c4 	bl	8003268 <HAL_GPIO_Init>

}
 80010e0:	bf00      	nop
 80010e2:	3730      	adds	r7, #48	; 0x30
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40020800 	.word	0x40020800
 80010f4:	40020400 	.word	0x40020400
 80010f8:	40020c00 	.word	0x40020c00
 80010fc:	10120000 	.word	0x10120000

08001100 <array_element_of_index_equal>:
void Transmit_Data();
void Set_Motor_PID();
int32_t Calculate_Value(int32_t);
void Set_Motor_PWM();

bool array_element_of_index_equal(uint8_t a[], uint8_t b[], uint8_t size) {
 8001100:	b480      	push	{r7}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	4613      	mov	r3, r2
 800110c:	71fb      	strb	r3, [r7, #7]
   uint8_t i;
   for(i=0; i<size; i++){
 800110e:	2300      	movs	r3, #0
 8001110:	75fb      	strb	r3, [r7, #23]
 8001112:	e00e      	b.n	8001132 <array_element_of_index_equal+0x32>
      if( a[i] != b[i] )
 8001114:	7dfb      	ldrb	r3, [r7, #23]
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	4413      	add	r3, r2
 800111a:	781a      	ldrb	r2, [r3, #0]
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	68b9      	ldr	r1, [r7, #8]
 8001120:	440b      	add	r3, r1
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	429a      	cmp	r2, r3
 8001126:	d001      	beq.n	800112c <array_element_of_index_equal+0x2c>
         return false;
 8001128:	2300      	movs	r3, #0
 800112a:	e007      	b.n	800113c <array_element_of_index_equal+0x3c>
   for(i=0; i<size; i++){
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	3301      	adds	r3, #1
 8001130:	75fb      	strb	r3, [r7, #23]
 8001132:	7dfa      	ldrb	r2, [r7, #23]
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	429a      	cmp	r2, r3
 8001138:	d3ec      	bcc.n	8001114 <array_element_of_index_equal+0x14>
   }
   return true;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <array_avg_compare>:
int32_t array_avg_compare(uint16_t distance[]){
 8001148:	b480      	push	{r7}
 800114a:	b08b      	sub	sp, #44	; 0x2c
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

   uint32_t sum_R = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
   uint32_t sum_L = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
   uint8_t len_L = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	77fb      	strb	r3, [r7, #31]
   uint8_t len_R = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	77bb      	strb	r3, [r7, #30]
   int32_t avg_R = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
   int32_t avg_L = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
   int32_t avg_diff = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]

   for(int i=0; i<90; i++){
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	e015      	b.n	800119e <array_avg_compare+0x56>
      sum_R += distance[i];
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	4413      	add	r3, r2
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
      if(distance[i]!=0){
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	4413      	add	r3, r2
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d002      	beq.n	8001198 <array_avg_compare+0x50>
         len_R++;
 8001192:	7fbb      	ldrb	r3, [r7, #30]
 8001194:	3301      	adds	r3, #1
 8001196:	77bb      	strb	r3, [r7, #30]
   for(int i=0; i<90; i++){
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	3301      	adds	r3, #1
 800119c:	61bb      	str	r3, [r7, #24]
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	2b59      	cmp	r3, #89	; 0x59
 80011a2:	dde6      	ble.n	8001172 <array_avg_compare+0x2a>
      }
   }
   if(len_R == 0) return 0;
 80011a4:	7fbb      	ldrb	r3, [r7, #30]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <array_avg_compare+0x66>
 80011aa:	2300      	movs	r3, #0
 80011ac:	e03b      	b.n	8001226 <array_avg_compare+0xde>
   avg_R = sum_R/len_R;
 80011ae:	7fbb      	ldrb	r3, [r7, #30]
 80011b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	613b      	str	r3, [r7, #16]

   for(int i=270; i<360; i++){
 80011b8:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	e015      	b.n	80011ec <array_avg_compare+0xa4>
      sum_L += distance[i];
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	4413      	add	r3, r2
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	6a3b      	ldr	r3, [r7, #32]
 80011ce:	4413      	add	r3, r2
 80011d0:	623b      	str	r3, [r7, #32]
      if(distance[i]!=0){
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <array_avg_compare+0x9e>
         len_L++;
 80011e0:	7ffb      	ldrb	r3, [r7, #31]
 80011e2:	3301      	adds	r3, #1
 80011e4:	77fb      	strb	r3, [r7, #31]
   for(int i=270; i<360; i++){
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80011f2:	dbe5      	blt.n	80011c0 <array_avg_compare+0x78>
      }
   }
   if(len_L == 0) return 0;
 80011f4:	7ffb      	ldrb	r3, [r7, #31]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <array_avg_compare+0xb6>
 80011fa:	2300      	movs	r3, #0
 80011fc:	e013      	b.n	8001226 <array_avg_compare+0xde>
   avg_L = sum_L/len_L;
 80011fe:	7ffb      	ldrb	r3, [r7, #31]
 8001200:	6a3a      	ldr	r2, [r7, #32]
 8001202:	fbb2 f3f3 	udiv	r3, r2, r3
 8001206:	60fb      	str	r3, [r7, #12]

   avg_diff = avg_R - avg_L;
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	60bb      	str	r3, [r7, #8]
   if(avg_diff > 300 || avg_diff < -300){
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001216:	dc03      	bgt.n	8001220 <array_avg_compare+0xd8>
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 800121e:	da01      	bge.n	8001224 <array_avg_compare+0xdc>
	   return avg_diff;
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	e000      	b.n	8001226 <array_avg_compare+0xde>
   }
   else
	   return 0;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	372c      	adds	r7, #44	; 0x2c
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8001238:	f001 fa6c 	bl	8002714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123c:	f000 f8b4 	bl	80013a8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8001240:	f7ff fe2e 	bl	8000ea0 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001244:	f7ff fe72 	bl	8000f2c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001248:	f000 fcb8 	bl	8001bbc <MX_TIM1_Init>
  MX_TIM2_Init();
 800124c:	f000 fd7a 	bl	8001d44 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001250:	f000 fdcc 	bl	8001dec <MX_TIM3_Init>
  MX_TIM4_Init();
 8001254:	f000 fe1e 	bl	8001e94 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001258:	f000 fe70 	bl	8001f3c <MX_TIM5_Init>
  MX_TIM6_Init();
 800125c:	f000 fec2 	bl	8001fe4 <MX_TIM6_Init>
  MX_USART6_UART_Init();
 8001260:	f001 f89c 	bl	800239c <MX_USART6_UART_Init>
  MX_DMA_Init();
 8001264:	f7ff fe1c 	bl	8000ea0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001268:	f001 f86e 	bl	8002348 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //while (MPU6050_Init(&hi2c1) ==1);
  //__HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
  //HAL_UART_Receive_DMA(&huart6, RxBuffer, DMA_BUF_SIZE);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800126c:	2100      	movs	r1, #0
 800126e:	4841      	ldr	r0, [pc, #260]	; (8001374 <main+0x140>)
 8001270:	f002 ff3e 	bl	80040f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001274:	2104      	movs	r1, #4
 8001276:	483f      	ldr	r0, [pc, #252]	; (8001374 <main+0x140>)
 8001278:	f002 ff3a 	bl	80040f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800127c:	2108      	movs	r1, #8
 800127e:	483d      	ldr	r0, [pc, #244]	; (8001374 <main+0x140>)
 8001280:	f002 ff36 	bl	80040f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001284:	210c      	movs	r1, #12
 8001286:	483b      	ldr	r0, [pc, #236]	; (8001374 <main+0x140>)
 8001288:	f002 ff32 	bl	80040f0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800128c:	483a      	ldr	r0, [pc, #232]	; (8001378 <main+0x144>)
 800128e:	f002 fe65 	bl	8003f5c <HAL_TIM_Base_Start_IT>
  HAL_Delay(1000);
 8001292:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001296:	f001 faaf 	bl	80027f8 <HAL_Delay>
  Initialize_Encoder_Count();
 800129a:	f000 f8ef 	bl	800147c <Initialize_Encoder_Count>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800129e:	213c      	movs	r1, #60	; 0x3c
 80012a0:	4836      	ldr	r0, [pc, #216]	; (800137c <main+0x148>)
 80012a2:	f003 f893 	bl	80043cc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80012a6:	213c      	movs	r1, #60	; 0x3c
 80012a8:	4835      	ldr	r0, [pc, #212]	; (8001380 <main+0x14c>)
 80012aa:	f003 f88f 	bl	80043cc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80012ae:	213c      	movs	r1, #60	; 0x3c
 80012b0:	4834      	ldr	r0, [pc, #208]	; (8001384 <main+0x150>)
 80012b2:	f003 f88b 	bl	80043cc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80012b6:	213c      	movs	r1, #60	; 0x3c
 80012b8:	4833      	ldr	r0, [pc, #204]	; (8001388 <main+0x154>)
 80012ba:	f003 f887 	bl	80043cc <HAL_TIM_Encoder_Start>
  HAL_UART_Transmit(&huart3, scan_command, 2, 100);
 80012be:	2364      	movs	r3, #100	; 0x64
 80012c0:	2202      	movs	r2, #2
 80012c2:	4932      	ldr	r1, [pc, #200]	; (800138c <main+0x158>)
 80012c4:	4832      	ldr	r0, [pc, #200]	; (8001390 <main+0x15c>)
 80012c6:	f004 f80a 	bl	80052de <HAL_UART_Transmit>
  //Initialize for motor PWM

  //12,13 : LF | 14,15 : RF | 8,9 : LB | 9,10 : RB
  //write pin SET at lower pin to go forward
  //initialize all wheels directions forward
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d0:	4830      	ldr	r0, [pc, #192]	; (8001394 <main+0x160>)
 80012d2:	f002 f965 	bl	80035a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012dc:	482d      	ldr	r0, [pc, #180]	; (8001394 <main+0x160>)
 80012de:	f002 f95f 	bl	80035a0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e8:	482a      	ldr	r0, [pc, #168]	; (8001394 <main+0x160>)
 80012ea:	f002 f959 	bl	80035a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012f4:	4827      	ldr	r0, [pc, #156]	; (8001394 <main+0x160>)
 80012f6:	f002 f953 	bl	80035a0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001300:	4825      	ldr	r0, [pc, #148]	; (8001398 <main+0x164>)
 8001302:	f002 f94d 	bl	80035a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130c:	4822      	ldr	r0, [pc, #136]	; (8001398 <main+0x164>)
 800130e:	f002 f947 	bl	80035a0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, SET);
 8001312:	2201      	movs	r2, #1
 8001314:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001318:	481f      	ldr	r0, [pc, #124]	; (8001398 <main+0x164>)
 800131a:	f002 f941 	bl	80035a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001324:	481c      	ldr	r0, [pc, #112]	; (8001398 <main+0x164>)
 8001326:	f002 f93b 	bl	80035a0 <HAL_GPIO_WritePin>
  cnt = 0;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <main+0x168>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
	 TIM1->CCR1 = 0;
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <main+0x16c>)
 8001332:	2200      	movs	r2, #0
 8001334:	635a      	str	r2, [r3, #52]	; 0x34
	 TIM1->CCR2 = 0;
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <main+0x16c>)
 8001338:	2200      	movs	r2, #0
 800133a:	639a      	str	r2, [r3, #56]	; 0x38
	 TIM1->CCR3 = 0;
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <main+0x16c>)
 800133e:	2200      	movs	r2, #0
 8001340:	63da      	str	r2, [r3, #60]	; 0x3c
	 TIM1->CCR4 = 0;
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <main+0x16c>)
 8001344:	2200      	movs	r2, #0
 8001346:	641a      	str	r2, [r3, #64]	; 0x40
  while (1)
  {
	  //for (uint8_t i = 0; i <64; i++){
	//	  recv_data[i] = 0;
	  //}
	  Receive_Lidar();
 8001348:	f000 f8ce 	bl	80014e8 <Receive_Lidar>
	  //Receive_Imu();
	  //HAL_Delay(10);
	  //uint8_t byte = 0;
	  if(HAL_GetTick()-last > 100L){
 800134c:	f001 fa48 	bl	80027e0 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <main+0x170>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b64      	cmp	r3, #100	; 0x64
 800135a:	d9f5      	bls.n	8001348 <main+0x114>
		  Receive_Encoder_Count();
 800135c:	f000 f8a8 	bl	80014b0 <Receive_Encoder_Count>
		  Transmit_Data();
 8001360:	f000 f9b6 	bl	80016d0 <Transmit_Data>
		  Initialize_Encoder_Count();
 8001364:	f000 f88a 	bl	800147c <Initialize_Encoder_Count>
		  last = HAL_GetTick();
 8001368:	f001 fa3a 	bl	80027e0 <HAL_GetTick>
 800136c:	4603      	mov	r3, r0
 800136e:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <main+0x170>)
 8001370:	6013      	str	r3, [r2, #0]
	  Receive_Lidar();
 8001372:	e7e9      	b.n	8001348 <main+0x114>
 8001374:	20000b00 	.word	0x20000b00
 8001378:	20000ab8 	.word	0x20000ab8
 800137c:	20000b48 	.word	0x20000b48
 8001380:	20000a70 	.word	0x20000a70
 8001384:	200009e0 	.word	0x200009e0
 8001388:	20000a28 	.word	0x20000a28
 800138c:	20000000 	.word	0x20000000
 8001390:	20000c50 	.word	0x20000c50
 8001394:	40020400 	.word	0x40020400
 8001398:	40020c00 	.word	0x40020c00
 800139c:	20000904 	.word	0x20000904
 80013a0:	40010000 	.word	0x40010000
 80013a4:	20000208 	.word	0x20000208

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b094      	sub	sp, #80	; 0x50
 80013ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	2230      	movs	r2, #48	; 0x30
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f004 ff7c 	bl	80062b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <SystemClock_Config+0xcc>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	4a27      	ldr	r2, [pc, #156]	; (8001474 <SystemClock_Config+0xcc>)
 80013d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013da:	6413      	str	r3, [r2, #64]	; 0x40
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <SystemClock_Config+0xcc>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <SystemClock_Config+0xd0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a21      	ldr	r2, [pc, #132]	; (8001478 <SystemClock_Config+0xd0>)
 80013f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <SystemClock_Config+0xd0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001404:	2301      	movs	r3, #1
 8001406:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140e:	2302      	movs	r3, #2
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001412:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001416:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001418:	2304      	movs	r3, #4
 800141a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800141c:	23a8      	movs	r3, #168	; 0xa8
 800141e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001420:	2302      	movs	r3, #2
 8001422:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001424:	2303      	movs	r3, #3
 8001426:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001428:	f107 0320 	add.w	r3, r7, #32
 800142c:	4618      	mov	r0, r3
 800142e:	f002 f8d1 	bl	80035d4 <HAL_RCC_OscConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001438:	f000 fa4a 	bl	80018d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143c:	230f      	movs	r3, #15
 800143e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001440:	2302      	movs	r3, #2
 8001442:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800144e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001452:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2102      	movs	r1, #2
 800145a:	4618      	mov	r0, r3
 800145c:	f002 fb32 	bl	8003ac4 <HAL_RCC_ClockConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001466:	f000 fa33 	bl	80018d0 <Error_Handler>
  }
}
 800146a:	bf00      	nop
 800146c:	3750      	adds	r7, #80	; 0x50
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40007000 	.word	0x40007000

0800147c <Initialize_Encoder_Count>:

/* USER CODE BEGIN 4 */
void Initialize_Encoder_Count(){
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
	TIM2 -> CNT = 0;
 8001480:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001484:	2200      	movs	r2, #0
 8001486:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3 -> CNT = 0;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <Initialize_Encoder_Count+0x28>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = 0;
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <Initialize_Encoder_Count+0x2c>)
 8001490:	2200      	movs	r2, #0
 8001492:	625a      	str	r2, [r3, #36]	; 0x24
	TIM5 -> CNT = 0;
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <Initialize_Encoder_Count+0x30>)
 8001496:	2200      	movs	r2, #0
 8001498:	625a      	str	r2, [r3, #36]	; 0x24
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	40000400 	.word	0x40000400
 80014a8:	40000800 	.word	0x40000800
 80014ac:	40000c00 	.word	0x40000c00

080014b0 <Receive_Encoder_Count>:
void Receive_Encoder_Count(){
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
	//TIM2 : LF, TIM3 : RF, TIM4 : RB, TIM5 : LB
	  //CntR = (TIM3 -> CNT >> 3) + (TIM4 -> CNT >> 3);
	  //CntL = (TIM2 -> CNT >> 3) + (TIM5 -> CNT >> 3);
		CntR = TIM4 -> CNT >> 2;
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <Receive_Encoder_Count+0x28>)
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <Receive_Encoder_Count+0x2c>)
 80014be:	801a      	strh	r2, [r3, #0]
		CntL = TIM5 -> CNT >> 2;
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <Receive_Encoder_Count+0x30>)
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <Receive_Encoder_Count+0x34>)
 80014ca:	801a      	strh	r2, [r3, #0]
	  //sprintf(data, "e%u,%u\n\r", CntL, CntR);
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40000800 	.word	0x40000800
 80014dc:	200008f2 	.word	0x200008f2
 80014e0:	40000c00 	.word	0x40000c00
 80014e4:	200008f0 	.word	0x200008f0

080014e8 <Receive_Lidar>:
	imu[6] = MPU6050.Gyro_Z_RAW;

}
**/

void Receive_Lidar(){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	if(scan_start){
 80014ec:	4b6a      	ldr	r3, [pc, #424]	; (8001698 <Receive_Lidar+0x1b0>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80be 	beq.w	8001672 <Receive_Lidar+0x18a>
		HAL_UART_Receive_DMA(&huart3, rx3_data, 5);
 80014f6:	2205      	movs	r2, #5
 80014f8:	4968      	ldr	r1, [pc, #416]	; (800169c <Receive_Lidar+0x1b4>)
 80014fa:	4869      	ldr	r0, [pc, #420]	; (80016a0 <Receive_Lidar+0x1b8>)
 80014fc:	f004 f823 	bl	8005546 <HAL_UART_Receive_DMA>
		Q = rx3_data[0]>>2;
 8001500:	4b66      	ldr	r3, [pc, #408]	; (800169c <Receive_Lidar+0x1b4>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	b2da      	uxtb	r2, r3
 8001508:	4b66      	ldr	r3, [pc, #408]	; (80016a4 <Receive_Lidar+0x1bc>)
 800150a:	701a      	strb	r2, [r3, #0]
		 S = (rx3_data[0] & 0x01) ? 1 : 0;
 800150c:	4b63      	ldr	r3, [pc, #396]	; (800169c <Receive_Lidar+0x1b4>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	bf14      	ite	ne
 8001518:	2301      	movne	r3, #1
 800151a:	2300      	moveq	r3, #0
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4b62      	ldr	r3, [pc, #392]	; (80016a8 <Receive_Lidar+0x1c0>)
 8001520:	701a      	strb	r2, [r3, #0]
		 angle = (rx3_data[2]<<7 | rx3_data[1]>>1)/64;
 8001522:	4b5e      	ldr	r3, [pc, #376]	; (800169c <Receive_Lidar+0x1b4>)
 8001524:	789b      	ldrb	r3, [r3, #2]
 8001526:	01db      	lsls	r3, r3, #7
 8001528:	4a5c      	ldr	r2, [pc, #368]	; (800169c <Receive_Lidar+0x1b4>)
 800152a:	7852      	ldrb	r2, [r2, #1]
 800152c:	0852      	lsrs	r2, r2, #1
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	4313      	orrs	r3, r2
 8001532:	2b00      	cmp	r3, #0
 8001534:	da00      	bge.n	8001538 <Receive_Lidar+0x50>
 8001536:	333f      	adds	r3, #63	; 0x3f
 8001538:	119b      	asrs	r3, r3, #6
 800153a:	b29a      	uxth	r2, r3
 800153c:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <Receive_Lidar+0x1c4>)
 800153e:	801a      	strh	r2, [r3, #0]
		 d = (rx3_data[4]<<8 | rx3_data[3])/4; //distance(mm);
 8001540:	4b56      	ldr	r3, [pc, #344]	; (800169c <Receive_Lidar+0x1b4>)
 8001542:	791b      	ldrb	r3, [r3, #4]
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	4a55      	ldr	r2, [pc, #340]	; (800169c <Receive_Lidar+0x1b4>)
 8001548:	78d2      	ldrb	r2, [r2, #3]
 800154a:	4313      	orrs	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	da00      	bge.n	8001552 <Receive_Lidar+0x6a>
 8001550:	3303      	adds	r3, #3
 8001552:	109b      	asrs	r3, r3, #2
 8001554:	b29a      	uxth	r2, r3
 8001556:	4b56      	ldr	r3, [pc, #344]	; (80016b0 <Receive_Lidar+0x1c8>)
 8001558:	801a      	strh	r2, [r3, #0]
		 if(d >= 10000){
 800155a:	4b55      	ldr	r3, [pc, #340]	; (80016b0 <Receive_Lidar+0x1c8>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001562:	4293      	cmp	r3, r2
 8001564:	d908      	bls.n	8001578 <Receive_Lidar+0x90>
			distance[angle] = 10000;
 8001566:	4b51      	ldr	r3, [pc, #324]	; (80016ac <Receive_Lidar+0x1c4>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	4b51      	ldr	r3, [pc, #324]	; (80016b4 <Receive_Lidar+0x1cc>)
 800156e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001572:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001576:	e007      	b.n	8001588 <Receive_Lidar+0xa0>
		 }
		 else{
			distance[angle] = d;
 8001578:	4b4c      	ldr	r3, [pc, #304]	; (80016ac <Receive_Lidar+0x1c4>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b4c      	ldr	r3, [pc, #304]	; (80016b0 <Receive_Lidar+0x1c8>)
 8001580:	8819      	ldrh	r1, [r3, #0]
 8001582:	4b4c      	ldr	r3, [pc, #304]	; (80016b4 <Receive_Lidar+0x1cc>)
 8001584:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		 }
		 if(S == 1){
 8001588:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <Receive_Lidar+0x1c0>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 8081 	beq.w	8001694 <Receive_Lidar+0x1ac>
			avg_DIFF = array_avg_compare(distance);
 8001592:	4848      	ldr	r0, [pc, #288]	; (80016b4 <Receive_Lidar+0x1cc>)
 8001594:	f7ff fdd8 	bl	8001148 <array_avg_compare>
 8001598:	4603      	mov	r3, r0
 800159a:	4a47      	ldr	r2, [pc, #284]	; (80016b8 <Receive_Lidar+0x1d0>)
 800159c:	6013      	str	r3, [r2, #0]
			avg_DIFF*=15;
 800159e:	4b46      	ldr	r3, [pc, #280]	; (80016b8 <Receive_Lidar+0x1d0>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4613      	mov	r3, r2
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	4a43      	ldr	r2, [pc, #268]	; (80016b8 <Receive_Lidar+0x1d0>)
 80015aa:	6013      	str	r3, [r2, #0]
			//printf("%d\r\n", avg_DIFF);
			//avg > 0 when left side get closer
			if(avg_DIFF > 0){
 80015ac:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <Receive_Lidar+0x1d0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	dd1b      	ble.n	80015ec <Receive_Lidar+0x104>
				PID_speed[0] = motor_speed*3;
 80015b4:	4b41      	ldr	r3, [pc, #260]	; (80016bc <Receive_Lidar+0x1d4>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4613      	mov	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	4a40      	ldr	r2, [pc, #256]	; (80016c0 <Receive_Lidar+0x1d8>)
 80015c0:	6013      	str	r3, [r2, #0]
				PID_speed[1] = motor_speed*(-3);
 80015c2:	4b3e      	ldr	r3, [pc, #248]	; (80016bc <Receive_Lidar+0x1d4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	4a3c      	ldr	r2, [pc, #240]	; (80016c0 <Receive_Lidar+0x1d8>)
 80015ce:	6053      	str	r3, [r2, #4]
				PID_speed[2] = motor_speed*(-3);
 80015d0:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <Receive_Lidar+0x1d4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	4a39      	ldr	r2, [pc, #228]	; (80016c0 <Receive_Lidar+0x1d8>)
 80015dc:	6093      	str	r3, [r2, #8]
				PID_speed[3] = motor_speed*3;
 80015de:	4b37      	ldr	r3, [pc, #220]	; (80016bc <Receive_Lidar+0x1d4>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	4613      	mov	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	4a35      	ldr	r2, [pc, #212]	; (80016c0 <Receive_Lidar+0x1d8>)
 80015ea:	60d3      	str	r3, [r2, #12]
			}
			if (avg_DIFF == 0) {
 80015ec:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <Receive_Lidar+0x1d0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d10f      	bne.n	8001614 <Receive_Lidar+0x12c>
				PID_speed[0] = motor_speed;
 80015f4:	4b31      	ldr	r3, [pc, #196]	; (80016bc <Receive_Lidar+0x1d4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a31      	ldr	r2, [pc, #196]	; (80016c0 <Receive_Lidar+0x1d8>)
 80015fa:	6013      	str	r3, [r2, #0]
				PID_speed[1] = motor_speed;
 80015fc:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <Receive_Lidar+0x1d4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a2f      	ldr	r2, [pc, #188]	; (80016c0 <Receive_Lidar+0x1d8>)
 8001602:	6053      	str	r3, [r2, #4]
				PID_speed[2] = motor_speed;
 8001604:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <Receive_Lidar+0x1d4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a2d      	ldr	r2, [pc, #180]	; (80016c0 <Receive_Lidar+0x1d8>)
 800160a:	6093      	str	r3, [r2, #8]
				PID_speed[3] = motor_speed;
 800160c:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <Receive_Lidar+0x1d4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a2b      	ldr	r2, [pc, #172]	; (80016c0 <Receive_Lidar+0x1d8>)
 8001612:	60d3      	str	r3, [r2, #12]
			}
			if (avg_DIFF < 0) {
 8001614:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <Receive_Lidar+0x1d0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	da1b      	bge.n	8001654 <Receive_Lidar+0x16c>
				PID_speed[0] = motor_speed*(-3);
 800161c:	4b27      	ldr	r3, [pc, #156]	; (80016bc <Receive_Lidar+0x1d4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	4a26      	ldr	r2, [pc, #152]	; (80016c0 <Receive_Lidar+0x1d8>)
 8001628:	6013      	str	r3, [r2, #0]
				PID_speed[1] = motor_speed*3;
 800162a:	4b24      	ldr	r3, [pc, #144]	; (80016bc <Receive_Lidar+0x1d4>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	4a22      	ldr	r2, [pc, #136]	; (80016c0 <Receive_Lidar+0x1d8>)
 8001636:	6053      	str	r3, [r2, #4]
				PID_speed[2] = motor_speed*3;
 8001638:	4b20      	ldr	r3, [pc, #128]	; (80016bc <Receive_Lidar+0x1d4>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	4a1f      	ldr	r2, [pc, #124]	; (80016c0 <Receive_Lidar+0x1d8>)
 8001644:	6093      	str	r3, [r2, #8]
				PID_speed[3] = motor_speed*(-3);
 8001646:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <Receive_Lidar+0x1d4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <Receive_Lidar+0x1d8>)
 8001652:	60d3      	str	r3, [r2, #12]
//						}
//			if(PID_speed[3] < 0){
//							PID_speed[3] = 0;
//						}
			//memset(distance, 0, 360);
			 TIM1->CCR1 = 0;
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <Receive_Lidar+0x1dc>)
 8001656:	2200      	movs	r2, #0
 8001658:	635a      	str	r2, [r3, #52]	; 0x34
		     TIM1->CCR2 = 0;
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <Receive_Lidar+0x1dc>)
 800165c:	2200      	movs	r2, #0
 800165e:	639a      	str	r2, [r3, #56]	; 0x38
			 TIM1->CCR3 = 0;
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <Receive_Lidar+0x1dc>)
 8001662:	2200      	movs	r2, #0
 8001664:	63da      	str	r2, [r3, #60]	; 0x3c
			 TIM1->CCR4 = 0;
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <Receive_Lidar+0x1dc>)
 8001668:	2200      	movs	r2, #0
 800166a:	641a      	str	r2, [r3, #64]	; 0x40
					Set_Motor_PWM();
 800166c:	f000 f852 	bl	8001714 <Set_Motor_PWM>
	HAL_UART_Receive(&huart3, rx3_start, 7, 100);
		 if (array_element_of_index_equal(rx3_start, scan_response, 7)){
			scan_start = true;
		 }
	}
}
 8001670:	e010      	b.n	8001694 <Receive_Lidar+0x1ac>
	HAL_UART_Receive(&huart3, rx3_start, 7, 100);
 8001672:	2364      	movs	r3, #100	; 0x64
 8001674:	2207      	movs	r2, #7
 8001676:	4914      	ldr	r1, [pc, #80]	; (80016c8 <Receive_Lidar+0x1e0>)
 8001678:	4809      	ldr	r0, [pc, #36]	; (80016a0 <Receive_Lidar+0x1b8>)
 800167a:	f003 fec2 	bl	8005402 <HAL_UART_Receive>
		 if (array_element_of_index_equal(rx3_start, scan_response, 7)){
 800167e:	2207      	movs	r2, #7
 8001680:	4912      	ldr	r1, [pc, #72]	; (80016cc <Receive_Lidar+0x1e4>)
 8001682:	4811      	ldr	r0, [pc, #68]	; (80016c8 <Receive_Lidar+0x1e0>)
 8001684:	f7ff fd3c 	bl	8001100 <array_element_of_index_equal>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <Receive_Lidar+0x1ac>
			scan_start = true;
 800168e:	4b02      	ldr	r3, [pc, #8]	; (8001698 <Receive_Lidar+0x1b0>)
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	2000060c 	.word	0x2000060c
 800169c:	20000618 	.word	0x20000618
 80016a0:	20000c50 	.word	0x20000c50
 80016a4:	2000061d 	.word	0x2000061d
 80016a8:	2000061e 	.word	0x2000061e
 80016ac:	20000918 	.word	0x20000918
 80016b0:	2000095c 	.word	0x2000095c
 80016b4:	20000620 	.word	0x20000620
 80016b8:	20000908 	.word	0x20000908
 80016bc:	2000000c 	.word	0x2000000c
 80016c0:	200008f4 	.word	0x200008f4
 80016c4:	40010000 	.word	0x40010000
 80016c8:	20000610 	.word	0x20000610
 80016cc:	20000004 	.word	0x20000004

080016d0 <Transmit_Data>:

void Transmit_Data(){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	}
	sprintf(data, "%d\n\r", distance[359]);
	HAL_UART_Transmit_DMA(&huart6, (uint8_t*)data, strlen(data));
	**/
	//Encoder
	sprintf(data, "e%u,%u\n\r", CntL, CntR);
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <Transmit_Data+0x30>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <Transmit_Data+0x34>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	490a      	ldr	r1, [pc, #40]	; (8001708 <Transmit_Data+0x38>)
 80016e0:	480a      	ldr	r0, [pc, #40]	; (800170c <Transmit_Data+0x3c>)
 80016e2:	f005 fa59 	bl	8006b98 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)data, strlen(data), 100);
 80016e6:	4809      	ldr	r0, [pc, #36]	; (800170c <Transmit_Data+0x3c>)
 80016e8:	f7fe fd72 	bl	80001d0 <strlen>
 80016ec:	4603      	mov	r3, r0
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	2364      	movs	r3, #100	; 0x64
 80016f2:	4906      	ldr	r1, [pc, #24]	; (800170c <Transmit_Data+0x3c>)
 80016f4:	4806      	ldr	r0, [pc, #24]	; (8001710 <Transmit_Data+0x40>)
 80016f6:	f003 fdf2 	bl	80052de <HAL_UART_Transmit>
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200008f0 	.word	0x200008f0
 8001704:	200008f2 	.word	0x200008f2
 8001708:	08009008 	.word	0x08009008
 800170c:	2000020c 	.word	0x2000020c
 8001710:	20000d54 	.word	0x20000d54

08001714 <Set_Motor_PWM>:
	old_PID_speed[2] = PID_speed[2];
	old_PID_speed[3] = PID_speed[3];

	//now, let's control motor PWM
}
void Set_Motor_PWM(){
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
	//mind the order LF, RF, LB, RB
	//Set motor rotation direction first
	//LF

	if (PID_speed[0] > 0 || PID_speed[0] == 0){
 800171a:	4b69      	ldr	r3, [pc, #420]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	dc03      	bgt.n	800172a <Set_Motor_PWM+0x16>
 8001722:	4b67      	ldr	r3, [pc, #412]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10c      	bne.n	8001744 <Set_Motor_PWM+0x30>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 800172a:	2201      	movs	r2, #1
 800172c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001730:	4864      	ldr	r0, [pc, #400]	; (80018c4 <Set_Motor_PWM+0x1b0>)
 8001732:	f001 ff35 	bl	80035a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800173c:	4861      	ldr	r0, [pc, #388]	; (80018c4 <Set_Motor_PWM+0x1b0>)
 800173e:	f001 ff2f 	bl	80035a0 <HAL_GPIO_WritePin>
 8001742:	e014      	b.n	800176e <Set_Motor_PWM+0x5a>
	}
	else if(PID_speed[0] < 0){
 8001744:	4b5e      	ldr	r3, [pc, #376]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	da10      	bge.n	800176e <Set_Motor_PWM+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001752:	485c      	ldr	r0, [pc, #368]	; (80018c4 <Set_Motor_PWM+0x1b0>)
 8001754:	f001 ff24 	bl	80035a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 8001758:	2201      	movs	r2, #1
 800175a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800175e:	4859      	ldr	r0, [pc, #356]	; (80018c4 <Set_Motor_PWM+0x1b0>)
 8001760:	f001 ff1e 	bl	80035a0 <HAL_GPIO_WritePin>
		PID_speed[0] *= -1;
 8001764:	4b56      	ldr	r3, [pc, #344]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	425b      	negs	r3, r3
 800176a:	4a55      	ldr	r2, [pc, #340]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 800176c:	6013      	str	r3, [r2, #0]
	}

	//RF
	if (PID_speed[1] > 0 || PID_speed[1] == 0){
 800176e:	4b54      	ldr	r3, [pc, #336]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	dc03      	bgt.n	800177e <Set_Motor_PWM+0x6a>
 8001776:	4b52      	ldr	r3, [pc, #328]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10c      	bne.n	8001798 <Set_Motor_PWM+0x84>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 800177e:	2201      	movs	r2, #1
 8001780:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001784:	484f      	ldr	r0, [pc, #316]	; (80018c4 <Set_Motor_PWM+0x1b0>)
 8001786:	f001 ff0b 	bl	80035a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001790:	484c      	ldr	r0, [pc, #304]	; (80018c4 <Set_Motor_PWM+0x1b0>)
 8001792:	f001 ff05 	bl	80035a0 <HAL_GPIO_WritePin>
 8001796:	e014      	b.n	80017c2 <Set_Motor_PWM+0xae>
	}
	else if(PID_speed[1] < 0){
 8001798:	4b49      	ldr	r3, [pc, #292]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	da10      	bge.n	80017c2 <Set_Motor_PWM+0xae>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a6:	4847      	ldr	r0, [pc, #284]	; (80018c4 <Set_Motor_PWM+0x1b0>)
 80017a8:	f001 fefa 	bl	80035a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017b2:	4844      	ldr	r0, [pc, #272]	; (80018c4 <Set_Motor_PWM+0x1b0>)
 80017b4:	f001 fef4 	bl	80035a0 <HAL_GPIO_WritePin>
		PID_speed[1] *= -1;
 80017b8:	4b41      	ldr	r3, [pc, #260]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	425b      	negs	r3, r3
 80017be:	4a40      	ldr	r2, [pc, #256]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 80017c0:	6053      	str	r3, [r2, #4]
	}

	//RB
	if (PID_speed[2] > 0 || PID_speed[2] == 0){
 80017c2:	4b3f      	ldr	r3, [pc, #252]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	dc03      	bgt.n	80017d2 <Set_Motor_PWM+0xbe>
 80017ca:	4b3d      	ldr	r3, [pc, #244]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10c      	bne.n	80017ec <Set_Motor_PWM+0xd8>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d8:	483b      	ldr	r0, [pc, #236]	; (80018c8 <Set_Motor_PWM+0x1b4>)
 80017da:	f001 fee1 	bl	80035a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e4:	4838      	ldr	r0, [pc, #224]	; (80018c8 <Set_Motor_PWM+0x1b4>)
 80017e6:	f001 fedb 	bl	80035a0 <HAL_GPIO_WritePin>
 80017ea:	e014      	b.n	8001816 <Set_Motor_PWM+0x102>
	}
	else if(PID_speed[2] < 0){
 80017ec:	4b34      	ldr	r3, [pc, #208]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	da10      	bge.n	8001816 <Set_Motor_PWM+0x102>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fa:	4833      	ldr	r0, [pc, #204]	; (80018c8 <Set_Motor_PWM+0x1b4>)
 80017fc:	f001 fed0 	bl	80035a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);
 8001800:	2201      	movs	r2, #1
 8001802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001806:	4830      	ldr	r0, [pc, #192]	; (80018c8 <Set_Motor_PWM+0x1b4>)
 8001808:	f001 feca 	bl	80035a0 <HAL_GPIO_WritePin>
		PID_speed[2] *= -1;
 800180c:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	425b      	negs	r3, r3
 8001812:	4a2b      	ldr	r2, [pc, #172]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 8001814:	6093      	str	r3, [r2, #8]
	}

	//LB
	if (PID_speed[3] > 0 || PID_speed[3] == 0){
 8001816:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	dc03      	bgt.n	8001826 <Set_Motor_PWM+0x112>
 800181e:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10c      	bne.n	8001840 <Set_Motor_PWM+0x12c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, SET);
 8001826:	2201      	movs	r2, #1
 8001828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800182c:	4826      	ldr	r0, [pc, #152]	; (80018c8 <Set_Motor_PWM+0x1b4>)
 800182e:	f001 feb7 	bl	80035a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001838:	4823      	ldr	r0, [pc, #140]	; (80018c8 <Set_Motor_PWM+0x1b4>)
 800183a:	f001 feb1 	bl	80035a0 <HAL_GPIO_WritePin>
 800183e:	e014      	b.n	800186a <Set_Motor_PWM+0x156>
	}
	else if(PID_speed[3] < 0){
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	da10      	bge.n	800186a <Set_Motor_PWM+0x156>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800184e:	481d      	ldr	r0, [pc, #116]	; (80018c4 <Set_Motor_PWM+0x1b0>)
 8001850:	f001 fea6 	bl	80035a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 8001854:	2201      	movs	r2, #1
 8001856:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800185a:	481a      	ldr	r0, [pc, #104]	; (80018c4 <Set_Motor_PWM+0x1b0>)
 800185c:	f001 fea0 	bl	80035a0 <HAL_GPIO_WritePin>
		PID_speed[3] *= -1;
 8001860:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	425b      	negs	r3, r3
 8001866:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 8001868:	60d3      	str	r3, [r2, #12]
	}
	//For Safety, PID_speed won't go beyond 2,000
	uint8_t i = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	71fb      	strb	r3, [r7, #7]
	while (i < 4){
 800186e:	e010      	b.n	8001892 <Set_Motor_PWM+0x17e>
		if (PID_speed[i]> 10000){
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	4a13      	ldr	r2, [pc, #76]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	f242 7210 	movw	r2, #10000	; 0x2710
 800187c:	4293      	cmp	r3, r2
 800187e:	dd05      	ble.n	800188c <Set_Motor_PWM+0x178>
			PID_speed[i] = 10000;
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 8001884:	f242 7110 	movw	r1, #10000	; 0x2710
 8001888:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		i++;
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	3301      	adds	r3, #1
 8001890:	71fb      	strb	r3, [r7, #7]
	while (i < 4){
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	2b03      	cmp	r3, #3
 8001896:	d9eb      	bls.n	8001870 <Set_Motor_PWM+0x15c>
	}
	//Set PWM value
	 TIM1->CCR1 = PID_speed[0];
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <Set_Motor_PWM+0x1b8>)
 800189e:	635a      	str	r2, [r3, #52]	; 0x34
	 TIM1->CCR2 = PID_speed[1];
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <Set_Motor_PWM+0x1b8>)
 80018a6:	639a      	str	r2, [r3, #56]	; 0x38
	 TIM1->CCR3 = PID_speed[2];
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <Set_Motor_PWM+0x1b8>)
 80018ae:	63da      	str	r2, [r3, #60]	; 0x3c
	 TIM1->CCR4 = PID_speed[3];
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <Set_Motor_PWM+0x1ac>)
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <Set_Motor_PWM+0x1b8>)
 80018b6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	200008f4 	.word	0x200008f4
 80018c4:	40020400 	.word	0x40020400
 80018c8:	40020c00 	.word	0x40020c00
 80018cc:	40010000 	.word	0x40010000

080018d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d4:	b672      	cpsid	i
}
 80018d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <Error_Handler+0x8>
	...

080018dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_MspInit+0x4c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	4a0f      	ldr	r2, [pc, #60]	; (8001928 <HAL_MspInit+0x4c>)
 80018ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f0:	6453      	str	r3, [r2, #68]	; 0x44
 80018f2:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <HAL_MspInit+0x4c>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_MspInit+0x4c>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	4a08      	ldr	r2, [pc, #32]	; (8001928 <HAL_MspInit+0x4c>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190c:	6413      	str	r3, [r2, #64]	; 0x40
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_MspInit+0x4c>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800191a:	2007      	movs	r0, #7
 800191c:	f001 f860 	bl	80029e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40023800 	.word	0x40023800

0800192c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <NMI_Handler+0x4>

08001932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <HardFault_Handler+0x4>

08001938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <MemManage_Handler+0x4>

0800193e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <UsageFault_Handler+0x4>

0800194a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001978:	f000 ff1e 	bl	80027b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <DMA1_Stream1_IRQHandler+0x10>)
 8001986:	f001 fa05 	bl	8002d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000bf0 	.word	0x20000bf0

08001994 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <DMA1_Stream3_IRQHandler+0x10>)
 800199a:	f001 f9fb 	bl	8002d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000c94 	.word	0x20000c94

080019a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <TIM6_DAC_IRQHandler+0x10>)
 80019ae:	f002 fd9b 	bl	80044e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000ab8 	.word	0x20000ab8

080019bc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <DMA2_Stream1_IRQHandler+0x10>)
 80019c2:	f001 f9e7 	bl	8002d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000b90 	.word	0x20000b90

080019d0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <DMA2_Stream6_IRQHandler+0x10>)
 80019d6:	f001 f9dd 	bl	8002d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000cf4 	.word	0x20000cf4

080019e4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80019e8:	4807      	ldr	r0, [pc, #28]	; (8001a08 <USART6_IRQHandler+0x24>)
 80019ea:	f003 fddd 	bl	80055a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
	  if(__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <USART6_IRQHandler+0x24>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0310 	and.w	r3, r3, #16
 80019f8:	2b10      	cmp	r3, #16
 80019fa:	d102      	bne.n	8001a02 <USART6_IRQHandler+0x1e>
  HAL_UART_RxCpltCallback(&huart6);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <USART6_IRQHandler+0x24>)
 80019fe:	f003 ff89 	bl	8005914 <HAL_UART_RxCpltCallback>
	  }

  /* USER CODE END USART6_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000d54 	.word	0x20000d54

08001a0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
	return 1;
 8001a10:	2301      	movs	r3, #1
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_kill>:

int _kill(int pid, int sig)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a26:	f004 fc1b 	bl	8006260 <__errno>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2216      	movs	r2, #22
 8001a2e:	601a      	str	r2, [r3, #0]
	return -1;
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <_exit>:

void _exit (int status)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a44:	f04f 31ff 	mov.w	r1, #4294967295
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ffe7 	bl	8001a1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a4e:	e7fe      	b.n	8001a4e <_exit+0x12>

08001a50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	e00a      	b.n	8001a78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a62:	f3af 8000 	nop.w
 8001a66:	4601      	mov	r1, r0
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	60ba      	str	r2, [r7, #8]
 8001a6e:	b2ca      	uxtb	r2, r1
 8001a70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3301      	adds	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	dbf0      	blt.n	8001a62 <_read+0x12>
	}

return len;
 8001a80:	687b      	ldr	r3, [r7, #4]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	e009      	b.n	8001ab0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	60ba      	str	r2, [r7, #8]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3301      	adds	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dbf1      	blt.n	8001a9c <_write+0x12>
	}
	return len;
 8001ab8:	687b      	ldr	r3, [r7, #4]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_close>:

int _close(int file)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
	return -1;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aea:	605a      	str	r2, [r3, #4]
	return 0;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <_isatty>:

int _isatty(int file)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
	return 1;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b34:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <_sbrk+0x5c>)
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <_sbrk+0x60>)
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <_sbrk+0x64>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <_sbrk+0x68>)
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d207      	bcs.n	8001b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b5c:	f004 fb80 	bl	8006260 <__errno>
 8001b60:	4603      	mov	r3, r0
 8001b62:	220c      	movs	r2, #12
 8001b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6a:	e009      	b.n	8001b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <_sbrk+0x64>)
 8001b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20020000 	.word	0x20020000
 8001b8c:	00000400 	.word	0x00000400
 8001b90:	2000090c 	.word	0x2000090c
 8001b94:	20000db0 	.word	0x20000db0

08001b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <SystemInit+0x20>)
 8001b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <SystemInit+0x20>)
 8001ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b096      	sub	sp, #88	; 0x58
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
 8001be8:	611a      	str	r2, [r3, #16]
 8001bea:	615a      	str	r2, [r3, #20]
 8001bec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f004 fb5d 	bl	80062b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bfa:	4b50      	ldr	r3, [pc, #320]	; (8001d3c <MX_TIM1_Init+0x180>)
 8001bfc:	4a50      	ldr	r2, [pc, #320]	; (8001d40 <MX_TIM1_Init+0x184>)
 8001bfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001c00:	4b4e      	ldr	r3, [pc, #312]	; (8001d3c <MX_TIM1_Init+0x180>)
 8001c02:	22a7      	movs	r2, #167	; 0xa7
 8001c04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c06:	4b4d      	ldr	r3, [pc, #308]	; (8001d3c <MX_TIM1_Init+0x180>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8001c0c:	4b4b      	ldr	r3, [pc, #300]	; (8001d3c <MX_TIM1_Init+0x180>)
 8001c0e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c14:	4b49      	ldr	r3, [pc, #292]	; (8001d3c <MX_TIM1_Init+0x180>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c1a:	4b48      	ldr	r3, [pc, #288]	; (8001d3c <MX_TIM1_Init+0x180>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c20:	4b46      	ldr	r3, [pc, #280]	; (8001d3c <MX_TIM1_Init+0x180>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c26:	4845      	ldr	r0, [pc, #276]	; (8001d3c <MX_TIM1_Init+0x180>)
 8001c28:	f002 f948 	bl	8003ebc <HAL_TIM_Base_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001c32:	f7ff fe4d 	bl	80018d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c40:	4619      	mov	r1, r3
 8001c42:	483e      	ldr	r0, [pc, #248]	; (8001d3c <MX_TIM1_Init+0x180>)
 8001c44:	f002 fe16 	bl	8004874 <HAL_TIM_ConfigClockSource>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c4e:	f7ff fe3f 	bl	80018d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c52:	483a      	ldr	r0, [pc, #232]	; (8001d3c <MX_TIM1_Init+0x180>)
 8001c54:	f002 f9f2 	bl	800403c <HAL_TIM_PWM_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001c5e:	f7ff fe37 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4832      	ldr	r0, [pc, #200]	; (8001d3c <MX_TIM1_Init+0x180>)
 8001c72:	f003 fa05 	bl	8005080 <HAL_TIMEx_MasterConfigSynchronization>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c7c:	f7ff fe28 	bl	80018d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c80:	2360      	movs	r3, #96	; 0x60
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c94:	2300      	movs	r3, #0
 8001c96:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4825      	ldr	r0, [pc, #148]	; (8001d3c <MX_TIM1_Init+0x180>)
 8001ca6:	f002 fd27 	bl	80046f8 <HAL_TIM_PWM_ConfigChannel>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001cb0:	f7ff fe0e 	bl	80018d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb8:	2204      	movs	r2, #4
 8001cba:	4619      	mov	r1, r3
 8001cbc:	481f      	ldr	r0, [pc, #124]	; (8001d3c <MX_TIM1_Init+0x180>)
 8001cbe:	f002 fd1b 	bl	80046f8 <HAL_TIM_PWM_ConfigChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001cc8:	f7ff fe02 	bl	80018d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd0:	2208      	movs	r2, #8
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4819      	ldr	r0, [pc, #100]	; (8001d3c <MX_TIM1_Init+0x180>)
 8001cd6:	f002 fd0f 	bl	80046f8 <HAL_TIM_PWM_ConfigChannel>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001ce0:	f7ff fdf6 	bl	80018d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce8:	220c      	movs	r2, #12
 8001cea:	4619      	mov	r1, r3
 8001cec:	4813      	ldr	r0, [pc, #76]	; (8001d3c <MX_TIM1_Init+0x180>)
 8001cee:	f002 fd03 	bl	80046f8 <HAL_TIM_PWM_ConfigChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001cf8:	f7ff fdea 	bl	80018d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4807      	ldr	r0, [pc, #28]	; (8001d3c <MX_TIM1_Init+0x180>)
 8001d20:	f003 fa2a 	bl	8005178 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001d2a:	f7ff fdd1 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d2e:	4803      	ldr	r0, [pc, #12]	; (8001d3c <MX_TIM1_Init+0x180>)
 8001d30:	f000 fad0 	bl	80022d4 <HAL_TIM_MspPostInit>

}
 8001d34:	bf00      	nop
 8001d36:	3758      	adds	r7, #88	; 0x58
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000b00 	.word	0x20000b00
 8001d40:	40010000 	.word	0x40010000

08001d44 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08c      	sub	sp, #48	; 0x30
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	2224      	movs	r2, #36	; 0x24
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f004 faae 	bl	80062b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <MX_TIM2_Init+0xa4>)
 8001d62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d68:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <MX_TIM2_Init+0xa4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <MX_TIM2_Init+0xa4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d74:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <MX_TIM2_Init+0xa4>)
 8001d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <MX_TIM2_Init+0xa4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d82:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <MX_TIM2_Init+0xa4>)
 8001d84:	2280      	movs	r2, #128	; 0x80
 8001d86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d90:	2301      	movs	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001d98:	230a      	movs	r3, #10
 8001d9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001da0:	2301      	movs	r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001da8:	230a      	movs	r3, #10
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	4619      	mov	r1, r3
 8001db2:	480d      	ldr	r0, [pc, #52]	; (8001de8 <MX_TIM2_Init+0xa4>)
 8001db4:	f002 fa64 	bl	8004280 <HAL_TIM_Encoder_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001dbe:	f7ff fd87 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4806      	ldr	r0, [pc, #24]	; (8001de8 <MX_TIM2_Init+0xa4>)
 8001dd0:	f003 f956 	bl	8005080 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001dda:	f7ff fd79 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dde:	bf00      	nop
 8001de0:	3730      	adds	r7, #48	; 0x30
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000b48 	.word	0x20000b48

08001dec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08c      	sub	sp, #48	; 0x30
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	2224      	movs	r2, #36	; 0x24
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f004 fa5a 	bl	80062b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e08:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <MX_TIM3_Init+0xa0>)
 8001e0a:	4a21      	ldr	r2, [pc, #132]	; (8001e90 <MX_TIM3_Init+0xa4>)
 8001e0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <MX_TIM3_Init+0xa0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <MX_TIM3_Init+0xa0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <MX_TIM3_Init+0xa0>)
 8001e1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e22:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <MX_TIM3_Init+0xa0>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <MX_TIM3_Init+0xa0>)
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e36:	2301      	movs	r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001e3e:	230a      	movs	r3, #10
 8001e40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e46:	2301      	movs	r3, #1
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001e4e:	230a      	movs	r3, #10
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e52:	f107 030c 	add.w	r3, r7, #12
 8001e56:	4619      	mov	r1, r3
 8001e58:	480c      	ldr	r0, [pc, #48]	; (8001e8c <MX_TIM3_Init+0xa0>)
 8001e5a:	f002 fa11 	bl	8004280 <HAL_TIM_Encoder_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e64:	f7ff fd34 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	4619      	mov	r1, r3
 8001e74:	4805      	ldr	r0, [pc, #20]	; (8001e8c <MX_TIM3_Init+0xa0>)
 8001e76:	f003 f903 	bl	8005080 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e80:	f7ff fd26 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e84:	bf00      	nop
 8001e86:	3730      	adds	r7, #48	; 0x30
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000a70 	.word	0x20000a70
 8001e90:	40000400 	.word	0x40000400

08001e94 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08c      	sub	sp, #48	; 0x30
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e9a:	f107 030c 	add.w	r3, r7, #12
 8001e9e:	2224      	movs	r2, #36	; 0x24
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f004 fa06 	bl	80062b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001eb0:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <MX_TIM4_Init+0xa0>)
 8001eb2:	4a21      	ldr	r2, [pc, #132]	; (8001f38 <MX_TIM4_Init+0xa4>)
 8001eb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001eb6:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <MX_TIM4_Init+0xa0>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <MX_TIM4_Init+0xa0>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <MX_TIM4_Init+0xa0>)
 8001ec4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eca:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <MX_TIM4_Init+0xa0>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ed0:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <MX_TIM4_Init+0xa0>)
 8001ed2:	2280      	movs	r2, #128	; 0x80
 8001ed4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001ee6:	230a      	movs	r3, #10
 8001ee8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001ef6:	230a      	movs	r3, #10
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001efa:	f107 030c 	add.w	r3, r7, #12
 8001efe:	4619      	mov	r1, r3
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <MX_TIM4_Init+0xa0>)
 8001f02:	f002 f9bd 	bl	8004280 <HAL_TIM_Encoder_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001f0c:	f7ff fce0 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f10:	2300      	movs	r3, #0
 8001f12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4805      	ldr	r0, [pc, #20]	; (8001f34 <MX_TIM4_Init+0xa0>)
 8001f1e:	f003 f8af 	bl	8005080 <HAL_TIMEx_MasterConfigSynchronization>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001f28:	f7ff fcd2 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f2c:	bf00      	nop
 8001f2e:	3730      	adds	r7, #48	; 0x30
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200009e0 	.word	0x200009e0
 8001f38:	40000800 	.word	0x40000800

08001f3c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08c      	sub	sp, #48	; 0x30
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f42:	f107 030c 	add.w	r3, r7, #12
 8001f46:	2224      	movs	r2, #36	; 0x24
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f004 f9b2 	bl	80062b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f58:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <MX_TIM5_Init+0xa0>)
 8001f5a:	4a21      	ldr	r2, [pc, #132]	; (8001fe0 <MX_TIM5_Init+0xa4>)
 8001f5c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f5e:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <MX_TIM5_Init+0xa0>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f64:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <MX_TIM5_Init+0xa0>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <MX_TIM5_Init+0xa0>)
 8001f6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f70:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <MX_TIM5_Init+0xa0>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <MX_TIM5_Init+0xa0>)
 8001f7a:	2280      	movs	r2, #128	; 0x80
 8001f7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f86:	2301      	movs	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001f8e:	230a      	movs	r3, #10
 8001f90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f92:	2300      	movs	r3, #0
 8001f94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f96:	2301      	movs	r3, #1
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001f9e:	230a      	movs	r3, #10
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001fa2:	f107 030c 	add.w	r3, r7, #12
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480c      	ldr	r0, [pc, #48]	; (8001fdc <MX_TIM5_Init+0xa0>)
 8001faa:	f002 f969 	bl	8004280 <HAL_TIM_Encoder_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001fb4:	f7ff fc8c 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4805      	ldr	r0, [pc, #20]	; (8001fdc <MX_TIM5_Init+0xa0>)
 8001fc6:	f003 f85b 	bl	8005080 <HAL_TIMEx_MasterConfigSynchronization>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001fd0:	f7ff fc7e 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	3730      	adds	r7, #48	; 0x30
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000a28 	.word	0x20000a28
 8001fe0:	40000c00 	.word	0x40000c00

08001fe4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fea:	463b      	mov	r3, r7
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <MX_TIM6_Init+0x64>)
 8001ff4:	4a15      	ldr	r2, [pc, #84]	; (800204c <MX_TIM6_Init+0x68>)
 8001ff6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 41999;
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <MX_TIM6_Init+0x64>)
 8001ffa:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001ffe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <MX_TIM6_Init+0x64>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 199;
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <MX_TIM6_Init+0x64>)
 8002008:	22c7      	movs	r2, #199	; 0xc7
 800200a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200c:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <MX_TIM6_Init+0x64>)
 800200e:	2200      	movs	r2, #0
 8002010:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002012:	480d      	ldr	r0, [pc, #52]	; (8002048 <MX_TIM6_Init+0x64>)
 8002014:	f001 ff52 	bl	8003ebc <HAL_TIM_Base_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800201e:	f7ff fc57 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800202a:	463b      	mov	r3, r7
 800202c:	4619      	mov	r1, r3
 800202e:	4806      	ldr	r0, [pc, #24]	; (8002048 <MX_TIM6_Init+0x64>)
 8002030:	f003 f826 	bl	8005080 <HAL_TIMEx_MasterConfigSynchronization>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800203a:	f7ff fc49 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000ab8 	.word	0x20000ab8
 800204c:	40001000 	.word	0x40001000

08002050 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <HAL_TIM_Base_MspInit+0x70>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d10e      	bne.n	8002080 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <HAL_TIM_Base_MspInit+0x74>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	4a16      	ldr	r2, [pc, #88]	; (80020c4 <HAL_TIM_Base_MspInit+0x74>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6453      	str	r3, [r2, #68]	; 0x44
 8002072:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <HAL_TIM_Base_MspInit+0x74>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800207e:	e01a      	b.n	80020b6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a10      	ldr	r2, [pc, #64]	; (80020c8 <HAL_TIM_Base_MspInit+0x78>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d115      	bne.n	80020b6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_TIM_Base_MspInit+0x74>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	4a0c      	ldr	r2, [pc, #48]	; (80020c4 <HAL_TIM_Base_MspInit+0x74>)
 8002094:	f043 0310 	orr.w	r3, r3, #16
 8002098:	6413      	str	r3, [r2, #64]	; 0x40
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_TIM_Base_MspInit+0x74>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	2036      	movs	r0, #54	; 0x36
 80020ac:	f000 fca3 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020b0:	2036      	movs	r0, #54	; 0x36
 80020b2:	f000 fcbc 	bl	8002a2e <HAL_NVIC_EnableIRQ>
}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40010000 	.word	0x40010000
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40001000 	.word	0x40001000

080020cc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b090      	sub	sp, #64	; 0x40
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ec:	d14a      	bne.n	8002184 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020f2:	4b71      	ldr	r3, [pc, #452]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	4a70      	ldr	r2, [pc, #448]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6413      	str	r3, [r2, #64]	; 0x40
 80020fe:	4b6e      	ldr	r3, [pc, #440]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
 800210e:	4b6a      	ldr	r3, [pc, #424]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a69      	ldr	r2, [pc, #420]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b67      	ldr	r3, [pc, #412]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	623b      	str	r3, [r7, #32]
 800212a:	4b63      	ldr	r3, [pc, #396]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a62      	ldr	r2, [pc, #392]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b60      	ldr	r3, [pc, #384]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	623b      	str	r3, [r7, #32]
 8002140:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002142:	2320      	movs	r3, #32
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002152:	2301      	movs	r3, #1
 8002154:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002156:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800215a:	4619      	mov	r1, r3
 800215c:	4857      	ldr	r0, [pc, #348]	; (80022bc <HAL_TIM_Encoder_MspInit+0x1f0>)
 800215e:	f001 f883 	bl	8003268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002162:	2308      	movs	r3, #8
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002172:	2301      	movs	r3, #1
 8002174:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800217a:	4619      	mov	r1, r3
 800217c:	4850      	ldr	r0, [pc, #320]	; (80022c0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800217e:	f001 f873 	bl	8003268 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002182:	e095      	b.n	80022b0 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM3)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a4e      	ldr	r2, [pc, #312]	; (80022c4 <HAL_TIM_Encoder_MspInit+0x1f8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d12c      	bne.n	80021e8 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a48      	ldr	r2, [pc, #288]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002198:	f043 0302 	orr.w	r3, r3, #2
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b46      	ldr	r3, [pc, #280]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	4b42      	ldr	r3, [pc, #264]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a41      	ldr	r2, [pc, #260]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b3f      	ldr	r3, [pc, #252]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021c6:	23c0      	movs	r3, #192	; 0xc0
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021d6:	2302      	movs	r3, #2
 80021d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021de:	4619      	mov	r1, r3
 80021e0:	4836      	ldr	r0, [pc, #216]	; (80022bc <HAL_TIM_Encoder_MspInit+0x1f0>)
 80021e2:	f001 f841 	bl	8003268 <HAL_GPIO_Init>
}
 80021e6:	e063      	b.n	80022b0 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM4)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a36      	ldr	r2, [pc, #216]	; (80022c8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d12d      	bne.n	800224e <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	4a2f      	ldr	r2, [pc, #188]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	6413      	str	r3, [r2, #64]	; 0x40
 8002202:	4b2d      	ldr	r3, [pc, #180]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	4b29      	ldr	r3, [pc, #164]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a28      	ldr	r2, [pc, #160]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002218:	f043 0308 	orr.w	r3, r3, #8
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b26      	ldr	r3, [pc, #152]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800222a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	2300      	movs	r3, #0
 800223a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800223c:	2302      	movs	r3, #2
 800223e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002240:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002244:	4619      	mov	r1, r3
 8002246:	4821      	ldr	r0, [pc, #132]	; (80022cc <HAL_TIM_Encoder_MspInit+0x200>)
 8002248:	f001 f80e 	bl	8003268 <HAL_GPIO_Init>
}
 800224c:	e030      	b.n	80022b0 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM5)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a1f      	ldr	r2, [pc, #124]	; (80022d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d12b      	bne.n	80022b0 <HAL_TIM_Encoder_MspInit+0x1e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	4a15      	ldr	r2, [pc, #84]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002262:	f043 0308 	orr.w	r3, r3, #8
 8002266:	6413      	str	r3, [r2, #64]	; 0x40
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	4a0e      	ldr	r2, [pc, #56]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6313      	str	r3, [r2, #48]	; 0x30
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002290:	2303      	movs	r3, #3
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2300      	movs	r3, #0
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80022a0:	2302      	movs	r3, #2
 80022a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022a8:	4619      	mov	r1, r3
 80022aa:	4804      	ldr	r0, [pc, #16]	; (80022bc <HAL_TIM_Encoder_MspInit+0x1f0>)
 80022ac:	f000 ffdc 	bl	8003268 <HAL_GPIO_Init>
}
 80022b0:	bf00      	nop
 80022b2:	3740      	adds	r7, #64	; 0x40
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40020000 	.word	0x40020000
 80022c0:	40020400 	.word	0x40020400
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40000800 	.word	0x40000800
 80022cc:	40020c00 	.word	0x40020c00
 80022d0:	40000c00 	.word	0x40000c00

080022d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a12      	ldr	r2, [pc, #72]	; (800233c <HAL_TIM_MspPostInit+0x68>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d11e      	bne.n	8002334 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_TIM_MspPostInit+0x6c>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a10      	ldr	r2, [pc, #64]	; (8002340 <HAL_TIM_MspPostInit+0x6c>)
 8002300:	f043 0310 	orr.w	r3, r3, #16
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_TIM_MspPostInit+0x6c>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002312:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002316:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002324:	2301      	movs	r3, #1
 8002326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	4619      	mov	r1, r3
 800232e:	4805      	ldr	r0, [pc, #20]	; (8002344 <HAL_TIM_MspPostInit+0x70>)
 8002330:	f000 ff9a 	bl	8003268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002334:	bf00      	nop
 8002336:	3720      	adds	r7, #32
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40010000 	.word	0x40010000
 8002340:	40023800 	.word	0x40023800
 8002344:	40021000 	.word	0x40021000

08002348 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <MX_USART3_UART_Init+0x4c>)
 800234e:	4a12      	ldr	r2, [pc, #72]	; (8002398 <MX_USART3_UART_Init+0x50>)
 8002350:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <MX_USART3_UART_Init+0x4c>)
 8002354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002358:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <MX_USART3_UART_Init+0x4c>)
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <MX_USART3_UART_Init+0x4c>)
 8002362:	2200      	movs	r2, #0
 8002364:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <MX_USART3_UART_Init+0x4c>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <MX_USART3_UART_Init+0x4c>)
 800236e:	220c      	movs	r2, #12
 8002370:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <MX_USART3_UART_Init+0x4c>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <MX_USART3_UART_Init+0x4c>)
 800237a:	2200      	movs	r2, #0
 800237c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800237e:	4805      	ldr	r0, [pc, #20]	; (8002394 <MX_USART3_UART_Init+0x4c>)
 8002380:	f002 ff60 	bl	8005244 <HAL_UART_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800238a:	f7ff faa1 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000c50 	.word	0x20000c50
 8002398:	40004800 	.word	0x40004800

0800239c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <MX_USART6_UART_Init+0x4c>)
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <MX_USART6_UART_Init+0x50>)
 80023a4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <MX_USART6_UART_Init+0x4c>)
 80023a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023ac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <MX_USART6_UART_Init+0x4c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <MX_USART6_UART_Init+0x4c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <MX_USART6_UART_Init+0x4c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <MX_USART6_UART_Init+0x4c>)
 80023c2:	220c      	movs	r2, #12
 80023c4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <MX_USART6_UART_Init+0x4c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <MX_USART6_UART_Init+0x4c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <MX_USART6_UART_Init+0x4c>)
 80023d4:	f002 ff36 	bl	8005244 <HAL_UART_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80023de:	f7ff fa77 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000d54 	.word	0x20000d54
 80023ec:	40011400 	.word	0x40011400

080023f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08c      	sub	sp, #48	; 0x30
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 031c 	add.w	r3, r7, #28
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a9f      	ldr	r2, [pc, #636]	; (800268c <HAL_UART_MspInit+0x29c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	f040 809e 	bne.w	8002550 <HAL_UART_MspInit+0x160>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002414:	2300      	movs	r3, #0
 8002416:	61bb      	str	r3, [r7, #24]
 8002418:	4b9d      	ldr	r3, [pc, #628]	; (8002690 <HAL_UART_MspInit+0x2a0>)
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	4a9c      	ldr	r2, [pc, #624]	; (8002690 <HAL_UART_MspInit+0x2a0>)
 800241e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002422:	6413      	str	r3, [r2, #64]	; 0x40
 8002424:	4b9a      	ldr	r3, [pc, #616]	; (8002690 <HAL_UART_MspInit+0x2a0>)
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	4b96      	ldr	r3, [pc, #600]	; (8002690 <HAL_UART_MspInit+0x2a0>)
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	4a95      	ldr	r2, [pc, #596]	; (8002690 <HAL_UART_MspInit+0x2a0>)
 800243a:	f043 0302 	orr.w	r3, r3, #2
 800243e:	6313      	str	r3, [r2, #48]	; 0x30
 8002440:	4b93      	ldr	r3, [pc, #588]	; (8002690 <HAL_UART_MspInit+0x2a0>)
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800244c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002452:	2302      	movs	r3, #2
 8002454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245a:	2303      	movs	r3, #3
 800245c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800245e:	2307      	movs	r3, #7
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002462:	f107 031c 	add.w	r3, r7, #28
 8002466:	4619      	mov	r1, r3
 8002468:	488a      	ldr	r0, [pc, #552]	; (8002694 <HAL_UART_MspInit+0x2a4>)
 800246a:	f000 fefd 	bl	8003268 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800246e:	4b8a      	ldr	r3, [pc, #552]	; (8002698 <HAL_UART_MspInit+0x2a8>)
 8002470:	4a8a      	ldr	r2, [pc, #552]	; (800269c <HAL_UART_MspInit+0x2ac>)
 8002472:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002474:	4b88      	ldr	r3, [pc, #544]	; (8002698 <HAL_UART_MspInit+0x2a8>)
 8002476:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800247a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800247c:	4b86      	ldr	r3, [pc, #536]	; (8002698 <HAL_UART_MspInit+0x2a8>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002482:	4b85      	ldr	r3, [pc, #532]	; (8002698 <HAL_UART_MspInit+0x2a8>)
 8002484:	2200      	movs	r2, #0
 8002486:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002488:	4b83      	ldr	r3, [pc, #524]	; (8002698 <HAL_UART_MspInit+0x2a8>)
 800248a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800248e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002490:	4b81      	ldr	r3, [pc, #516]	; (8002698 <HAL_UART_MspInit+0x2a8>)
 8002492:	2200      	movs	r2, #0
 8002494:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002496:	4b80      	ldr	r3, [pc, #512]	; (8002698 <HAL_UART_MspInit+0x2a8>)
 8002498:	2200      	movs	r2, #0
 800249a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800249c:	4b7e      	ldr	r3, [pc, #504]	; (8002698 <HAL_UART_MspInit+0x2a8>)
 800249e:	2200      	movs	r2, #0
 80024a0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80024a2:	4b7d      	ldr	r3, [pc, #500]	; (8002698 <HAL_UART_MspInit+0x2a8>)
 80024a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80024a8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80024aa:	4b7b      	ldr	r3, [pc, #492]	; (8002698 <HAL_UART_MspInit+0x2a8>)
 80024ac:	2204      	movs	r2, #4
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80024b0:	4b79      	ldr	r3, [pc, #484]	; (8002698 <HAL_UART_MspInit+0x2a8>)
 80024b2:	2203      	movs	r2, #3
 80024b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80024b6:	4b78      	ldr	r3, [pc, #480]	; (8002698 <HAL_UART_MspInit+0x2a8>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80024bc:	4b76      	ldr	r3, [pc, #472]	; (8002698 <HAL_UART_MspInit+0x2a8>)
 80024be:	2200      	movs	r2, #0
 80024c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80024c2:	4875      	ldr	r0, [pc, #468]	; (8002698 <HAL_UART_MspInit+0x2a8>)
 80024c4:	f000 face 	bl	8002a64 <HAL_DMA_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80024ce:	f7ff f9ff 	bl	80018d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a70      	ldr	r2, [pc, #448]	; (8002698 <HAL_UART_MspInit+0x2a8>)
 80024d6:	639a      	str	r2, [r3, #56]	; 0x38
 80024d8:	4a6f      	ldr	r2, [pc, #444]	; (8002698 <HAL_UART_MspInit+0x2a8>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80024de:	4b70      	ldr	r3, [pc, #448]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 80024e0:	4a70      	ldr	r2, [pc, #448]	; (80026a4 <HAL_UART_MspInit+0x2b4>)
 80024e2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80024e4:	4b6e      	ldr	r3, [pc, #440]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 80024e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024ea:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024ec:	4b6c      	ldr	r3, [pc, #432]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 80024ee:	2240      	movs	r2, #64	; 0x40
 80024f0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024f2:	4b6b      	ldr	r3, [pc, #428]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024f8:	4b69      	ldr	r3, [pc, #420]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 80024fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024fe:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002500:	4b67      	ldr	r3, [pc, #412]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 8002502:	2200      	movs	r2, #0
 8002504:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002506:	4b66      	ldr	r3, [pc, #408]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800250c:	4b64      	ldr	r3, [pc, #400]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 800250e:	2200      	movs	r2, #0
 8002510:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002512:	4b63      	ldr	r3, [pc, #396]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 8002514:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002518:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800251a:	4b61      	ldr	r3, [pc, #388]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 800251c:	2204      	movs	r2, #4
 800251e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002520:	4b5f      	ldr	r3, [pc, #380]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 8002522:	2203      	movs	r2, #3
 8002524:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002526:	4b5e      	ldr	r3, [pc, #376]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 8002528:	2200      	movs	r2, #0
 800252a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800252c:	4b5c      	ldr	r3, [pc, #368]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 800252e:	2200      	movs	r2, #0
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002532:	485b      	ldr	r0, [pc, #364]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 8002534:	f000 fa96 	bl	8002a64 <HAL_DMA_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_UART_MspInit+0x152>
    {
      Error_Handler();
 800253e:	f7ff f9c7 	bl	80018d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a56      	ldr	r2, [pc, #344]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 8002546:	635a      	str	r2, [r3, #52]	; 0x34
 8002548:	4a55      	ldr	r2, [pc, #340]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800254e:	e098      	b.n	8002682 <HAL_UART_MspInit+0x292>
  else if(uartHandle->Instance==USART6)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a54      	ldr	r2, [pc, #336]	; (80026a8 <HAL_UART_MspInit+0x2b8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	f040 8093 	bne.w	8002682 <HAL_UART_MspInit+0x292>
    __HAL_RCC_USART6_CLK_ENABLE();
 800255c:	2300      	movs	r3, #0
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	4b4b      	ldr	r3, [pc, #300]	; (8002690 <HAL_UART_MspInit+0x2a0>)
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	4a4a      	ldr	r2, [pc, #296]	; (8002690 <HAL_UART_MspInit+0x2a0>)
 8002566:	f043 0320 	orr.w	r3, r3, #32
 800256a:	6453      	str	r3, [r2, #68]	; 0x44
 800256c:	4b48      	ldr	r3, [pc, #288]	; (8002690 <HAL_UART_MspInit+0x2a0>)
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	f003 0320 	and.w	r3, r3, #32
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	4b44      	ldr	r3, [pc, #272]	; (8002690 <HAL_UART_MspInit+0x2a0>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	4a43      	ldr	r2, [pc, #268]	; (8002690 <HAL_UART_MspInit+0x2a0>)
 8002582:	f043 0304 	orr.w	r3, r3, #4
 8002586:	6313      	str	r3, [r2, #48]	; 0x30
 8002588:	4b41      	ldr	r3, [pc, #260]	; (8002690 <HAL_UART_MspInit+0x2a0>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002594:	23c0      	movs	r3, #192	; 0xc0
 8002596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002598:	2302      	movs	r3, #2
 800259a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a0:	2303      	movs	r3, #3
 80025a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80025a4:	2308      	movs	r3, #8
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a8:	f107 031c 	add.w	r3, r7, #28
 80025ac:	4619      	mov	r1, r3
 80025ae:	483f      	ldr	r0, [pc, #252]	; (80026ac <HAL_UART_MspInit+0x2bc>)
 80025b0:	f000 fe5a 	bl	8003268 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80025b4:	4b3e      	ldr	r3, [pc, #248]	; (80026b0 <HAL_UART_MspInit+0x2c0>)
 80025b6:	4a3f      	ldr	r2, [pc, #252]	; (80026b4 <HAL_UART_MspInit+0x2c4>)
 80025b8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80025ba:	4b3d      	ldr	r3, [pc, #244]	; (80026b0 <HAL_UART_MspInit+0x2c0>)
 80025bc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80025c0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025c2:	4b3b      	ldr	r3, [pc, #236]	; (80026b0 <HAL_UART_MspInit+0x2c0>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025c8:	4b39      	ldr	r3, [pc, #228]	; (80026b0 <HAL_UART_MspInit+0x2c0>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025ce:	4b38      	ldr	r3, [pc, #224]	; (80026b0 <HAL_UART_MspInit+0x2c0>)
 80025d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025d4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025d6:	4b36      	ldr	r3, [pc, #216]	; (80026b0 <HAL_UART_MspInit+0x2c0>)
 80025d8:	2200      	movs	r2, #0
 80025da:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025dc:	4b34      	ldr	r3, [pc, #208]	; (80026b0 <HAL_UART_MspInit+0x2c0>)
 80025de:	2200      	movs	r2, #0
 80025e0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80025e2:	4b33      	ldr	r3, [pc, #204]	; (80026b0 <HAL_UART_MspInit+0x2c0>)
 80025e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e8:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80025ea:	4b31      	ldr	r3, [pc, #196]	; (80026b0 <HAL_UART_MspInit+0x2c0>)
 80025ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80025f0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025f2:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <HAL_UART_MspInit+0x2c0>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80025f8:	482d      	ldr	r0, [pc, #180]	; (80026b0 <HAL_UART_MspInit+0x2c0>)
 80025fa:	f000 fa33 	bl	8002a64 <HAL_DMA_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8002604:	f7ff f964 	bl	80018d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a29      	ldr	r2, [pc, #164]	; (80026b0 <HAL_UART_MspInit+0x2c0>)
 800260c:	639a      	str	r2, [r3, #56]	; 0x38
 800260e:	4a28      	ldr	r2, [pc, #160]	; (80026b0 <HAL_UART_MspInit+0x2c0>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002614:	4b28      	ldr	r3, [pc, #160]	; (80026b8 <HAL_UART_MspInit+0x2c8>)
 8002616:	4a29      	ldr	r2, [pc, #164]	; (80026bc <HAL_UART_MspInit+0x2cc>)
 8002618:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800261a:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <HAL_UART_MspInit+0x2c8>)
 800261c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002620:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002622:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <HAL_UART_MspInit+0x2c8>)
 8002624:	2240      	movs	r2, #64	; 0x40
 8002626:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002628:	4b23      	ldr	r3, [pc, #140]	; (80026b8 <HAL_UART_MspInit+0x2c8>)
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800262e:	4b22      	ldr	r3, [pc, #136]	; (80026b8 <HAL_UART_MspInit+0x2c8>)
 8002630:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002634:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002636:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <HAL_UART_MspInit+0x2c8>)
 8002638:	2200      	movs	r2, #0
 800263a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800263c:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <HAL_UART_MspInit+0x2c8>)
 800263e:	2200      	movs	r2, #0
 8002640:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_UART_MspInit+0x2c8>)
 8002644:	2200      	movs	r2, #0
 8002646:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002648:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <HAL_UART_MspInit+0x2c8>)
 800264a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800264e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002650:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <HAL_UART_MspInit+0x2c8>)
 8002652:	2200      	movs	r2, #0
 8002654:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002656:	4818      	ldr	r0, [pc, #96]	; (80026b8 <HAL_UART_MspInit+0x2c8>)
 8002658:	f000 fa04 	bl	8002a64 <HAL_DMA_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_UART_MspInit+0x276>
      Error_Handler();
 8002662:	f7ff f935 	bl	80018d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a13      	ldr	r2, [pc, #76]	; (80026b8 <HAL_UART_MspInit+0x2c8>)
 800266a:	635a      	str	r2, [r3, #52]	; 0x34
 800266c:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <HAL_UART_MspInit+0x2c8>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2100      	movs	r1, #0
 8002676:	2047      	movs	r0, #71	; 0x47
 8002678:	f000 f9bd 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800267c:	2047      	movs	r0, #71	; 0x47
 800267e:	f000 f9d6 	bl	8002a2e <HAL_NVIC_EnableIRQ>
}
 8002682:	bf00      	nop
 8002684:	3730      	adds	r7, #48	; 0x30
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40004800 	.word	0x40004800
 8002690:	40023800 	.word	0x40023800
 8002694:	40020400 	.word	0x40020400
 8002698:	20000bf0 	.word	0x20000bf0
 800269c:	40026028 	.word	0x40026028
 80026a0:	20000c94 	.word	0x20000c94
 80026a4:	40026058 	.word	0x40026058
 80026a8:	40011400 	.word	0x40011400
 80026ac:	40020800 	.word	0x40020800
 80026b0:	20000b90 	.word	0x20000b90
 80026b4:	40026428 	.word	0x40026428
 80026b8:	20000cf4 	.word	0x20000cf4
 80026bc:	400264a0 	.word	0x400264a0

080026c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026c4:	480d      	ldr	r0, [pc, #52]	; (80026fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026c6:	490e      	ldr	r1, [pc, #56]	; (8002700 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026c8:	4a0e      	ldr	r2, [pc, #56]	; (8002704 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026cc:	e002      	b.n	80026d4 <LoopCopyDataInit>

080026ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d2:	3304      	adds	r3, #4

080026d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d8:	d3f9      	bcc.n	80026ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026da:	4a0b      	ldr	r2, [pc, #44]	; (8002708 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026dc:	4c0b      	ldr	r4, [pc, #44]	; (800270c <LoopFillZerobss+0x26>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e0:	e001      	b.n	80026e6 <LoopFillZerobss>

080026e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e4:	3204      	adds	r2, #4

080026e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e8:	d3fb      	bcc.n	80026e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026ea:	f7ff fa55 	bl	8001b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ee:	f003 fdbd 	bl	800626c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f2:	f7fe fd9f 	bl	8001234 <main>
  bx  lr    
 80026f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002700:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002704:	08009434 	.word	0x08009434
  ldr r2, =_sbss
 8002708:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800270c:	20000dac 	.word	0x20000dac

08002710 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002710:	e7fe      	b.n	8002710 <ADC_IRQHandler>
	...

08002714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <HAL_Init+0x40>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0d      	ldr	r2, [pc, #52]	; (8002754 <HAL_Init+0x40>)
 800271e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002722:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_Init+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <HAL_Init+0x40>)
 800272a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800272e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_Init+0x40>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a07      	ldr	r2, [pc, #28]	; (8002754 <HAL_Init+0x40>)
 8002736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800273c:	2003      	movs	r0, #3
 800273e:	f000 f94f 	bl	80029e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002742:	2000      	movs	r0, #0
 8002744:	f000 f808 	bl	8002758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002748:	f7ff f8c8 	bl	80018dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023c00 	.word	0x40023c00

08002758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_InitTick+0x54>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_InitTick+0x58>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	4619      	mov	r1, r3
 800276a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800276e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002772:	fbb2 f3f3 	udiv	r3, r2, r3
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f967 	bl	8002a4a <HAL_SYSTICK_Config>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e00e      	b.n	80027a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b0f      	cmp	r3, #15
 800278a:	d80a      	bhi.n	80027a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800278c:	2200      	movs	r2, #0
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	f04f 30ff 	mov.w	r0, #4294967295
 8002794:	f000 f92f 	bl	80029f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002798:	4a06      	ldr	r2, [pc, #24]	; (80027b4 <HAL_InitTick+0x5c>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	e000      	b.n	80027a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000010 	.word	0x20000010
 80027b0:	20000018 	.word	0x20000018
 80027b4:	20000014 	.word	0x20000014

080027b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_IncTick+0x20>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_IncTick+0x24>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	4a04      	ldr	r2, [pc, #16]	; (80027dc <HAL_IncTick+0x24>)
 80027ca:	6013      	str	r3, [r2, #0]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000018 	.word	0x20000018
 80027dc:	20000d98 	.word	0x20000d98

080027e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return uwTick;
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_GetTick+0x14>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000d98 	.word	0x20000d98

080027f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002800:	f7ff ffee 	bl	80027e0 <HAL_GetTick>
 8002804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002810:	d005      	beq.n	800281e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_Delay+0x44>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4413      	add	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800281e:	bf00      	nop
 8002820:	f7ff ffde 	bl	80027e0 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	429a      	cmp	r2, r3
 800282e:	d8f7      	bhi.n	8002820 <HAL_Delay+0x28>
  {
  }
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000018 	.word	0x20000018

08002840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800285c:	4013      	ands	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800286c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002872:	4a04      	ldr	r2, [pc, #16]	; (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	60d3      	str	r3, [r2, #12]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800288c:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <__NVIC_GetPriorityGrouping+0x18>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	0a1b      	lsrs	r3, r3, #8
 8002892:	f003 0307 	and.w	r3, r3, #7
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	db0b      	blt.n	80028ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	f003 021f 	and.w	r2, r3, #31
 80028bc:	4907      	ldr	r1, [pc, #28]	; (80028dc <__NVIC_EnableIRQ+0x38>)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	2001      	movs	r0, #1
 80028c6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	e000e100 	.word	0xe000e100

080028e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	6039      	str	r1, [r7, #0]
 80028ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	db0a      	blt.n	800290a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	490c      	ldr	r1, [pc, #48]	; (800292c <__NVIC_SetPriority+0x4c>)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	0112      	lsls	r2, r2, #4
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	440b      	add	r3, r1
 8002904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002908:	e00a      	b.n	8002920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	b2da      	uxtb	r2, r3
 800290e:	4908      	ldr	r1, [pc, #32]	; (8002930 <__NVIC_SetPriority+0x50>)
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	3b04      	subs	r3, #4
 8002918:	0112      	lsls	r2, r2, #4
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	440b      	add	r3, r1
 800291e:	761a      	strb	r2, [r3, #24]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000e100 	.word	0xe000e100
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002934:	b480      	push	{r7}
 8002936:	b089      	sub	sp, #36	; 0x24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f1c3 0307 	rsb	r3, r3, #7
 800294e:	2b04      	cmp	r3, #4
 8002950:	bf28      	it	cs
 8002952:	2304      	movcs	r3, #4
 8002954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3304      	adds	r3, #4
 800295a:	2b06      	cmp	r3, #6
 800295c:	d902      	bls.n	8002964 <NVIC_EncodePriority+0x30>
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3b03      	subs	r3, #3
 8002962:	e000      	b.n	8002966 <NVIC_EncodePriority+0x32>
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	f04f 32ff 	mov.w	r2, #4294967295
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43da      	mvns	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	401a      	ands	r2, r3
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800297c:	f04f 31ff 	mov.w	r1, #4294967295
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	fa01 f303 	lsl.w	r3, r1, r3
 8002986:	43d9      	mvns	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800298c:	4313      	orrs	r3, r2
         );
}
 800298e:	4618      	mov	r0, r3
 8002990:	3724      	adds	r7, #36	; 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029ac:	d301      	bcc.n	80029b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ae:	2301      	movs	r3, #1
 80029b0:	e00f      	b.n	80029d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029b2:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <SysTick_Config+0x40>)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ba:	210f      	movs	r1, #15
 80029bc:	f04f 30ff 	mov.w	r0, #4294967295
 80029c0:	f7ff ff8e 	bl	80028e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <SysTick_Config+0x40>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ca:	4b04      	ldr	r3, [pc, #16]	; (80029dc <SysTick_Config+0x40>)
 80029cc:	2207      	movs	r2, #7
 80029ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	e000e010 	.word	0xe000e010

080029e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff ff29 	bl	8002840 <__NVIC_SetPriorityGrouping>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b086      	sub	sp, #24
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	4603      	mov	r3, r0
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a08:	f7ff ff3e 	bl	8002888 <__NVIC_GetPriorityGrouping>
 8002a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	6978      	ldr	r0, [r7, #20]
 8002a14:	f7ff ff8e 	bl	8002934 <NVIC_EncodePriority>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff5d 	bl	80028e0 <__NVIC_SetPriority>
}
 8002a26:	bf00      	nop
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff31 	bl	80028a4 <__NVIC_EnableIRQ>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff ffa2 	bl	800299c <SysTick_Config>
 8002a58:	4603      	mov	r3, r0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a70:	f7ff feb6 	bl	80027e0 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e099      	b.n	8002bb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aa0:	e00f      	b.n	8002ac2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aa2:	f7ff fe9d 	bl	80027e0 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b05      	cmp	r3, #5
 8002aae:	d908      	bls.n	8002ac2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2203      	movs	r2, #3
 8002aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e078      	b.n	8002bb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1e8      	bne.n	8002aa2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4b38      	ldr	r3, [pc, #224]	; (8002bbc <HAL_DMA_Init+0x158>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d107      	bne.n	8002b2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	4313      	orrs	r3, r2
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f023 0307 	bic.w	r3, r3, #7
 8002b42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d117      	bne.n	8002b86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00e      	beq.n	8002b86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fb01 	bl	8003170 <DMA_CheckFifoParam>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2240      	movs	r2, #64	; 0x40
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b82:	2301      	movs	r3, #1
 8002b84:	e016      	b.n	8002bb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fab8 	bl	8003104 <DMA_CalcBaseAndBitshift>
 8002b94:	4603      	mov	r3, r0
 8002b96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	223f      	movs	r2, #63	; 0x3f
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	f010803f 	.word	0xf010803f

08002bc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_DMA_Start_IT+0x26>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e040      	b.n	8002c68 <HAL_DMA_Start_IT+0xa8>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d12f      	bne.n	8002c5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fa4a 	bl	80030a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c18:	223f      	movs	r2, #63	; 0x3f
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0216 	orr.w	r2, r2, #22
 8002c2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d007      	beq.n	8002c48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0208 	orr.w	r2, r2, #8
 8002c46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e005      	b.n	8002c66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c62:	2302      	movs	r3, #2
 8002c64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c7e:	f7ff fdaf 	bl	80027e0 <HAL_GetTick>
 8002c82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d008      	beq.n	8002ca2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2280      	movs	r2, #128	; 0x80
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e052      	b.n	8002d48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0216 	bic.w	r2, r2, #22
 8002cb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695a      	ldr	r2, [r3, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d103      	bne.n	8002cd2 <HAL_DMA_Abort+0x62>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0208 	bic.w	r2, r2, #8
 8002ce0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0201 	bic.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf2:	e013      	b.n	8002d1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cf4:	f7ff fd74 	bl	80027e0 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b05      	cmp	r3, #5
 8002d00:	d90c      	bls.n	8002d1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2220      	movs	r2, #32
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2203      	movs	r2, #3
 8002d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e015      	b.n	8002d48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1e4      	bne.n	8002cf4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2e:	223f      	movs	r2, #63	; 0x3f
 8002d30:	409a      	lsls	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d004      	beq.n	8002d6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2280      	movs	r2, #128	; 0x80
 8002d68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e00c      	b.n	8002d88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2205      	movs	r2, #5
 8002d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0201 	bic.w	r2, r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002da0:	4b92      	ldr	r3, [pc, #584]	; (8002fec <HAL_DMA_IRQHandler+0x258>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a92      	ldr	r2, [pc, #584]	; (8002ff0 <HAL_DMA_IRQHandler+0x25c>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	0a9b      	lsrs	r3, r3, #10
 8002dac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbe:	2208      	movs	r2, #8
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d01a      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d013      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0204 	bic.w	r2, r2, #4
 8002de6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	2208      	movs	r2, #8
 8002dee:	409a      	lsls	r2, r3
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e04:	2201      	movs	r2, #1
 8002e06:	409a      	lsls	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d012      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	2201      	movs	r2, #1
 8002e24:	409a      	lsls	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	f043 0202 	orr.w	r2, r3, #2
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	409a      	lsls	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d012      	beq.n	8002e6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00b      	beq.n	8002e6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e58:	2204      	movs	r2, #4
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e64:	f043 0204 	orr.w	r2, r3, #4
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e70:	2210      	movs	r2, #16
 8002e72:	409a      	lsls	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d043      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d03c      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8e:	2210      	movs	r2, #16
 8002e90:	409a      	lsls	r2, r3
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d018      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d108      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d024      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
 8002ec2:	e01f      	b.n	8002f04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01b      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
 8002ed4:	e016      	b.n	8002f04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d107      	bne.n	8002ef4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0208 	bic.w	r2, r2, #8
 8002ef2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	2220      	movs	r2, #32
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 808e 	beq.w	8003032 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 8086 	beq.w	8003032 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	409a      	lsls	r2, r3
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b05      	cmp	r3, #5
 8002f3c:	d136      	bne.n	8002fac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0216 	bic.w	r2, r2, #22
 8002f4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d103      	bne.n	8002f6e <HAL_DMA_IRQHandler+0x1da>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d007      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0208 	bic.w	r2, r2, #8
 8002f7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	223f      	movs	r2, #63	; 0x3f
 8002f84:	409a      	lsls	r2, r3
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d07d      	beq.n	800309e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	4798      	blx	r3
        }
        return;
 8002faa:	e078      	b.n	800309e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d01c      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d108      	bne.n	8002fda <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d030      	beq.n	8003032 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
 8002fd8:	e02b      	b.n	8003032 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d027      	beq.n	8003032 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
 8002fea:	e022      	b.n	8003032 <HAL_DMA_IRQHandler+0x29e>
 8002fec:	20000010 	.word	0x20000010
 8002ff0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10f      	bne.n	8003022 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0210 	bic.w	r2, r2, #16
 8003010:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003036:	2b00      	cmp	r3, #0
 8003038:	d032      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d022      	beq.n	800308c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2205      	movs	r2, #5
 800304a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	3301      	adds	r3, #1
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	429a      	cmp	r2, r3
 8003068:	d307      	bcc.n	800307a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f2      	bne.n	800305e <HAL_DMA_IRQHandler+0x2ca>
 8003078:	e000      	b.n	800307c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800307a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	4798      	blx	r3
 800309c:	e000      	b.n	80030a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800309e:	bf00      	nop
    }
  }
}
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop

080030a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b40      	cmp	r3, #64	; 0x40
 80030d4:	d108      	bne.n	80030e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030e6:	e007      	b.n	80030f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	60da      	str	r2, [r3, #12]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	3b10      	subs	r3, #16
 8003114:	4a14      	ldr	r2, [pc, #80]	; (8003168 <DMA_CalcBaseAndBitshift+0x64>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800311e:	4a13      	ldr	r2, [pc, #76]	; (800316c <DMA_CalcBaseAndBitshift+0x68>)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4413      	add	r3, r2
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d909      	bls.n	8003146 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800313a:	f023 0303 	bic.w	r3, r3, #3
 800313e:	1d1a      	adds	r2, r3, #4
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	659a      	str	r2, [r3, #88]	; 0x58
 8003144:	e007      	b.n	8003156 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800314e:	f023 0303 	bic.w	r3, r3, #3
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	aaaaaaab 	.word	0xaaaaaaab
 800316c:	08009034 	.word	0x08009034

08003170 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d11f      	bne.n	80031ca <DMA_CheckFifoParam+0x5a>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d856      	bhi.n	800323e <DMA_CheckFifoParam+0xce>
 8003190:	a201      	add	r2, pc, #4	; (adr r2, 8003198 <DMA_CheckFifoParam+0x28>)
 8003192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003196:	bf00      	nop
 8003198:	080031a9 	.word	0x080031a9
 800319c:	080031bb 	.word	0x080031bb
 80031a0:	080031a9 	.word	0x080031a9
 80031a4:	0800323f 	.word	0x0800323f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d046      	beq.n	8003242 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b8:	e043      	b.n	8003242 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031c2:	d140      	bne.n	8003246 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c8:	e03d      	b.n	8003246 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d2:	d121      	bne.n	8003218 <DMA_CheckFifoParam+0xa8>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	d837      	bhi.n	800324a <DMA_CheckFifoParam+0xda>
 80031da:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <DMA_CheckFifoParam+0x70>)
 80031dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e0:	080031f1 	.word	0x080031f1
 80031e4:	080031f7 	.word	0x080031f7
 80031e8:	080031f1 	.word	0x080031f1
 80031ec:	08003209 	.word	0x08003209
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
      break;
 80031f4:	e030      	b.n	8003258 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d025      	beq.n	800324e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003206:	e022      	b.n	800324e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003210:	d11f      	bne.n	8003252 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003216:	e01c      	b.n	8003252 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d903      	bls.n	8003226 <DMA_CheckFifoParam+0xb6>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b03      	cmp	r3, #3
 8003222:	d003      	beq.n	800322c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003224:	e018      	b.n	8003258 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	73fb      	strb	r3, [r7, #15]
      break;
 800322a:	e015      	b.n	8003258 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00e      	beq.n	8003256 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
      break;
 800323c:	e00b      	b.n	8003256 <DMA_CheckFifoParam+0xe6>
      break;
 800323e:	bf00      	nop
 8003240:	e00a      	b.n	8003258 <DMA_CheckFifoParam+0xe8>
      break;
 8003242:	bf00      	nop
 8003244:	e008      	b.n	8003258 <DMA_CheckFifoParam+0xe8>
      break;
 8003246:	bf00      	nop
 8003248:	e006      	b.n	8003258 <DMA_CheckFifoParam+0xe8>
      break;
 800324a:	bf00      	nop
 800324c:	e004      	b.n	8003258 <DMA_CheckFifoParam+0xe8>
      break;
 800324e:	bf00      	nop
 8003250:	e002      	b.n	8003258 <DMA_CheckFifoParam+0xe8>
      break;   
 8003252:	bf00      	nop
 8003254:	e000      	b.n	8003258 <DMA_CheckFifoParam+0xe8>
      break;
 8003256:	bf00      	nop
    }
  } 
  
  return status; 
 8003258:	7bfb      	ldrb	r3, [r7, #15]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop

08003268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003268:	b480      	push	{r7}
 800326a:	b089      	sub	sp, #36	; 0x24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800327a:	2300      	movs	r3, #0
 800327c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	e16b      	b.n	800355c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003284:	2201      	movs	r2, #1
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	4013      	ands	r3, r2
 8003296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	429a      	cmp	r2, r3
 800329e:	f040 815a 	bne.w	8003556 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d005      	beq.n	80032ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d130      	bne.n	800331c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	2203      	movs	r2, #3
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032f0:	2201      	movs	r2, #1
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	091b      	lsrs	r3, r3, #4
 8003306:	f003 0201 	and.w	r2, r3, #1
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	2b03      	cmp	r3, #3
 8003326:	d017      	beq.n	8003358 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	2203      	movs	r2, #3
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d123      	bne.n	80033ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	08da      	lsrs	r2, r3, #3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3208      	adds	r2, #8
 800336c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	220f      	movs	r2, #15
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	08da      	lsrs	r2, r3, #3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3208      	adds	r2, #8
 80033a6:	69b9      	ldr	r1, [r7, #24]
 80033a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	2203      	movs	r2, #3
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 0203 	and.w	r2, r3, #3
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80b4 	beq.w	8003556 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	4b60      	ldr	r3, [pc, #384]	; (8003574 <HAL_GPIO_Init+0x30c>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	4a5f      	ldr	r2, [pc, #380]	; (8003574 <HAL_GPIO_Init+0x30c>)
 80033f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033fc:	6453      	str	r3, [r2, #68]	; 0x44
 80033fe:	4b5d      	ldr	r3, [pc, #372]	; (8003574 <HAL_GPIO_Init+0x30c>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800340a:	4a5b      	ldr	r2, [pc, #364]	; (8003578 <HAL_GPIO_Init+0x310>)
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	089b      	lsrs	r3, r3, #2
 8003410:	3302      	adds	r3, #2
 8003412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	220f      	movs	r2, #15
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4013      	ands	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a52      	ldr	r2, [pc, #328]	; (800357c <HAL_GPIO_Init+0x314>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d02b      	beq.n	800348e <HAL_GPIO_Init+0x226>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a51      	ldr	r2, [pc, #324]	; (8003580 <HAL_GPIO_Init+0x318>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d025      	beq.n	800348a <HAL_GPIO_Init+0x222>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a50      	ldr	r2, [pc, #320]	; (8003584 <HAL_GPIO_Init+0x31c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d01f      	beq.n	8003486 <HAL_GPIO_Init+0x21e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a4f      	ldr	r2, [pc, #316]	; (8003588 <HAL_GPIO_Init+0x320>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d019      	beq.n	8003482 <HAL_GPIO_Init+0x21a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a4e      	ldr	r2, [pc, #312]	; (800358c <HAL_GPIO_Init+0x324>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <HAL_GPIO_Init+0x216>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a4d      	ldr	r2, [pc, #308]	; (8003590 <HAL_GPIO_Init+0x328>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00d      	beq.n	800347a <HAL_GPIO_Init+0x212>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a4c      	ldr	r2, [pc, #304]	; (8003594 <HAL_GPIO_Init+0x32c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d007      	beq.n	8003476 <HAL_GPIO_Init+0x20e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a4b      	ldr	r2, [pc, #300]	; (8003598 <HAL_GPIO_Init+0x330>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d101      	bne.n	8003472 <HAL_GPIO_Init+0x20a>
 800346e:	2307      	movs	r3, #7
 8003470:	e00e      	b.n	8003490 <HAL_GPIO_Init+0x228>
 8003472:	2308      	movs	r3, #8
 8003474:	e00c      	b.n	8003490 <HAL_GPIO_Init+0x228>
 8003476:	2306      	movs	r3, #6
 8003478:	e00a      	b.n	8003490 <HAL_GPIO_Init+0x228>
 800347a:	2305      	movs	r3, #5
 800347c:	e008      	b.n	8003490 <HAL_GPIO_Init+0x228>
 800347e:	2304      	movs	r3, #4
 8003480:	e006      	b.n	8003490 <HAL_GPIO_Init+0x228>
 8003482:	2303      	movs	r3, #3
 8003484:	e004      	b.n	8003490 <HAL_GPIO_Init+0x228>
 8003486:	2302      	movs	r3, #2
 8003488:	e002      	b.n	8003490 <HAL_GPIO_Init+0x228>
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <HAL_GPIO_Init+0x228>
 800348e:	2300      	movs	r3, #0
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	f002 0203 	and.w	r2, r2, #3
 8003496:	0092      	lsls	r2, r2, #2
 8003498:	4093      	lsls	r3, r2
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034a0:	4935      	ldr	r1, [pc, #212]	; (8003578 <HAL_GPIO_Init+0x310>)
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	089b      	lsrs	r3, r3, #2
 80034a6:	3302      	adds	r3, #2
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034ae:	4b3b      	ldr	r3, [pc, #236]	; (800359c <HAL_GPIO_Init+0x334>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4013      	ands	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034d2:	4a32      	ldr	r2, [pc, #200]	; (800359c <HAL_GPIO_Init+0x334>)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034d8:	4b30      	ldr	r3, [pc, #192]	; (800359c <HAL_GPIO_Init+0x334>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034fc:	4a27      	ldr	r2, [pc, #156]	; (800359c <HAL_GPIO_Init+0x334>)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003502:	4b26      	ldr	r3, [pc, #152]	; (800359c <HAL_GPIO_Init+0x334>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	43db      	mvns	r3, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4013      	ands	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003526:	4a1d      	ldr	r2, [pc, #116]	; (800359c <HAL_GPIO_Init+0x334>)
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800352c:	4b1b      	ldr	r3, [pc, #108]	; (800359c <HAL_GPIO_Init+0x334>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003550:	4a12      	ldr	r2, [pc, #72]	; (800359c <HAL_GPIO_Init+0x334>)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3301      	adds	r3, #1
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	2b0f      	cmp	r3, #15
 8003560:	f67f ae90 	bls.w	8003284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	3724      	adds	r7, #36	; 0x24
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800
 8003578:	40013800 	.word	0x40013800
 800357c:	40020000 	.word	0x40020000
 8003580:	40020400 	.word	0x40020400
 8003584:	40020800 	.word	0x40020800
 8003588:	40020c00 	.word	0x40020c00
 800358c:	40021000 	.word	0x40021000
 8003590:	40021400 	.word	0x40021400
 8003594:	40021800 	.word	0x40021800
 8003598:	40021c00 	.word	0x40021c00
 800359c:	40013c00 	.word	0x40013c00

080035a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	807b      	strh	r3, [r7, #2]
 80035ac:	4613      	mov	r3, r2
 80035ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035b0:	787b      	ldrb	r3, [r7, #1]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035b6:	887a      	ldrh	r2, [r7, #2]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035bc:	e003      	b.n	80035c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035be:	887b      	ldrh	r3, [r7, #2]
 80035c0:	041a      	lsls	r2, r3, #16
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	619a      	str	r2, [r3, #24]
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
	...

080035d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e264      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d075      	beq.n	80036de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035f2:	4ba3      	ldr	r3, [pc, #652]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d00c      	beq.n	8003618 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035fe:	4ba0      	ldr	r3, [pc, #640]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003606:	2b08      	cmp	r3, #8
 8003608:	d112      	bne.n	8003630 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800360a:	4b9d      	ldr	r3, [pc, #628]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003616:	d10b      	bne.n	8003630 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003618:	4b99      	ldr	r3, [pc, #612]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d05b      	beq.n	80036dc <HAL_RCC_OscConfig+0x108>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d157      	bne.n	80036dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e23f      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003638:	d106      	bne.n	8003648 <HAL_RCC_OscConfig+0x74>
 800363a:	4b91      	ldr	r3, [pc, #580]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a90      	ldr	r2, [pc, #576]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 8003640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	e01d      	b.n	8003684 <HAL_RCC_OscConfig+0xb0>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003650:	d10c      	bne.n	800366c <HAL_RCC_OscConfig+0x98>
 8003652:	4b8b      	ldr	r3, [pc, #556]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a8a      	ldr	r2, [pc, #552]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 8003658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	4b88      	ldr	r3, [pc, #544]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a87      	ldr	r2, [pc, #540]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 8003664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	e00b      	b.n	8003684 <HAL_RCC_OscConfig+0xb0>
 800366c:	4b84      	ldr	r3, [pc, #528]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a83      	ldr	r2, [pc, #524]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 8003672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	4b81      	ldr	r3, [pc, #516]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a80      	ldr	r2, [pc, #512]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 800367e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d013      	beq.n	80036b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368c:	f7ff f8a8 	bl	80027e0 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003694:	f7ff f8a4 	bl	80027e0 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	; 0x64
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e204      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a6:	4b76      	ldr	r3, [pc, #472]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCC_OscConfig+0xc0>
 80036b2:	e014      	b.n	80036de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7ff f894 	bl	80027e0 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036bc:	f7ff f890 	bl	80027e0 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b64      	cmp	r3, #100	; 0x64
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e1f0      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ce:	4b6c      	ldr	r3, [pc, #432]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0xe8>
 80036da:	e000      	b.n	80036de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d063      	beq.n	80037b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ea:	4b65      	ldr	r3, [pc, #404]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00b      	beq.n	800370e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036f6:	4b62      	ldr	r3, [pc, #392]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d11c      	bne.n	800373c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003702:	4b5f      	ldr	r3, [pc, #380]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d116      	bne.n	800373c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370e:	4b5c      	ldr	r3, [pc, #368]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_RCC_OscConfig+0x152>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d001      	beq.n	8003726 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e1c4      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003726:	4b56      	ldr	r3, [pc, #344]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4952      	ldr	r1, [pc, #328]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373a:	e03a      	b.n	80037b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d020      	beq.n	8003786 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003744:	4b4f      	ldr	r3, [pc, #316]	; (8003884 <HAL_RCC_OscConfig+0x2b0>)
 8003746:	2201      	movs	r2, #1
 8003748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374a:	f7ff f849 	bl	80027e0 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003752:	f7ff f845 	bl	80027e0 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e1a5      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003764:	4b46      	ldr	r3, [pc, #280]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f0      	beq.n	8003752 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003770:	4b43      	ldr	r3, [pc, #268]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	4940      	ldr	r1, [pc, #256]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	4313      	orrs	r3, r2
 8003782:	600b      	str	r3, [r1, #0]
 8003784:	e015      	b.n	80037b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003786:	4b3f      	ldr	r3, [pc, #252]	; (8003884 <HAL_RCC_OscConfig+0x2b0>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7ff f828 	bl	80027e0 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003794:	f7ff f824 	bl	80027e0 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e184      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a6:	4b36      	ldr	r3, [pc, #216]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d030      	beq.n	8003820 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d016      	beq.n	80037f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c6:	4b30      	ldr	r3, [pc, #192]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037cc:	f7ff f808 	bl	80027e0 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037d4:	f7ff f804 	bl	80027e0 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e164      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e6:	4b26      	ldr	r3, [pc, #152]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 80037e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x200>
 80037f2:	e015      	b.n	8003820 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f4:	4b24      	ldr	r3, [pc, #144]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037fa:	f7fe fff1 	bl	80027e0 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003802:	f7fe ffed 	bl	80027e0 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e14d      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003814:	4b1a      	ldr	r3, [pc, #104]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 8003816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f0      	bne.n	8003802 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80a0 	beq.w	800396e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800382e:	2300      	movs	r3, #0
 8003830:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003832:	4b13      	ldr	r3, [pc, #76]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10f      	bne.n	800385e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	4a0e      	ldr	r2, [pc, #56]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 8003848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384c:	6413      	str	r3, [r2, #64]	; 0x40
 800384e:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <HAL_RCC_OscConfig+0x2ac>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003856:	60bb      	str	r3, [r7, #8]
 8003858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800385a:	2301      	movs	r3, #1
 800385c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_OscConfig+0x2b8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003866:	2b00      	cmp	r3, #0
 8003868:	d121      	bne.n	80038ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800386a:	4b08      	ldr	r3, [pc, #32]	; (800388c <HAL_RCC_OscConfig+0x2b8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a07      	ldr	r2, [pc, #28]	; (800388c <HAL_RCC_OscConfig+0x2b8>)
 8003870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003876:	f7fe ffb3 	bl	80027e0 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387c:	e011      	b.n	80038a2 <HAL_RCC_OscConfig+0x2ce>
 800387e:	bf00      	nop
 8003880:	40023800 	.word	0x40023800
 8003884:	42470000 	.word	0x42470000
 8003888:	42470e80 	.word	0x42470e80
 800388c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003890:	f7fe ffa6 	bl	80027e0 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e106      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a2:	4b85      	ldr	r3, [pc, #532]	; (8003ab8 <HAL_RCC_OscConfig+0x4e4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d106      	bne.n	80038c4 <HAL_RCC_OscConfig+0x2f0>
 80038b6:	4b81      	ldr	r3, [pc, #516]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	4a80      	ldr	r2, [pc, #512]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	6713      	str	r3, [r2, #112]	; 0x70
 80038c2:	e01c      	b.n	80038fe <HAL_RCC_OscConfig+0x32a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b05      	cmp	r3, #5
 80038ca:	d10c      	bne.n	80038e6 <HAL_RCC_OscConfig+0x312>
 80038cc:	4b7b      	ldr	r3, [pc, #492]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d0:	4a7a      	ldr	r2, [pc, #488]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 80038d2:	f043 0304 	orr.w	r3, r3, #4
 80038d6:	6713      	str	r3, [r2, #112]	; 0x70
 80038d8:	4b78      	ldr	r3, [pc, #480]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038dc:	4a77      	ldr	r2, [pc, #476]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	6713      	str	r3, [r2, #112]	; 0x70
 80038e4:	e00b      	b.n	80038fe <HAL_RCC_OscConfig+0x32a>
 80038e6:	4b75      	ldr	r3, [pc, #468]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	4a74      	ldr	r2, [pc, #464]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	6713      	str	r3, [r2, #112]	; 0x70
 80038f2:	4b72      	ldr	r3, [pc, #456]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	4a71      	ldr	r2, [pc, #452]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 80038f8:	f023 0304 	bic.w	r3, r3, #4
 80038fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d015      	beq.n	8003932 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003906:	f7fe ff6b 	bl	80027e0 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390c:	e00a      	b.n	8003924 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800390e:	f7fe ff67 	bl	80027e0 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	f241 3288 	movw	r2, #5000	; 0x1388
 800391c:	4293      	cmp	r3, r2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e0c5      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003924:	4b65      	ldr	r3, [pc, #404]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 8003926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0ee      	beq.n	800390e <HAL_RCC_OscConfig+0x33a>
 8003930:	e014      	b.n	800395c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003932:	f7fe ff55 	bl	80027e0 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003938:	e00a      	b.n	8003950 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800393a:	f7fe ff51 	bl	80027e0 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	f241 3288 	movw	r2, #5000	; 0x1388
 8003948:	4293      	cmp	r3, r2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e0af      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003950:	4b5a      	ldr	r3, [pc, #360]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ee      	bne.n	800393a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800395c:	7dfb      	ldrb	r3, [r7, #23]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d105      	bne.n	800396e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003962:	4b56      	ldr	r3, [pc, #344]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	4a55      	ldr	r2, [pc, #340]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 8003968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800396c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 809b 	beq.w	8003aae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003978:	4b50      	ldr	r3, [pc, #320]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b08      	cmp	r3, #8
 8003982:	d05c      	beq.n	8003a3e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d141      	bne.n	8003a10 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398c:	4b4c      	ldr	r3, [pc, #304]	; (8003ac0 <HAL_RCC_OscConfig+0x4ec>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003992:	f7fe ff25 	bl	80027e0 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800399a:	f7fe ff21 	bl	80027e0 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e081      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ac:	4b43      	ldr	r3, [pc, #268]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f0      	bne.n	800399a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69da      	ldr	r2, [r3, #28]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	019b      	lsls	r3, r3, #6
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	085b      	lsrs	r3, r3, #1
 80039d0:	3b01      	subs	r3, #1
 80039d2:	041b      	lsls	r3, r3, #16
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	061b      	lsls	r3, r3, #24
 80039dc:	4937      	ldr	r1, [pc, #220]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039e2:	4b37      	ldr	r3, [pc, #220]	; (8003ac0 <HAL_RCC_OscConfig+0x4ec>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fe fefa 	bl	80027e0 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fe fef6 	bl	80027e0 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e056      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a02:	4b2e      	ldr	r3, [pc, #184]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0x41c>
 8003a0e:	e04e      	b.n	8003aae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a10:	4b2b      	ldr	r3, [pc, #172]	; (8003ac0 <HAL_RCC_OscConfig+0x4ec>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a16:	f7fe fee3 	bl	80027e0 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a1e:	f7fe fedf 	bl	80027e0 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e03f      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a30:	4b22      	ldr	r3, [pc, #136]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f0      	bne.n	8003a1e <HAL_RCC_OscConfig+0x44a>
 8003a3c:	e037      	b.n	8003aae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e032      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a4a:	4b1c      	ldr	r3, [pc, #112]	; (8003abc <HAL_RCC_OscConfig+0x4e8>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d028      	beq.n	8003aaa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d121      	bne.n	8003aaa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d11a      	bne.n	8003aaa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a80:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d111      	bne.n	8003aaa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a90:	085b      	lsrs	r3, r3, #1
 8003a92:	3b01      	subs	r3, #1
 8003a94:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d001      	beq.n	8003aae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40007000 	.word	0x40007000
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	42470060 	.word	0x42470060

08003ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0cc      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b68      	ldr	r3, [pc, #416]	; (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d90c      	bls.n	8003b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b65      	ldr	r3, [pc, #404]	; (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aee:	4b63      	ldr	r3, [pc, #396]	; (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0b8      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d020      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b18:	4b59      	ldr	r3, [pc, #356]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4a58      	ldr	r2, [pc, #352]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b30:	4b53      	ldr	r3, [pc, #332]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	4a52      	ldr	r2, [pc, #328]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b3c:	4b50      	ldr	r3, [pc, #320]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	494d      	ldr	r1, [pc, #308]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d044      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d107      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b62:	4b47      	ldr	r3, [pc, #284]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d119      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e07f      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d003      	beq.n	8003b82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d107      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b82:	4b3f      	ldr	r3, [pc, #252]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e06f      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b92:	4b3b      	ldr	r3, [pc, #236]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e067      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ba2:	4b37      	ldr	r3, [pc, #220]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f023 0203 	bic.w	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4934      	ldr	r1, [pc, #208]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb4:	f7fe fe14 	bl	80027e0 <HAL_GetTick>
 8003bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	e00a      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bbc:	f7fe fe10 	bl	80027e0 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e04f      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd2:	4b2b      	ldr	r3, [pc, #172]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 020c 	and.w	r2, r3, #12
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d1eb      	bne.n	8003bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be4:	4b25      	ldr	r3, [pc, #148]	; (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d20c      	bcs.n	8003c0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf2:	4b22      	ldr	r3, [pc, #136]	; (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfa:	4b20      	ldr	r3, [pc, #128]	; (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e032      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c18:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	4916      	ldr	r1, [pc, #88]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d009      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c36:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	490e      	ldr	r1, [pc, #56]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c4a:	f000 f821 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	091b      	lsrs	r3, r3, #4
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	490a      	ldr	r1, [pc, #40]	; (8003c84 <HAL_RCC_ClockConfig+0x1c0>)
 8003c5c:	5ccb      	ldrb	r3, [r1, r3]
 8003c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c62:	4a09      	ldr	r2, [pc, #36]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c66:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <HAL_RCC_ClockConfig+0x1c8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fe fd74 	bl	8002758 <HAL_InitTick>

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40023c00 	.word	0x40023c00
 8003c80:	40023800 	.word	0x40023800
 8003c84:	0800901c 	.word	0x0800901c
 8003c88:	20000010 	.word	0x20000010
 8003c8c:	20000014 	.word	0x20000014

08003c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c94:	b084      	sub	sp, #16
 8003c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	607b      	str	r3, [r7, #4]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ca8:	4b67      	ldr	r3, [pc, #412]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 030c 	and.w	r3, r3, #12
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d00d      	beq.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	f200 80bd 	bhi.w	8003e34 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d003      	beq.n	8003cca <HAL_RCC_GetSysClockFreq+0x3a>
 8003cc2:	e0b7      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cc4:	4b61      	ldr	r3, [pc, #388]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003cc6:	60bb      	str	r3, [r7, #8]
       break;
 8003cc8:	e0b7      	b.n	8003e3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cca:	4b61      	ldr	r3, [pc, #388]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003ccc:	60bb      	str	r3, [r7, #8]
      break;
 8003cce:	e0b4      	b.n	8003e3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cd0:	4b5d      	ldr	r3, [pc, #372]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cd8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cda:	4b5b      	ldr	r3, [pc, #364]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d04d      	beq.n	8003d82 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce6:	4b58      	ldr	r3, [pc, #352]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	099b      	lsrs	r3, r3, #6
 8003cec:	461a      	mov	r2, r3
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cf6:	f04f 0100 	mov.w	r1, #0
 8003cfa:	ea02 0800 	and.w	r8, r2, r0
 8003cfe:	ea03 0901 	and.w	r9, r3, r1
 8003d02:	4640      	mov	r0, r8
 8003d04:	4649      	mov	r1, r9
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	014b      	lsls	r3, r1, #5
 8003d10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d14:	0142      	lsls	r2, r0, #5
 8003d16:	4610      	mov	r0, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	ebb0 0008 	subs.w	r0, r0, r8
 8003d1e:	eb61 0109 	sbc.w	r1, r1, r9
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	018b      	lsls	r3, r1, #6
 8003d2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d30:	0182      	lsls	r2, r0, #6
 8003d32:	1a12      	subs	r2, r2, r0
 8003d34:	eb63 0301 	sbc.w	r3, r3, r1
 8003d38:	f04f 0000 	mov.w	r0, #0
 8003d3c:	f04f 0100 	mov.w	r1, #0
 8003d40:	00d9      	lsls	r1, r3, #3
 8003d42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d46:	00d0      	lsls	r0, r2, #3
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	eb12 0208 	adds.w	r2, r2, r8
 8003d50:	eb43 0309 	adc.w	r3, r3, r9
 8003d54:	f04f 0000 	mov.w	r0, #0
 8003d58:	f04f 0100 	mov.w	r1, #0
 8003d5c:	0259      	lsls	r1, r3, #9
 8003d5e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003d62:	0250      	lsls	r0, r2, #9
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4610      	mov	r0, r2
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	f7fc ff18 	bl	8000ba8 <__aeabi_uldivmod>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	e04a      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d82:	4b31      	ldr	r3, [pc, #196]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	099b      	lsrs	r3, r3, #6
 8003d88:	461a      	mov	r2, r3
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d92:	f04f 0100 	mov.w	r1, #0
 8003d96:	ea02 0400 	and.w	r4, r2, r0
 8003d9a:	ea03 0501 	and.w	r5, r3, r1
 8003d9e:	4620      	mov	r0, r4
 8003da0:	4629      	mov	r1, r5
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	014b      	lsls	r3, r1, #5
 8003dac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003db0:	0142      	lsls	r2, r0, #5
 8003db2:	4610      	mov	r0, r2
 8003db4:	4619      	mov	r1, r3
 8003db6:	1b00      	subs	r0, r0, r4
 8003db8:	eb61 0105 	sbc.w	r1, r1, r5
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	018b      	lsls	r3, r1, #6
 8003dc6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dca:	0182      	lsls	r2, r0, #6
 8003dcc:	1a12      	subs	r2, r2, r0
 8003dce:	eb63 0301 	sbc.w	r3, r3, r1
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f04f 0100 	mov.w	r1, #0
 8003dda:	00d9      	lsls	r1, r3, #3
 8003ddc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003de0:	00d0      	lsls	r0, r2, #3
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	1912      	adds	r2, r2, r4
 8003de8:	eb45 0303 	adc.w	r3, r5, r3
 8003dec:	f04f 0000 	mov.w	r0, #0
 8003df0:	f04f 0100 	mov.w	r1, #0
 8003df4:	0299      	lsls	r1, r3, #10
 8003df6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003dfa:	0290      	lsls	r0, r2, #10
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	461a      	mov	r2, r3
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	f7fc fecc 	bl	8000ba8 <__aeabi_uldivmod>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4613      	mov	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	0c1b      	lsrs	r3, r3, #16
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	3301      	adds	r3, #1
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	60bb      	str	r3, [r7, #8]
      break;
 8003e32:	e002      	b.n	8003e3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e36:	60bb      	str	r3, [r7, #8]
      break;
 8003e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	00f42400 	.word	0x00f42400
 8003e50:	007a1200 	.word	0x007a1200

08003e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e58:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	20000010 	.word	0x20000010

08003e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e70:	f7ff fff0 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003e74:	4602      	mov	r2, r0
 8003e76:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	0a9b      	lsrs	r3, r3, #10
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	4903      	ldr	r1, [pc, #12]	; (8003e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e82:	5ccb      	ldrb	r3, [r1, r3]
 8003e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	0800902c 	.word	0x0800902c

08003e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e98:	f7ff ffdc 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	0b5b      	lsrs	r3, r3, #13
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	4903      	ldr	r1, [pc, #12]	; (8003eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eaa:	5ccb      	ldrb	r3, [r1, r3]
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	0800902c 	.word	0x0800902c

08003ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e041      	b.n	8003f52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fe f8b4 	bl	8002050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f000 fdb0 	bl	8004a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d001      	beq.n	8003f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e04e      	b.n	8004012 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a23      	ldr	r2, [pc, #140]	; (8004020 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d022      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x80>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9e:	d01d      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x80>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1f      	ldr	r2, [pc, #124]	; (8004024 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d018      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x80>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1e      	ldr	r2, [pc, #120]	; (8004028 <HAL_TIM_Base_Start_IT+0xcc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d013      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x80>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1c      	ldr	r2, [pc, #112]	; (800402c <HAL_TIM_Base_Start_IT+0xd0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00e      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x80>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1b      	ldr	r2, [pc, #108]	; (8004030 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d009      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x80>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a19      	ldr	r2, [pc, #100]	; (8004034 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d004      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x80>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a18      	ldr	r2, [pc, #96]	; (8004038 <HAL_TIM_Base_Start_IT+0xdc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d111      	bne.n	8004000 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b06      	cmp	r3, #6
 8003fec:	d010      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0201 	orr.w	r2, r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffe:	e007      	b.n	8004010 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40010000 	.word	0x40010000
 8004024:	40000400 	.word	0x40000400
 8004028:	40000800 	.word	0x40000800
 800402c:	40000c00 	.word	0x40000c00
 8004030:	40010400 	.word	0x40010400
 8004034:	40014000 	.word	0x40014000
 8004038:	40001800 	.word	0x40001800

0800403c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e041      	b.n	80040d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f839 	bl	80040da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3304      	adds	r3, #4
 8004078:	4619      	mov	r1, r3
 800407a:	4610      	mov	r0, r2
 800407c:	f000 fcf0 	bl	8004a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
	...

080040f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d109      	bne.n	8004114 <HAL_TIM_PWM_Start+0x24>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	bf14      	ite	ne
 800410c:	2301      	movne	r3, #1
 800410e:	2300      	moveq	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	e022      	b.n	800415a <HAL_TIM_PWM_Start+0x6a>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2b04      	cmp	r3, #4
 8004118:	d109      	bne.n	800412e <HAL_TIM_PWM_Start+0x3e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b01      	cmp	r3, #1
 8004124:	bf14      	ite	ne
 8004126:	2301      	movne	r3, #1
 8004128:	2300      	moveq	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	e015      	b.n	800415a <HAL_TIM_PWM_Start+0x6a>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b08      	cmp	r3, #8
 8004132:	d109      	bne.n	8004148 <HAL_TIM_PWM_Start+0x58>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b01      	cmp	r3, #1
 800413e:	bf14      	ite	ne
 8004140:	2301      	movne	r3, #1
 8004142:	2300      	moveq	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	e008      	b.n	800415a <HAL_TIM_PWM_Start+0x6a>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	bf14      	ite	ne
 8004154:	2301      	movne	r3, #1
 8004156:	2300      	moveq	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e07c      	b.n	800425c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d104      	bne.n	8004172 <HAL_TIM_PWM_Start+0x82>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004170:	e013      	b.n	800419a <HAL_TIM_PWM_Start+0xaa>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b04      	cmp	r3, #4
 8004176:	d104      	bne.n	8004182 <HAL_TIM_PWM_Start+0x92>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004180:	e00b      	b.n	800419a <HAL_TIM_PWM_Start+0xaa>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b08      	cmp	r3, #8
 8004186:	d104      	bne.n	8004192 <HAL_TIM_PWM_Start+0xa2>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004190:	e003      	b.n	800419a <HAL_TIM_PWM_Start+0xaa>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2202      	movs	r2, #2
 8004196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2201      	movs	r2, #1
 80041a0:	6839      	ldr	r1, [r7, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 ff46 	bl	8005034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a2d      	ldr	r2, [pc, #180]	; (8004264 <HAL_TIM_PWM_Start+0x174>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_TIM_PWM_Start+0xcc>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a2c      	ldr	r2, [pc, #176]	; (8004268 <HAL_TIM_PWM_Start+0x178>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d101      	bne.n	80041c0 <HAL_TIM_PWM_Start+0xd0>
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <HAL_TIM_PWM_Start+0xd2>
 80041c0:	2300      	movs	r3, #0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a22      	ldr	r2, [pc, #136]	; (8004264 <HAL_TIM_PWM_Start+0x174>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d022      	beq.n	8004226 <HAL_TIM_PWM_Start+0x136>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e8:	d01d      	beq.n	8004226 <HAL_TIM_PWM_Start+0x136>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1f      	ldr	r2, [pc, #124]	; (800426c <HAL_TIM_PWM_Start+0x17c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d018      	beq.n	8004226 <HAL_TIM_PWM_Start+0x136>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1d      	ldr	r2, [pc, #116]	; (8004270 <HAL_TIM_PWM_Start+0x180>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <HAL_TIM_PWM_Start+0x136>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <HAL_TIM_PWM_Start+0x184>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00e      	beq.n	8004226 <HAL_TIM_PWM_Start+0x136>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a16      	ldr	r2, [pc, #88]	; (8004268 <HAL_TIM_PWM_Start+0x178>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d009      	beq.n	8004226 <HAL_TIM_PWM_Start+0x136>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a18      	ldr	r2, [pc, #96]	; (8004278 <HAL_TIM_PWM_Start+0x188>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_TIM_PWM_Start+0x136>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a16      	ldr	r2, [pc, #88]	; (800427c <HAL_TIM_PWM_Start+0x18c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d111      	bne.n	800424a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b06      	cmp	r3, #6
 8004236:	d010      	beq.n	800425a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004248:	e007      	b.n	800425a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0201 	orr.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40010000 	.word	0x40010000
 8004268:	40010400 	.word	0x40010400
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800
 8004274:	40000c00 	.word	0x40000c00
 8004278:	40014000 	.word	0x40014000
 800427c:	40001800 	.word	0x40001800

08004280 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e097      	b.n	80043c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7fd ff0f 	bl	80020cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2202      	movs	r2, #2
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042c4:	f023 0307 	bic.w	r3, r3, #7
 80042c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3304      	adds	r3, #4
 80042d2:	4619      	mov	r1, r3
 80042d4:	4610      	mov	r0, r2
 80042d6:	f000 fbc3 	bl	8004a60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004302:	f023 0303 	bic.w	r3, r3, #3
 8004306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	4313      	orrs	r3, r2
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004320:	f023 030c 	bic.w	r3, r3, #12
 8004324:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800432c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004330:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	4313      	orrs	r3, r2
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	011a      	lsls	r2, r3, #4
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	031b      	lsls	r3, r3, #12
 8004350:	4313      	orrs	r3, r2
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800435e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004366:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	4313      	orrs	r3, r2
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d110      	bne.n	800441e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d102      	bne.n	8004408 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004402:	7b7b      	ldrb	r3, [r7, #13]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d001      	beq.n	800440c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e069      	b.n	80044e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800441c:	e031      	b.n	8004482 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b04      	cmp	r3, #4
 8004422:	d110      	bne.n	8004446 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004424:	7bbb      	ldrb	r3, [r7, #14]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d102      	bne.n	8004430 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800442a:	7b3b      	ldrb	r3, [r7, #12]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d001      	beq.n	8004434 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e055      	b.n	80044e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004444:	e01d      	b.n	8004482 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d108      	bne.n	800445e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800444c:	7bbb      	ldrb	r3, [r7, #14]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d105      	bne.n	800445e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004452:	7b7b      	ldrb	r3, [r7, #13]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d102      	bne.n	800445e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004458:	7b3b      	ldrb	r3, [r7, #12]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d001      	beq.n	8004462 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e03e      	b.n	80044e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2202      	movs	r2, #2
 8004466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2202      	movs	r2, #2
 800446e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2202      	movs	r2, #2
 800447e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_TIM_Encoder_Start+0xc4>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b04      	cmp	r3, #4
 800448c:	d008      	beq.n	80044a0 <HAL_TIM_Encoder_Start+0xd4>
 800448e:	e00f      	b.n	80044b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2201      	movs	r2, #1
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fdcb 	bl	8005034 <TIM_CCxChannelCmd>
      break;
 800449e:	e016      	b.n	80044ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2201      	movs	r2, #1
 80044a6:	2104      	movs	r1, #4
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fdc3 	bl	8005034 <TIM_CCxChannelCmd>
      break;
 80044ae:	e00e      	b.n	80044ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2201      	movs	r2, #1
 80044b6:	2100      	movs	r1, #0
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fdbb 	bl	8005034 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2201      	movs	r2, #1
 80044c4:	2104      	movs	r1, #4
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fdb4 	bl	8005034 <TIM_CCxChannelCmd>
      break;
 80044cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0201 	orr.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d122      	bne.n	8004544 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b02      	cmp	r3, #2
 800450a:	d11b      	bne.n	8004544 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0202 	mvn.w	r2, #2
 8004514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa7a 	bl	8004a24 <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fa6c 	bl	8004a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fa7d 	bl	8004a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b04      	cmp	r3, #4
 8004550:	d122      	bne.n	8004598 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b04      	cmp	r3, #4
 800455e:	d11b      	bne.n	8004598 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0204 	mvn.w	r2, #4
 8004568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa50 	bl	8004a24 <HAL_TIM_IC_CaptureCallback>
 8004584:	e005      	b.n	8004592 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fa42 	bl	8004a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fa53 	bl	8004a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d122      	bne.n	80045ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d11b      	bne.n	80045ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0208 	mvn.w	r2, #8
 80045bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2204      	movs	r2, #4
 80045c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fa26 	bl	8004a24 <HAL_TIM_IC_CaptureCallback>
 80045d8:	e005      	b.n	80045e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fa18 	bl	8004a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fa29 	bl	8004a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b10      	cmp	r3, #16
 80045f8:	d122      	bne.n	8004640 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b10      	cmp	r3, #16
 8004606:	d11b      	bne.n	8004640 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f06f 0210 	mvn.w	r2, #16
 8004610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2208      	movs	r2, #8
 8004616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f9fc 	bl	8004a24 <HAL_TIM_IC_CaptureCallback>
 800462c:	e005      	b.n	800463a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f9ee 	bl	8004a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f9ff 	bl	8004a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b01      	cmp	r3, #1
 800464c:	d10e      	bne.n	800466c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	d107      	bne.n	800466c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0201 	mvn.w	r2, #1
 8004664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f9c8 	bl	80049fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004676:	2b80      	cmp	r3, #128	; 0x80
 8004678:	d10e      	bne.n	8004698 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004684:	2b80      	cmp	r3, #128	; 0x80
 8004686:	d107      	bne.n	8004698 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fdcc 	bl	8005230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a2:	2b40      	cmp	r3, #64	; 0x40
 80046a4:	d10e      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d107      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f9c4 	bl	8004a4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d10e      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d107      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f06f 0220 	mvn.w	r2, #32
 80046e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fd96 	bl	800521c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800470e:	2302      	movs	r3, #2
 8004710:	e0ac      	b.n	800486c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b0c      	cmp	r3, #12
 800471e:	f200 809f 	bhi.w	8004860 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004722:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004728:	0800475d 	.word	0x0800475d
 800472c:	08004861 	.word	0x08004861
 8004730:	08004861 	.word	0x08004861
 8004734:	08004861 	.word	0x08004861
 8004738:	0800479d 	.word	0x0800479d
 800473c:	08004861 	.word	0x08004861
 8004740:	08004861 	.word	0x08004861
 8004744:	08004861 	.word	0x08004861
 8004748:	080047df 	.word	0x080047df
 800474c:	08004861 	.word	0x08004861
 8004750:	08004861 	.word	0x08004861
 8004754:	08004861 	.word	0x08004861
 8004758:	0800481f 	.word	0x0800481f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fa1c 	bl	8004ba0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0208 	orr.w	r2, r2, #8
 8004776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0204 	bic.w	r2, r2, #4
 8004786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6999      	ldr	r1, [r3, #24]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	619a      	str	r2, [r3, #24]
      break;
 800479a:	e062      	b.n	8004862 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fa6c 	bl	8004c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6999      	ldr	r1, [r3, #24]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	021a      	lsls	r2, r3, #8
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	619a      	str	r2, [r3, #24]
      break;
 80047dc:	e041      	b.n	8004862 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fac1 	bl	8004d6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69da      	ldr	r2, [r3, #28]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0208 	orr.w	r2, r2, #8
 80047f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0204 	bic.w	r2, r2, #4
 8004808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69d9      	ldr	r1, [r3, #28]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	61da      	str	r2, [r3, #28]
      break;
 800481c:	e021      	b.n	8004862 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fb15 	bl	8004e54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69da      	ldr	r2, [r3, #28]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69d9      	ldr	r1, [r3, #28]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	021a      	lsls	r2, r3, #8
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	61da      	str	r2, [r3, #28]
      break;
 800485e:	e000      	b.n	8004862 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004860:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_TIM_ConfigClockSource+0x18>
 8004888:	2302      	movs	r3, #2
 800488a:	e0b3      	b.n	80049f4 <HAL_TIM_ConfigClockSource+0x180>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c4:	d03e      	beq.n	8004944 <HAL_TIM_ConfigClockSource+0xd0>
 80048c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ca:	f200 8087 	bhi.w	80049dc <HAL_TIM_ConfigClockSource+0x168>
 80048ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d2:	f000 8085 	beq.w	80049e0 <HAL_TIM_ConfigClockSource+0x16c>
 80048d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048da:	d87f      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x168>
 80048dc:	2b70      	cmp	r3, #112	; 0x70
 80048de:	d01a      	beq.n	8004916 <HAL_TIM_ConfigClockSource+0xa2>
 80048e0:	2b70      	cmp	r3, #112	; 0x70
 80048e2:	d87b      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x168>
 80048e4:	2b60      	cmp	r3, #96	; 0x60
 80048e6:	d050      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x116>
 80048e8:	2b60      	cmp	r3, #96	; 0x60
 80048ea:	d877      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x168>
 80048ec:	2b50      	cmp	r3, #80	; 0x50
 80048ee:	d03c      	beq.n	800496a <HAL_TIM_ConfigClockSource+0xf6>
 80048f0:	2b50      	cmp	r3, #80	; 0x50
 80048f2:	d873      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x168>
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	d058      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x136>
 80048f8:	2b40      	cmp	r3, #64	; 0x40
 80048fa:	d86f      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x168>
 80048fc:	2b30      	cmp	r3, #48	; 0x30
 80048fe:	d064      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x156>
 8004900:	2b30      	cmp	r3, #48	; 0x30
 8004902:	d86b      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x168>
 8004904:	2b20      	cmp	r3, #32
 8004906:	d060      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x156>
 8004908:	2b20      	cmp	r3, #32
 800490a:	d867      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x168>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d05c      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x156>
 8004910:	2b10      	cmp	r3, #16
 8004912:	d05a      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004914:	e062      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	6899      	ldr	r1, [r3, #8]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f000 fb65 	bl	8004ff4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004938:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	609a      	str	r2, [r3, #8]
      break;
 8004942:	e04e      	b.n	80049e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6818      	ldr	r0, [r3, #0]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	6899      	ldr	r1, [r3, #8]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f000 fb4e 	bl	8004ff4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004966:	609a      	str	r2, [r3, #8]
      break;
 8004968:	e03b      	b.n	80049e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6859      	ldr	r1, [r3, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	461a      	mov	r2, r3
 8004978:	f000 fac2 	bl	8004f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2150      	movs	r1, #80	; 0x50
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fb1b 	bl	8004fbe <TIM_ITRx_SetConfig>
      break;
 8004988:	e02b      	b.n	80049e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6859      	ldr	r1, [r3, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	461a      	mov	r2, r3
 8004998:	f000 fae1 	bl	8004f5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2160      	movs	r1, #96	; 0x60
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fb0b 	bl	8004fbe <TIM_ITRx_SetConfig>
      break;
 80049a8:	e01b      	b.n	80049e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6859      	ldr	r1, [r3, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	461a      	mov	r2, r3
 80049b8:	f000 faa2 	bl	8004f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2140      	movs	r1, #64	; 0x40
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fafb 	bl	8004fbe <TIM_ITRx_SetConfig>
      break;
 80049c8:	e00b      	b.n	80049e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4619      	mov	r1, r3
 80049d4:	4610      	mov	r0, r2
 80049d6:	f000 faf2 	bl	8004fbe <TIM_ITRx_SetConfig>
        break;
 80049da:	e002      	b.n	80049e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80049dc:	bf00      	nop
 80049de:	e000      	b.n	80049e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80049e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a40      	ldr	r2, [pc, #256]	; (8004b74 <TIM_Base_SetConfig+0x114>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <TIM_Base_SetConfig+0x40>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7e:	d00f      	beq.n	8004aa0 <TIM_Base_SetConfig+0x40>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a3d      	ldr	r2, [pc, #244]	; (8004b78 <TIM_Base_SetConfig+0x118>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00b      	beq.n	8004aa0 <TIM_Base_SetConfig+0x40>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a3c      	ldr	r2, [pc, #240]	; (8004b7c <TIM_Base_SetConfig+0x11c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d007      	beq.n	8004aa0 <TIM_Base_SetConfig+0x40>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a3b      	ldr	r2, [pc, #236]	; (8004b80 <TIM_Base_SetConfig+0x120>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d003      	beq.n	8004aa0 <TIM_Base_SetConfig+0x40>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a3a      	ldr	r2, [pc, #232]	; (8004b84 <TIM_Base_SetConfig+0x124>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d108      	bne.n	8004ab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a2f      	ldr	r2, [pc, #188]	; (8004b74 <TIM_Base_SetConfig+0x114>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d02b      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac0:	d027      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a2c      	ldr	r2, [pc, #176]	; (8004b78 <TIM_Base_SetConfig+0x118>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d023      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a2b      	ldr	r2, [pc, #172]	; (8004b7c <TIM_Base_SetConfig+0x11c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d01f      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a2a      	ldr	r2, [pc, #168]	; (8004b80 <TIM_Base_SetConfig+0x120>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d01b      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a29      	ldr	r2, [pc, #164]	; (8004b84 <TIM_Base_SetConfig+0x124>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d017      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a28      	ldr	r2, [pc, #160]	; (8004b88 <TIM_Base_SetConfig+0x128>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d013      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a27      	ldr	r2, [pc, #156]	; (8004b8c <TIM_Base_SetConfig+0x12c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d00f      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a26      	ldr	r2, [pc, #152]	; (8004b90 <TIM_Base_SetConfig+0x130>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00b      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a25      	ldr	r2, [pc, #148]	; (8004b94 <TIM_Base_SetConfig+0x134>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d007      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a24      	ldr	r2, [pc, #144]	; (8004b98 <TIM_Base_SetConfig+0x138>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d003      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a23      	ldr	r2, [pc, #140]	; (8004b9c <TIM_Base_SetConfig+0x13c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d108      	bne.n	8004b24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a0a      	ldr	r2, [pc, #40]	; (8004b74 <TIM_Base_SetConfig+0x114>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d003      	beq.n	8004b58 <TIM_Base_SetConfig+0xf8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a0c      	ldr	r2, [pc, #48]	; (8004b84 <TIM_Base_SetConfig+0x124>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d103      	bne.n	8004b60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	615a      	str	r2, [r3, #20]
}
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40010000 	.word	0x40010000
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800
 8004b80:	40000c00 	.word	0x40000c00
 8004b84:	40010400 	.word	0x40010400
 8004b88:	40014000 	.word	0x40014000
 8004b8c:	40014400 	.word	0x40014400
 8004b90:	40014800 	.word	0x40014800
 8004b94:	40001800 	.word	0x40001800
 8004b98:	40001c00 	.word	0x40001c00
 8004b9c:	40002000 	.word	0x40002000

08004ba0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f023 0201 	bic.w	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f023 0302 	bic.w	r3, r3, #2
 8004be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a20      	ldr	r2, [pc, #128]	; (8004c78 <TIM_OC1_SetConfig+0xd8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <TIM_OC1_SetConfig+0x64>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a1f      	ldr	r2, [pc, #124]	; (8004c7c <TIM_OC1_SetConfig+0xdc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d10c      	bne.n	8004c1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f023 0308 	bic.w	r3, r3, #8
 8004c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f023 0304 	bic.w	r3, r3, #4
 8004c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a15      	ldr	r2, [pc, #84]	; (8004c78 <TIM_OC1_SetConfig+0xd8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d003      	beq.n	8004c2e <TIM_OC1_SetConfig+0x8e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a14      	ldr	r2, [pc, #80]	; (8004c7c <TIM_OC1_SetConfig+0xdc>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d111      	bne.n	8004c52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	621a      	str	r2, [r3, #32]
}
 8004c6c:	bf00      	nop
 8004c6e:	371c      	adds	r7, #28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	40010000 	.word	0x40010000
 8004c7c:	40010400 	.word	0x40010400

08004c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f023 0210 	bic.w	r2, r3, #16
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	021b      	lsls	r3, r3, #8
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f023 0320 	bic.w	r3, r3, #32
 8004cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a22      	ldr	r2, [pc, #136]	; (8004d64 <TIM_OC2_SetConfig+0xe4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d003      	beq.n	8004ce8 <TIM_OC2_SetConfig+0x68>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a21      	ldr	r2, [pc, #132]	; (8004d68 <TIM_OC2_SetConfig+0xe8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d10d      	bne.n	8004d04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a17      	ldr	r2, [pc, #92]	; (8004d64 <TIM_OC2_SetConfig+0xe4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d003      	beq.n	8004d14 <TIM_OC2_SetConfig+0x94>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a16      	ldr	r2, [pc, #88]	; (8004d68 <TIM_OC2_SetConfig+0xe8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d113      	bne.n	8004d3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	621a      	str	r2, [r3, #32]
}
 8004d56:	bf00      	nop
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40010000 	.word	0x40010000
 8004d68:	40010400 	.word	0x40010400

08004d6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0303 	bic.w	r3, r3, #3
 8004da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a21      	ldr	r2, [pc, #132]	; (8004e4c <TIM_OC3_SetConfig+0xe0>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d003      	beq.n	8004dd2 <TIM_OC3_SetConfig+0x66>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a20      	ldr	r2, [pc, #128]	; (8004e50 <TIM_OC3_SetConfig+0xe4>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d10d      	bne.n	8004dee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	021b      	lsls	r3, r3, #8
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a16      	ldr	r2, [pc, #88]	; (8004e4c <TIM_OC3_SetConfig+0xe0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d003      	beq.n	8004dfe <TIM_OC3_SetConfig+0x92>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a15      	ldr	r2, [pc, #84]	; (8004e50 <TIM_OC3_SetConfig+0xe4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d113      	bne.n	8004e26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	621a      	str	r2, [r3, #32]
}
 8004e40:	bf00      	nop
 8004e42:	371c      	adds	r7, #28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40010400 	.word	0x40010400

08004e54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	021b      	lsls	r3, r3, #8
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	031b      	lsls	r3, r3, #12
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a12      	ldr	r2, [pc, #72]	; (8004ef8 <TIM_OC4_SetConfig+0xa4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_OC4_SetConfig+0x68>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a11      	ldr	r2, [pc, #68]	; (8004efc <TIM_OC4_SetConfig+0xa8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d109      	bne.n	8004ed0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	019b      	lsls	r3, r3, #6
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	621a      	str	r2, [r3, #32]
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40010000 	.word	0x40010000
 8004efc:	40010400 	.word	0x40010400

08004f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	f023 0201 	bic.w	r2, r3, #1
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f023 030a 	bic.w	r3, r3, #10
 8004f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	621a      	str	r2, [r3, #32]
}
 8004f52:	bf00      	nop
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b087      	sub	sp, #28
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f023 0210 	bic.w	r2, r3, #16
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	031b      	lsls	r3, r3, #12
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	621a      	str	r2, [r3, #32]
}
 8004fb2:	bf00      	nop
 8004fb4:	371c      	adds	r7, #28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b085      	sub	sp, #20
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f043 0307 	orr.w	r3, r3, #7
 8004fe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	609a      	str	r2, [r3, #8]
}
 8004fe8:	bf00      	nop
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800500e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	021a      	lsls	r2, r3, #8
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	431a      	orrs	r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	4313      	orrs	r3, r2
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	609a      	str	r2, [r3, #8]
}
 8005028:	bf00      	nop
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f003 031f 	and.w	r3, r3, #31
 8005046:	2201      	movs	r2, #1
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a1a      	ldr	r2, [r3, #32]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	43db      	mvns	r3, r3
 8005056:	401a      	ands	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a1a      	ldr	r2, [r3, #32]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	fa01 f303 	lsl.w	r3, r1, r3
 800506c:	431a      	orrs	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	621a      	str	r2, [r3, #32]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005094:	2302      	movs	r3, #2
 8005096:	e05a      	b.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a21      	ldr	r2, [pc, #132]	; (800515c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d022      	beq.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e4:	d01d      	beq.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1d      	ldr	r2, [pc, #116]	; (8005160 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d018      	beq.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1b      	ldr	r2, [pc, #108]	; (8005164 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d013      	beq.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1a      	ldr	r2, [pc, #104]	; (8005168 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00e      	beq.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a18      	ldr	r2, [pc, #96]	; (800516c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d009      	beq.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a17      	ldr	r2, [pc, #92]	; (8005170 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d004      	beq.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a15      	ldr	r2, [pc, #84]	; (8005174 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d10c      	bne.n	800513c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005128:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	4313      	orrs	r3, r2
 8005132:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40010000 	.word	0x40010000
 8005160:	40000400 	.word	0x40000400
 8005164:	40000800 	.word	0x40000800
 8005168:	40000c00 	.word	0x40000c00
 800516c:	40010400 	.word	0x40010400
 8005170:	40014000 	.word	0x40014000
 8005174:	40001800 	.word	0x40001800

08005178 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005190:	2302      	movs	r3, #2
 8005192:	e03d      	b.n	8005210 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e03f      	b.n	80052d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d106      	bne.n	8005270 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fd f8c0 	bl	80023f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2224      	movs	r2, #36	; 0x24
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005286:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fe21 	bl	8005ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691a      	ldr	r2, [r3, #16]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800529c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695a      	ldr	r2, [r3, #20]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b08a      	sub	sp, #40	; 0x28
 80052e2:	af02      	add	r7, sp, #8
 80052e4:	60f8      	str	r0, [r7, #12]
 80052e6:	60b9      	str	r1, [r7, #8]
 80052e8:	603b      	str	r3, [r7, #0]
 80052ea:	4613      	mov	r3, r2
 80052ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	d17c      	bne.n	80053f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <HAL_UART_Transmit+0x2c>
 8005304:	88fb      	ldrh	r3, [r7, #6]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e075      	b.n	80053fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_UART_Transmit+0x3e>
 8005318:	2302      	movs	r3, #2
 800531a:	e06e      	b.n	80053fa <HAL_UART_Transmit+0x11c>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2221      	movs	r2, #33	; 0x21
 800532e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005332:	f7fd fa55 	bl	80027e0 <HAL_GetTick>
 8005336:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	88fa      	ldrh	r2, [r7, #6]
 800533c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	88fa      	ldrh	r2, [r7, #6]
 8005342:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534c:	d108      	bne.n	8005360 <HAL_UART_Transmit+0x82>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d104      	bne.n	8005360 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005356:	2300      	movs	r3, #0
 8005358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	e003      	b.n	8005368 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005364:	2300      	movs	r3, #0
 8005366:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005370:	e02a      	b.n	80053c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2200      	movs	r2, #0
 800537a:	2180      	movs	r1, #128	; 0x80
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 fba3 	bl	8005ac8 <UART_WaitOnFlagUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e036      	b.n	80053fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10b      	bne.n	80053aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	3302      	adds	r3, #2
 80053a6:	61bb      	str	r3, [r7, #24]
 80053a8:	e007      	b.n	80053ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	781a      	ldrb	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	3301      	adds	r3, #1
 80053b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1cf      	bne.n	8005372 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2200      	movs	r2, #0
 80053da:	2140      	movs	r1, #64	; 0x40
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 fb73 	bl	8005ac8 <UART_WaitOnFlagUntilTimeout>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e006      	b.n	80053fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	e000      	b.n	80053fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80053f8:	2302      	movs	r3, #2
  }
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3720      	adds	r7, #32
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b08a      	sub	sp, #40	; 0x28
 8005406:	af02      	add	r7, sp, #8
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	603b      	str	r3, [r7, #0]
 800540e:	4613      	mov	r3, r2
 8005410:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b20      	cmp	r3, #32
 8005420:	f040 808c 	bne.w	800553c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <HAL_UART_Receive+0x2e>
 800542a:	88fb      	ldrh	r3, [r7, #6]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e084      	b.n	800553e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_UART_Receive+0x40>
 800543e:	2302      	movs	r3, #2
 8005440:	e07d      	b.n	800553e <HAL_UART_Receive+0x13c>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2222      	movs	r2, #34	; 0x22
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800545e:	f7fd f9bf 	bl	80027e0 <HAL_GetTick>
 8005462:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	88fa      	ldrh	r2, [r7, #6]
 8005468:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	88fa      	ldrh	r2, [r7, #6]
 800546e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005478:	d108      	bne.n	800548c <HAL_UART_Receive+0x8a>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d104      	bne.n	800548c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005482:	2300      	movs	r3, #0
 8005484:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	61bb      	str	r3, [r7, #24]
 800548a:	e003      	b.n	8005494 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005490:	2300      	movs	r3, #0
 8005492:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800549c:	e043      	b.n	8005526 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2200      	movs	r2, #0
 80054a6:	2120      	movs	r1, #32
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 fb0d 	bl	8005ac8 <UART_WaitOnFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e042      	b.n	800553e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10c      	bne.n	80054d8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	3302      	adds	r3, #2
 80054d4:	61bb      	str	r3, [r7, #24]
 80054d6:	e01f      	b.n	8005518 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e0:	d007      	beq.n	80054f2 <HAL_UART_Receive+0xf0>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10a      	bne.n	8005500 <HAL_UART_Receive+0xfe>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	e008      	b.n	8005512 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800550c:	b2da      	uxtb	r2, r3
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	3301      	adds	r3, #1
 8005516:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800552a:	b29b      	uxth	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1b6      	bne.n	800549e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	e000      	b.n	800553e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800553c:	2302      	movs	r3, #2
  }
}
 800553e:	4618      	mov	r0, r3
 8005540:	3720      	adds	r7, #32
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	4613      	mov	r3, r2
 8005552:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b20      	cmp	r3, #32
 800555e:	d11d      	bne.n	800559c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_UART_Receive_DMA+0x26>
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e016      	b.n	800559e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_UART_Receive_DMA+0x38>
 800557a:	2302      	movs	r3, #2
 800557c:	e00f      	b.n	800559e <HAL_UART_Receive_DMA+0x58>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800558c:	88fb      	ldrh	r3, [r7, #6]
 800558e:	461a      	mov	r2, r3
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 fae2 	bl	8005b5c <UART_Start_Receive_DMA>
 8005598:	4603      	mov	r3, r0
 800559a:	e000      	b.n	800559e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800559c:	2302      	movs	r3, #2
  }
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08a      	sub	sp, #40	; 0x28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	f003 030f 	and.w	r3, r3, #15
 80055d6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10d      	bne.n	80055fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d008      	beq.n	80055fa <HAL_UART_IRQHandler+0x52>
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fbd5 	bl	8005da2 <UART_Receive_IT>
      return;
 80055f8:	e17c      	b.n	80058f4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80b1 	beq.w	8005764 <HAL_UART_IRQHandler+0x1bc>
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	d105      	bne.n	8005618 <HAL_UART_IRQHandler+0x70>
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 80a6 	beq.w	8005764 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <HAL_UART_IRQHandler+0x90>
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	f043 0201 	orr.w	r2, r3, #1
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	f003 0304 	and.w	r3, r3, #4
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <HAL_UART_IRQHandler+0xb0>
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d005      	beq.n	8005658 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	f043 0202 	orr.w	r2, r3, #2
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <HAL_UART_IRQHandler+0xd0>
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005670:	f043 0204 	orr.w	r2, r3, #4
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00f      	beq.n	80056a2 <HAL_UART_IRQHandler+0xfa>
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b00      	cmp	r3, #0
 800568a:	d104      	bne.n	8005696 <HAL_UART_IRQHandler+0xee>
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d005      	beq.n	80056a2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	f043 0208 	orr.w	r2, r3, #8
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 811f 	beq.w	80058ea <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d007      	beq.n	80056c6 <HAL_UART_IRQHandler+0x11e>
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	f003 0320 	and.w	r3, r3, #32
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fb6e 	bl	8005da2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d0:	2b40      	cmp	r3, #64	; 0x40
 80056d2:	bf0c      	ite	eq
 80056d4:	2301      	moveq	r3, #1
 80056d6:	2300      	movne	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	f003 0308 	and.w	r3, r3, #8
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d102      	bne.n	80056ee <HAL_UART_IRQHandler+0x146>
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d031      	beq.n	8005752 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 faae 	bl	8005c50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fe:	2b40      	cmp	r3, #64	; 0x40
 8005700:	d123      	bne.n	800574a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695a      	ldr	r2, [r3, #20]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005710:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	2b00      	cmp	r3, #0
 8005718:	d013      	beq.n	8005742 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	4a77      	ldr	r2, [pc, #476]	; (80058fc <HAL_UART_IRQHandler+0x354>)
 8005720:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	4618      	mov	r0, r3
 8005728:	f7fd fb12 	bl	8002d50 <HAL_DMA_Abort_IT>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d016      	beq.n	8005760 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800573c:	4610      	mov	r0, r2
 800573e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005740:	e00e      	b.n	8005760 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f8fa 	bl	800593c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005748:	e00a      	b.n	8005760 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f8f6 	bl	800593c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005750:	e006      	b.n	8005760 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f8f2 	bl	800593c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800575e:	e0c4      	b.n	80058ea <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005760:	bf00      	nop
    return;
 8005762:	e0c2      	b.n	80058ea <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	2b01      	cmp	r3, #1
 800576a:	f040 80a2 	bne.w	80058b2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 809c 	beq.w	80058b2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	f003 0310 	and.w	r3, r3, #16
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 8096 	beq.w	80058b2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a6:	2b40      	cmp	r3, #64	; 0x40
 80057a8:	d14f      	bne.n	800584a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80057b4:	8a3b      	ldrh	r3, [r7, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 8099 	beq.w	80058ee <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057c0:	8a3a      	ldrh	r2, [r7, #16]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	f080 8093 	bcs.w	80058ee <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8a3a      	ldrh	r2, [r7, #16]
 80057cc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057d8:	d02b      	beq.n	8005832 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057e8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695a      	ldr	r2, [r3, #20]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0201 	bic.w	r2, r2, #1
 80057f8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695a      	ldr	r2, [r3, #20]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005808:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2220      	movs	r2, #32
 800580e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0210 	bic.w	r2, r2, #16
 8005826:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	4618      	mov	r0, r3
 800582e:	f7fd fa1f 	bl	8002c70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800583a:	b29b      	uxth	r3, r3
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	b29b      	uxth	r3, r3
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f884 	bl	8005950 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005848:	e051      	b.n	80058ee <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005852:	b29b      	uxth	r3, r3
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800585c:	b29b      	uxth	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d047      	beq.n	80058f2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005862:	8a7b      	ldrh	r3, [r7, #18]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d044      	beq.n	80058f2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005876:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	695a      	ldr	r2, [r3, #20]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0201 	bic.w	r2, r2, #1
 8005886:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68da      	ldr	r2, [r3, #12]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0210 	bic.w	r2, r2, #16
 80058a4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058a6:	8a7b      	ldrh	r3, [r7, #18]
 80058a8:	4619      	mov	r1, r3
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f850 	bl	8005950 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80058b0:	e01f      	b.n	80058f2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <HAL_UART_IRQHandler+0x326>
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fa03 	bl	8005cd2 <UART_Transmit_IT>
    return;
 80058cc:	e012      	b.n	80058f4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00d      	beq.n	80058f4 <HAL_UART_IRQHandler+0x34c>
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d008      	beq.n	80058f4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fa45 	bl	8005d72 <UART_EndTransmit_IT>
    return;
 80058e8:	e004      	b.n	80058f4 <HAL_UART_IRQHandler+0x34c>
    return;
 80058ea:	bf00      	nop
 80058ec:	e002      	b.n	80058f4 <HAL_UART_IRQHandler+0x34c>
      return;
 80058ee:	bf00      	nop
 80058f0:	e000      	b.n	80058f4 <HAL_UART_IRQHandler+0x34c>
      return;
 80058f2:	bf00      	nop
  }
}
 80058f4:	3728      	adds	r7, #40	; 0x28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	08005cab 	.word	0x08005cab

08005900 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005980:	2b00      	cmp	r3, #0
 8005982:	d12a      	bne.n	80059da <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005998:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	695a      	ldr	r2, [r3, #20]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0201 	bic.w	r2, r2, #1
 80059a8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	695a      	ldr	r2, [r3, #20]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059b8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d107      	bne.n	80059da <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0210 	bic.w	r2, r2, #16
 80059d8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d106      	bne.n	80059f0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059e6:	4619      	mov	r1, r3
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f7ff ffb1 	bl	8005950 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059ee:	e002      	b.n	80059f6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f7ff ff8f 	bl	8005914 <HAL_UART_RxCpltCallback>
}
 80059f6:	bf00      	nop
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d108      	bne.n	8005a26 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a18:	085b      	lsrs	r3, r3, #1
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f7ff ff96 	bl	8005950 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a24:	e002      	b.n	8005a2c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f7ff ff7e 	bl	8005928 <HAL_UART_RxHalfCpltCallback>
}
 8005a2c:	bf00      	nop
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a44:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a50:	2b80      	cmp	r3, #128	; 0x80
 8005a52:	bf0c      	ite	eq
 8005a54:	2301      	moveq	r3, #1
 8005a56:	2300      	movne	r3, #0
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b21      	cmp	r3, #33	; 0x21
 8005a66:	d108      	bne.n	8005a7a <UART_DMAError+0x46>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2200      	movs	r2, #0
 8005a72:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005a74:	68b8      	ldr	r0, [r7, #8]
 8005a76:	f000 f8d5 	bl	8005c24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a84:	2b40      	cmp	r3, #64	; 0x40
 8005a86:	bf0c      	ite	eq
 8005a88:	2301      	moveq	r3, #1
 8005a8a:	2300      	movne	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b22      	cmp	r3, #34	; 0x22
 8005a9a:	d108      	bne.n	8005aae <UART_DMAError+0x7a>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005aa8:	68b8      	ldr	r0, [r7, #8]
 8005aaa:	f000 f8d1 	bl	8005c50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	f043 0210 	orr.w	r2, r3, #16
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005aba:	68b8      	ldr	r0, [r7, #8]
 8005abc:	f7ff ff3e 	bl	800593c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ac0:	bf00      	nop
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad8:	e02c      	b.n	8005b34 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae0:	d028      	beq.n	8005b34 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d007      	beq.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ae8:	f7fc fe7a 	bl	80027e0 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d21d      	bcs.n	8005b34 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b06:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695a      	ldr	r2, [r3, #20]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0201 	bic.w	r2, r2, #1
 8005b16:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e00f      	b.n	8005b54 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	bf0c      	ite	eq
 8005b44:	2301      	moveq	r3, #1
 8005b46:	2300      	movne	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	79fb      	ldrb	r3, [r7, #7]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d0c3      	beq.n	8005ada <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	88fa      	ldrh	r2, [r7, #6]
 8005b74:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2222      	movs	r2, #34	; 0x22
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	4a23      	ldr	r2, [pc, #140]	; (8005c18 <UART_Start_Receive_DMA+0xbc>)
 8005b8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b90:	4a22      	ldr	r2, [pc, #136]	; (8005c1c <UART_Start_Receive_DMA+0xc0>)
 8005b92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	4a21      	ldr	r2, [pc, #132]	; (8005c20 <UART_Start_Receive_DMA+0xc4>)
 8005b9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005ba4:	f107 0308 	add.w	r3, r7, #8
 8005ba8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	88fb      	ldrh	r3, [r7, #6]
 8005bbc:	f7fd f800 	bl	8002bc0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	613b      	str	r3, [r7, #16]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	613b      	str	r3, [r7, #16]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	613b      	str	r3, [r7, #16]
 8005bd4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bec:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695a      	ldr	r2, [r3, #20]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0201 	orr.w	r2, r2, #1
 8005bfc:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	695a      	ldr	r2, [r3, #20]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c0c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	08005969 	.word	0x08005969
 8005c1c:	080059ff 	.word	0x080059ff
 8005c20:	08005a35 	.word	0x08005a35

08005c24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005c3a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	695a      	ldr	r2, [r3, #20]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0201 	bic.w	r2, r2, #1
 8005c76:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d107      	bne.n	8005c90 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0210 	bic.w	r2, r2, #16
 8005c8e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2220      	movs	r2, #32
 8005c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f7ff fe39 	bl	800593c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cca:	bf00      	nop
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b21      	cmp	r3, #33	; 0x21
 8005ce4:	d13e      	bne.n	8005d64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cee:	d114      	bne.n	8005d1a <UART_Transmit_IT+0x48>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d110      	bne.n	8005d1a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	461a      	mov	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	1c9a      	adds	r2, r3, #2
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	621a      	str	r2, [r3, #32]
 8005d18:	e008      	b.n	8005d2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	1c59      	adds	r1, r3, #1
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6211      	str	r1, [r2, #32]
 8005d24:	781a      	ldrb	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10f      	bne.n	8005d60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	e000      	b.n	8005d66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d64:	2302      	movs	r3, #2
  }
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b082      	sub	sp, #8
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff fdb4 	bl	8005900 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b22      	cmp	r3, #34	; 0x22
 8005db4:	f040 8087 	bne.w	8005ec6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc0:	d117      	bne.n	8005df2 <UART_Receive_IT+0x50>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d113      	bne.n	8005df2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dea:	1c9a      	adds	r2, r3, #2
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	629a      	str	r2, [r3, #40]	; 0x28
 8005df0:	e026      	b.n	8005e40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e04:	d007      	beq.n	8005e16 <UART_Receive_IT+0x74>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10a      	bne.n	8005e24 <UART_Receive_IT+0x82>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	e008      	b.n	8005e36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d136      	bne.n	8005ec2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0220 	bic.w	r2, r2, #32
 8005e62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	695a      	ldr	r2, [r3, #20]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0201 	bic.w	r2, r2, #1
 8005e82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d10e      	bne.n	8005eb2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0210 	bic.w	r2, r2, #16
 8005ea2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff fd50 	bl	8005950 <HAL_UARTEx_RxEventCallback>
 8005eb0:	e002      	b.n	8005eb8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff fd2e 	bl	8005914 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e002      	b.n	8005ec8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	e000      	b.n	8005ec8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005ec6:	2302      	movs	r3, #2
  }
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed4:	b09f      	sub	sp, #124	; 0x7c
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee6:	68d9      	ldr	r1, [r3, #12]
 8005ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	ea40 0301 	orr.w	r3, r0, r1
 8005ef0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	431a      	orrs	r2, r3
 8005f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f14:	f021 010c 	bic.w	r1, r1, #12
 8005f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f1e:	430b      	orrs	r3, r1
 8005f20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2e:	6999      	ldr	r1, [r3, #24]
 8005f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	ea40 0301 	orr.w	r3, r0, r1
 8005f38:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	4bc5      	ldr	r3, [pc, #788]	; (8006254 <UART_SetConfig+0x384>)
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d004      	beq.n	8005f4e <UART_SetConfig+0x7e>
 8005f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	4bc3      	ldr	r3, [pc, #780]	; (8006258 <UART_SetConfig+0x388>)
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d103      	bne.n	8005f56 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f4e:	f7fd ffa1 	bl	8003e94 <HAL_RCC_GetPCLK2Freq>
 8005f52:	6778      	str	r0, [r7, #116]	; 0x74
 8005f54:	e002      	b.n	8005f5c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f56:	f7fd ff89 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 8005f5a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f64:	f040 80b6 	bne.w	80060d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f6a:	461c      	mov	r4, r3
 8005f6c:	f04f 0500 	mov.w	r5, #0
 8005f70:	4622      	mov	r2, r4
 8005f72:	462b      	mov	r3, r5
 8005f74:	1891      	adds	r1, r2, r2
 8005f76:	6439      	str	r1, [r7, #64]	; 0x40
 8005f78:	415b      	adcs	r3, r3
 8005f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f80:	1912      	adds	r2, r2, r4
 8005f82:	eb45 0303 	adc.w	r3, r5, r3
 8005f86:	f04f 0000 	mov.w	r0, #0
 8005f8a:	f04f 0100 	mov.w	r1, #0
 8005f8e:	00d9      	lsls	r1, r3, #3
 8005f90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f94:	00d0      	lsls	r0, r2, #3
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	1911      	adds	r1, r2, r4
 8005f9c:	6639      	str	r1, [r7, #96]	; 0x60
 8005f9e:	416b      	adcs	r3, r5
 8005fa0:	667b      	str	r3, [r7, #100]	; 0x64
 8005fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f04f 0300 	mov.w	r3, #0
 8005fac:	1891      	adds	r1, r2, r2
 8005fae:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fb0:	415b      	adcs	r3, r3
 8005fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fb8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005fbc:	f7fa fdf4 	bl	8000ba8 <__aeabi_uldivmod>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4ba5      	ldr	r3, [pc, #660]	; (800625c <UART_SetConfig+0x38c>)
 8005fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	011e      	lsls	r6, r3, #4
 8005fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fd0:	461c      	mov	r4, r3
 8005fd2:	f04f 0500 	mov.w	r5, #0
 8005fd6:	4622      	mov	r2, r4
 8005fd8:	462b      	mov	r3, r5
 8005fda:	1891      	adds	r1, r2, r2
 8005fdc:	6339      	str	r1, [r7, #48]	; 0x30
 8005fde:	415b      	adcs	r3, r3
 8005fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8005fe2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005fe6:	1912      	adds	r2, r2, r4
 8005fe8:	eb45 0303 	adc.w	r3, r5, r3
 8005fec:	f04f 0000 	mov.w	r0, #0
 8005ff0:	f04f 0100 	mov.w	r1, #0
 8005ff4:	00d9      	lsls	r1, r3, #3
 8005ff6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ffa:	00d0      	lsls	r0, r2, #3
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	1911      	adds	r1, r2, r4
 8006002:	65b9      	str	r1, [r7, #88]	; 0x58
 8006004:	416b      	adcs	r3, r5
 8006006:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	461a      	mov	r2, r3
 800600e:	f04f 0300 	mov.w	r3, #0
 8006012:	1891      	adds	r1, r2, r2
 8006014:	62b9      	str	r1, [r7, #40]	; 0x28
 8006016:	415b      	adcs	r3, r3
 8006018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800601a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800601e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006022:	f7fa fdc1 	bl	8000ba8 <__aeabi_uldivmod>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4b8c      	ldr	r3, [pc, #560]	; (800625c <UART_SetConfig+0x38c>)
 800602c:	fba3 1302 	umull	r1, r3, r3, r2
 8006030:	095b      	lsrs	r3, r3, #5
 8006032:	2164      	movs	r1, #100	; 0x64
 8006034:	fb01 f303 	mul.w	r3, r1, r3
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	3332      	adds	r3, #50	; 0x32
 800603e:	4a87      	ldr	r2, [pc, #540]	; (800625c <UART_SetConfig+0x38c>)
 8006040:	fba2 2303 	umull	r2, r3, r2, r3
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800604c:	441e      	add	r6, r3
 800604e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006050:	4618      	mov	r0, r3
 8006052:	f04f 0100 	mov.w	r1, #0
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	1894      	adds	r4, r2, r2
 800605c:	623c      	str	r4, [r7, #32]
 800605e:	415b      	adcs	r3, r3
 8006060:	627b      	str	r3, [r7, #36]	; 0x24
 8006062:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006066:	1812      	adds	r2, r2, r0
 8006068:	eb41 0303 	adc.w	r3, r1, r3
 800606c:	f04f 0400 	mov.w	r4, #0
 8006070:	f04f 0500 	mov.w	r5, #0
 8006074:	00dd      	lsls	r5, r3, #3
 8006076:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800607a:	00d4      	lsls	r4, r2, #3
 800607c:	4622      	mov	r2, r4
 800607e:	462b      	mov	r3, r5
 8006080:	1814      	adds	r4, r2, r0
 8006082:	653c      	str	r4, [r7, #80]	; 0x50
 8006084:	414b      	adcs	r3, r1
 8006086:	657b      	str	r3, [r7, #84]	; 0x54
 8006088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	461a      	mov	r2, r3
 800608e:	f04f 0300 	mov.w	r3, #0
 8006092:	1891      	adds	r1, r2, r2
 8006094:	61b9      	str	r1, [r7, #24]
 8006096:	415b      	adcs	r3, r3
 8006098:	61fb      	str	r3, [r7, #28]
 800609a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800609e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80060a2:	f7fa fd81 	bl	8000ba8 <__aeabi_uldivmod>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4b6c      	ldr	r3, [pc, #432]	; (800625c <UART_SetConfig+0x38c>)
 80060ac:	fba3 1302 	umull	r1, r3, r3, r2
 80060b0:	095b      	lsrs	r3, r3, #5
 80060b2:	2164      	movs	r1, #100	; 0x64
 80060b4:	fb01 f303 	mul.w	r3, r1, r3
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	3332      	adds	r3, #50	; 0x32
 80060be:	4a67      	ldr	r2, [pc, #412]	; (800625c <UART_SetConfig+0x38c>)
 80060c0:	fba2 2303 	umull	r2, r3, r2, r3
 80060c4:	095b      	lsrs	r3, r3, #5
 80060c6:	f003 0207 	and.w	r2, r3, #7
 80060ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4432      	add	r2, r6
 80060d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060d2:	e0b9      	b.n	8006248 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060d6:	461c      	mov	r4, r3
 80060d8:	f04f 0500 	mov.w	r5, #0
 80060dc:	4622      	mov	r2, r4
 80060de:	462b      	mov	r3, r5
 80060e0:	1891      	adds	r1, r2, r2
 80060e2:	6139      	str	r1, [r7, #16]
 80060e4:	415b      	adcs	r3, r3
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80060ec:	1912      	adds	r2, r2, r4
 80060ee:	eb45 0303 	adc.w	r3, r5, r3
 80060f2:	f04f 0000 	mov.w	r0, #0
 80060f6:	f04f 0100 	mov.w	r1, #0
 80060fa:	00d9      	lsls	r1, r3, #3
 80060fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006100:	00d0      	lsls	r0, r2, #3
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	eb12 0804 	adds.w	r8, r2, r4
 800610a:	eb43 0905 	adc.w	r9, r3, r5
 800610e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	4618      	mov	r0, r3
 8006114:	f04f 0100 	mov.w	r1, #0
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	008b      	lsls	r3, r1, #2
 8006122:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006126:	0082      	lsls	r2, r0, #2
 8006128:	4640      	mov	r0, r8
 800612a:	4649      	mov	r1, r9
 800612c:	f7fa fd3c 	bl	8000ba8 <__aeabi_uldivmod>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4b49      	ldr	r3, [pc, #292]	; (800625c <UART_SetConfig+0x38c>)
 8006136:	fba3 2302 	umull	r2, r3, r3, r2
 800613a:	095b      	lsrs	r3, r3, #5
 800613c:	011e      	lsls	r6, r3, #4
 800613e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006140:	4618      	mov	r0, r3
 8006142:	f04f 0100 	mov.w	r1, #0
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	1894      	adds	r4, r2, r2
 800614c:	60bc      	str	r4, [r7, #8]
 800614e:	415b      	adcs	r3, r3
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006156:	1812      	adds	r2, r2, r0
 8006158:	eb41 0303 	adc.w	r3, r1, r3
 800615c:	f04f 0400 	mov.w	r4, #0
 8006160:	f04f 0500 	mov.w	r5, #0
 8006164:	00dd      	lsls	r5, r3, #3
 8006166:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800616a:	00d4      	lsls	r4, r2, #3
 800616c:	4622      	mov	r2, r4
 800616e:	462b      	mov	r3, r5
 8006170:	1814      	adds	r4, r2, r0
 8006172:	64bc      	str	r4, [r7, #72]	; 0x48
 8006174:	414b      	adcs	r3, r1
 8006176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	4618      	mov	r0, r3
 800617e:	f04f 0100 	mov.w	r1, #0
 8006182:	f04f 0200 	mov.w	r2, #0
 8006186:	f04f 0300 	mov.w	r3, #0
 800618a:	008b      	lsls	r3, r1, #2
 800618c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006190:	0082      	lsls	r2, r0, #2
 8006192:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006196:	f7fa fd07 	bl	8000ba8 <__aeabi_uldivmod>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	4b2f      	ldr	r3, [pc, #188]	; (800625c <UART_SetConfig+0x38c>)
 80061a0:	fba3 1302 	umull	r1, r3, r3, r2
 80061a4:	095b      	lsrs	r3, r3, #5
 80061a6:	2164      	movs	r1, #100	; 0x64
 80061a8:	fb01 f303 	mul.w	r3, r1, r3
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	3332      	adds	r3, #50	; 0x32
 80061b2:	4a2a      	ldr	r2, [pc, #168]	; (800625c <UART_SetConfig+0x38c>)
 80061b4:	fba2 2303 	umull	r2, r3, r2, r3
 80061b8:	095b      	lsrs	r3, r3, #5
 80061ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061be:	441e      	add	r6, r3
 80061c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061c2:	4618      	mov	r0, r3
 80061c4:	f04f 0100 	mov.w	r1, #0
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	1894      	adds	r4, r2, r2
 80061ce:	603c      	str	r4, [r7, #0]
 80061d0:	415b      	adcs	r3, r3
 80061d2:	607b      	str	r3, [r7, #4]
 80061d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d8:	1812      	adds	r2, r2, r0
 80061da:	eb41 0303 	adc.w	r3, r1, r3
 80061de:	f04f 0400 	mov.w	r4, #0
 80061e2:	f04f 0500 	mov.w	r5, #0
 80061e6:	00dd      	lsls	r5, r3, #3
 80061e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061ec:	00d4      	lsls	r4, r2, #3
 80061ee:	4622      	mov	r2, r4
 80061f0:	462b      	mov	r3, r5
 80061f2:	eb12 0a00 	adds.w	sl, r2, r0
 80061f6:	eb43 0b01 	adc.w	fp, r3, r1
 80061fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	4618      	mov	r0, r3
 8006200:	f04f 0100 	mov.w	r1, #0
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	f04f 0300 	mov.w	r3, #0
 800620c:	008b      	lsls	r3, r1, #2
 800620e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006212:	0082      	lsls	r2, r0, #2
 8006214:	4650      	mov	r0, sl
 8006216:	4659      	mov	r1, fp
 8006218:	f7fa fcc6 	bl	8000ba8 <__aeabi_uldivmod>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	4b0e      	ldr	r3, [pc, #56]	; (800625c <UART_SetConfig+0x38c>)
 8006222:	fba3 1302 	umull	r1, r3, r3, r2
 8006226:	095b      	lsrs	r3, r3, #5
 8006228:	2164      	movs	r1, #100	; 0x64
 800622a:	fb01 f303 	mul.w	r3, r1, r3
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	3332      	adds	r3, #50	; 0x32
 8006234:	4a09      	ldr	r2, [pc, #36]	; (800625c <UART_SetConfig+0x38c>)
 8006236:	fba2 2303 	umull	r2, r3, r2, r3
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	f003 020f 	and.w	r2, r3, #15
 8006240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4432      	add	r2, r6
 8006246:	609a      	str	r2, [r3, #8]
}
 8006248:	bf00      	nop
 800624a:	377c      	adds	r7, #124	; 0x7c
 800624c:	46bd      	mov	sp, r7
 800624e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006252:	bf00      	nop
 8006254:	40011000 	.word	0x40011000
 8006258:	40011400 	.word	0x40011400
 800625c:	51eb851f 	.word	0x51eb851f

08006260 <__errno>:
 8006260:	4b01      	ldr	r3, [pc, #4]	; (8006268 <__errno+0x8>)
 8006262:	6818      	ldr	r0, [r3, #0]
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	2000001c 	.word	0x2000001c

0800626c <__libc_init_array>:
 800626c:	b570      	push	{r4, r5, r6, lr}
 800626e:	4d0d      	ldr	r5, [pc, #52]	; (80062a4 <__libc_init_array+0x38>)
 8006270:	4c0d      	ldr	r4, [pc, #52]	; (80062a8 <__libc_init_array+0x3c>)
 8006272:	1b64      	subs	r4, r4, r5
 8006274:	10a4      	asrs	r4, r4, #2
 8006276:	2600      	movs	r6, #0
 8006278:	42a6      	cmp	r6, r4
 800627a:	d109      	bne.n	8006290 <__libc_init_array+0x24>
 800627c:	4d0b      	ldr	r5, [pc, #44]	; (80062ac <__libc_init_array+0x40>)
 800627e:	4c0c      	ldr	r4, [pc, #48]	; (80062b0 <__libc_init_array+0x44>)
 8006280:	f002 feb4 	bl	8008fec <_init>
 8006284:	1b64      	subs	r4, r4, r5
 8006286:	10a4      	asrs	r4, r4, #2
 8006288:	2600      	movs	r6, #0
 800628a:	42a6      	cmp	r6, r4
 800628c:	d105      	bne.n	800629a <__libc_init_array+0x2e>
 800628e:	bd70      	pop	{r4, r5, r6, pc}
 8006290:	f855 3b04 	ldr.w	r3, [r5], #4
 8006294:	4798      	blx	r3
 8006296:	3601      	adds	r6, #1
 8006298:	e7ee      	b.n	8006278 <__libc_init_array+0xc>
 800629a:	f855 3b04 	ldr.w	r3, [r5], #4
 800629e:	4798      	blx	r3
 80062a0:	3601      	adds	r6, #1
 80062a2:	e7f2      	b.n	800628a <__libc_init_array+0x1e>
 80062a4:	0800942c 	.word	0x0800942c
 80062a8:	0800942c 	.word	0x0800942c
 80062ac:	0800942c 	.word	0x0800942c
 80062b0:	08009430 	.word	0x08009430

080062b4 <memset>:
 80062b4:	4402      	add	r2, r0
 80062b6:	4603      	mov	r3, r0
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d100      	bne.n	80062be <memset+0xa>
 80062bc:	4770      	bx	lr
 80062be:	f803 1b01 	strb.w	r1, [r3], #1
 80062c2:	e7f9      	b.n	80062b8 <memset+0x4>

080062c4 <__cvt>:
 80062c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062c8:	ec55 4b10 	vmov	r4, r5, d0
 80062cc:	2d00      	cmp	r5, #0
 80062ce:	460e      	mov	r6, r1
 80062d0:	4619      	mov	r1, r3
 80062d2:	462b      	mov	r3, r5
 80062d4:	bfbb      	ittet	lt
 80062d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80062da:	461d      	movlt	r5, r3
 80062dc:	2300      	movge	r3, #0
 80062de:	232d      	movlt	r3, #45	; 0x2d
 80062e0:	700b      	strb	r3, [r1, #0]
 80062e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80062e8:	4691      	mov	r9, r2
 80062ea:	f023 0820 	bic.w	r8, r3, #32
 80062ee:	bfbc      	itt	lt
 80062f0:	4622      	movlt	r2, r4
 80062f2:	4614      	movlt	r4, r2
 80062f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062f8:	d005      	beq.n	8006306 <__cvt+0x42>
 80062fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062fe:	d100      	bne.n	8006302 <__cvt+0x3e>
 8006300:	3601      	adds	r6, #1
 8006302:	2102      	movs	r1, #2
 8006304:	e000      	b.n	8006308 <__cvt+0x44>
 8006306:	2103      	movs	r1, #3
 8006308:	ab03      	add	r3, sp, #12
 800630a:	9301      	str	r3, [sp, #4]
 800630c:	ab02      	add	r3, sp, #8
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	ec45 4b10 	vmov	d0, r4, r5
 8006314:	4653      	mov	r3, sl
 8006316:	4632      	mov	r2, r6
 8006318:	f000 fd0a 	bl	8006d30 <_dtoa_r>
 800631c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006320:	4607      	mov	r7, r0
 8006322:	d102      	bne.n	800632a <__cvt+0x66>
 8006324:	f019 0f01 	tst.w	r9, #1
 8006328:	d022      	beq.n	8006370 <__cvt+0xac>
 800632a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800632e:	eb07 0906 	add.w	r9, r7, r6
 8006332:	d110      	bne.n	8006356 <__cvt+0x92>
 8006334:	783b      	ldrb	r3, [r7, #0]
 8006336:	2b30      	cmp	r3, #48	; 0x30
 8006338:	d10a      	bne.n	8006350 <__cvt+0x8c>
 800633a:	2200      	movs	r2, #0
 800633c:	2300      	movs	r3, #0
 800633e:	4620      	mov	r0, r4
 8006340:	4629      	mov	r1, r5
 8006342:	f7fa fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006346:	b918      	cbnz	r0, 8006350 <__cvt+0x8c>
 8006348:	f1c6 0601 	rsb	r6, r6, #1
 800634c:	f8ca 6000 	str.w	r6, [sl]
 8006350:	f8da 3000 	ldr.w	r3, [sl]
 8006354:	4499      	add	r9, r3
 8006356:	2200      	movs	r2, #0
 8006358:	2300      	movs	r3, #0
 800635a:	4620      	mov	r0, r4
 800635c:	4629      	mov	r1, r5
 800635e:	f7fa fbb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006362:	b108      	cbz	r0, 8006368 <__cvt+0xa4>
 8006364:	f8cd 900c 	str.w	r9, [sp, #12]
 8006368:	2230      	movs	r2, #48	; 0x30
 800636a:	9b03      	ldr	r3, [sp, #12]
 800636c:	454b      	cmp	r3, r9
 800636e:	d307      	bcc.n	8006380 <__cvt+0xbc>
 8006370:	9b03      	ldr	r3, [sp, #12]
 8006372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006374:	1bdb      	subs	r3, r3, r7
 8006376:	4638      	mov	r0, r7
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	b004      	add	sp, #16
 800637c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006380:	1c59      	adds	r1, r3, #1
 8006382:	9103      	str	r1, [sp, #12]
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	e7f0      	b.n	800636a <__cvt+0xa6>

08006388 <__exponent>:
 8006388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800638a:	4603      	mov	r3, r0
 800638c:	2900      	cmp	r1, #0
 800638e:	bfb8      	it	lt
 8006390:	4249      	neglt	r1, r1
 8006392:	f803 2b02 	strb.w	r2, [r3], #2
 8006396:	bfb4      	ite	lt
 8006398:	222d      	movlt	r2, #45	; 0x2d
 800639a:	222b      	movge	r2, #43	; 0x2b
 800639c:	2909      	cmp	r1, #9
 800639e:	7042      	strb	r2, [r0, #1]
 80063a0:	dd2a      	ble.n	80063f8 <__exponent+0x70>
 80063a2:	f10d 0407 	add.w	r4, sp, #7
 80063a6:	46a4      	mov	ip, r4
 80063a8:	270a      	movs	r7, #10
 80063aa:	46a6      	mov	lr, r4
 80063ac:	460a      	mov	r2, r1
 80063ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80063b2:	fb07 1516 	mls	r5, r7, r6, r1
 80063b6:	3530      	adds	r5, #48	; 0x30
 80063b8:	2a63      	cmp	r2, #99	; 0x63
 80063ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80063be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80063c2:	4631      	mov	r1, r6
 80063c4:	dcf1      	bgt.n	80063aa <__exponent+0x22>
 80063c6:	3130      	adds	r1, #48	; 0x30
 80063c8:	f1ae 0502 	sub.w	r5, lr, #2
 80063cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80063d0:	1c44      	adds	r4, r0, #1
 80063d2:	4629      	mov	r1, r5
 80063d4:	4561      	cmp	r1, ip
 80063d6:	d30a      	bcc.n	80063ee <__exponent+0x66>
 80063d8:	f10d 0209 	add.w	r2, sp, #9
 80063dc:	eba2 020e 	sub.w	r2, r2, lr
 80063e0:	4565      	cmp	r5, ip
 80063e2:	bf88      	it	hi
 80063e4:	2200      	movhi	r2, #0
 80063e6:	4413      	add	r3, r2
 80063e8:	1a18      	subs	r0, r3, r0
 80063ea:	b003      	add	sp, #12
 80063ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80063f6:	e7ed      	b.n	80063d4 <__exponent+0x4c>
 80063f8:	2330      	movs	r3, #48	; 0x30
 80063fa:	3130      	adds	r1, #48	; 0x30
 80063fc:	7083      	strb	r3, [r0, #2]
 80063fe:	70c1      	strb	r1, [r0, #3]
 8006400:	1d03      	adds	r3, r0, #4
 8006402:	e7f1      	b.n	80063e8 <__exponent+0x60>

08006404 <_printf_float>:
 8006404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006408:	ed2d 8b02 	vpush	{d8}
 800640c:	b08d      	sub	sp, #52	; 0x34
 800640e:	460c      	mov	r4, r1
 8006410:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006414:	4616      	mov	r6, r2
 8006416:	461f      	mov	r7, r3
 8006418:	4605      	mov	r5, r0
 800641a:	f001 fa87 	bl	800792c <_localeconv_r>
 800641e:	f8d0 a000 	ldr.w	sl, [r0]
 8006422:	4650      	mov	r0, sl
 8006424:	f7f9 fed4 	bl	80001d0 <strlen>
 8006428:	2300      	movs	r3, #0
 800642a:	930a      	str	r3, [sp, #40]	; 0x28
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	9305      	str	r3, [sp, #20]
 8006430:	f8d8 3000 	ldr.w	r3, [r8]
 8006434:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006438:	3307      	adds	r3, #7
 800643a:	f023 0307 	bic.w	r3, r3, #7
 800643e:	f103 0208 	add.w	r2, r3, #8
 8006442:	f8c8 2000 	str.w	r2, [r8]
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800644e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006452:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006456:	9307      	str	r3, [sp, #28]
 8006458:	f8cd 8018 	str.w	r8, [sp, #24]
 800645c:	ee08 0a10 	vmov	s16, r0
 8006460:	4b9f      	ldr	r3, [pc, #636]	; (80066e0 <_printf_float+0x2dc>)
 8006462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006466:	f04f 32ff 	mov.w	r2, #4294967295
 800646a:	f7fa fb5f 	bl	8000b2c <__aeabi_dcmpun>
 800646e:	bb88      	cbnz	r0, 80064d4 <_printf_float+0xd0>
 8006470:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006474:	4b9a      	ldr	r3, [pc, #616]	; (80066e0 <_printf_float+0x2dc>)
 8006476:	f04f 32ff 	mov.w	r2, #4294967295
 800647a:	f7fa fb39 	bl	8000af0 <__aeabi_dcmple>
 800647e:	bb48      	cbnz	r0, 80064d4 <_printf_float+0xd0>
 8006480:	2200      	movs	r2, #0
 8006482:	2300      	movs	r3, #0
 8006484:	4640      	mov	r0, r8
 8006486:	4649      	mov	r1, r9
 8006488:	f7fa fb28 	bl	8000adc <__aeabi_dcmplt>
 800648c:	b110      	cbz	r0, 8006494 <_printf_float+0x90>
 800648e:	232d      	movs	r3, #45	; 0x2d
 8006490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006494:	4b93      	ldr	r3, [pc, #588]	; (80066e4 <_printf_float+0x2e0>)
 8006496:	4894      	ldr	r0, [pc, #592]	; (80066e8 <_printf_float+0x2e4>)
 8006498:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800649c:	bf94      	ite	ls
 800649e:	4698      	movls	r8, r3
 80064a0:	4680      	movhi	r8, r0
 80064a2:	2303      	movs	r3, #3
 80064a4:	6123      	str	r3, [r4, #16]
 80064a6:	9b05      	ldr	r3, [sp, #20]
 80064a8:	f023 0204 	bic.w	r2, r3, #4
 80064ac:	6022      	str	r2, [r4, #0]
 80064ae:	f04f 0900 	mov.w	r9, #0
 80064b2:	9700      	str	r7, [sp, #0]
 80064b4:	4633      	mov	r3, r6
 80064b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80064b8:	4621      	mov	r1, r4
 80064ba:	4628      	mov	r0, r5
 80064bc:	f000 f9d8 	bl	8006870 <_printf_common>
 80064c0:	3001      	adds	r0, #1
 80064c2:	f040 8090 	bne.w	80065e6 <_printf_float+0x1e2>
 80064c6:	f04f 30ff 	mov.w	r0, #4294967295
 80064ca:	b00d      	add	sp, #52	; 0x34
 80064cc:	ecbd 8b02 	vpop	{d8}
 80064d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d4:	4642      	mov	r2, r8
 80064d6:	464b      	mov	r3, r9
 80064d8:	4640      	mov	r0, r8
 80064da:	4649      	mov	r1, r9
 80064dc:	f7fa fb26 	bl	8000b2c <__aeabi_dcmpun>
 80064e0:	b140      	cbz	r0, 80064f4 <_printf_float+0xf0>
 80064e2:	464b      	mov	r3, r9
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	bfbc      	itt	lt
 80064e8:	232d      	movlt	r3, #45	; 0x2d
 80064ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064ee:	487f      	ldr	r0, [pc, #508]	; (80066ec <_printf_float+0x2e8>)
 80064f0:	4b7f      	ldr	r3, [pc, #508]	; (80066f0 <_printf_float+0x2ec>)
 80064f2:	e7d1      	b.n	8006498 <_printf_float+0x94>
 80064f4:	6863      	ldr	r3, [r4, #4]
 80064f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80064fa:	9206      	str	r2, [sp, #24]
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	d13f      	bne.n	8006580 <_printf_float+0x17c>
 8006500:	2306      	movs	r3, #6
 8006502:	6063      	str	r3, [r4, #4]
 8006504:	9b05      	ldr	r3, [sp, #20]
 8006506:	6861      	ldr	r1, [r4, #4]
 8006508:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800650c:	2300      	movs	r3, #0
 800650e:	9303      	str	r3, [sp, #12]
 8006510:	ab0a      	add	r3, sp, #40	; 0x28
 8006512:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006516:	ab09      	add	r3, sp, #36	; 0x24
 8006518:	ec49 8b10 	vmov	d0, r8, r9
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	6022      	str	r2, [r4, #0]
 8006520:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006524:	4628      	mov	r0, r5
 8006526:	f7ff fecd 	bl	80062c4 <__cvt>
 800652a:	9b06      	ldr	r3, [sp, #24]
 800652c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800652e:	2b47      	cmp	r3, #71	; 0x47
 8006530:	4680      	mov	r8, r0
 8006532:	d108      	bne.n	8006546 <_printf_float+0x142>
 8006534:	1cc8      	adds	r0, r1, #3
 8006536:	db02      	blt.n	800653e <_printf_float+0x13a>
 8006538:	6863      	ldr	r3, [r4, #4]
 800653a:	4299      	cmp	r1, r3
 800653c:	dd41      	ble.n	80065c2 <_printf_float+0x1be>
 800653e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006542:	fa5f fb8b 	uxtb.w	fp, fp
 8006546:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800654a:	d820      	bhi.n	800658e <_printf_float+0x18a>
 800654c:	3901      	subs	r1, #1
 800654e:	465a      	mov	r2, fp
 8006550:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006554:	9109      	str	r1, [sp, #36]	; 0x24
 8006556:	f7ff ff17 	bl	8006388 <__exponent>
 800655a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800655c:	1813      	adds	r3, r2, r0
 800655e:	2a01      	cmp	r2, #1
 8006560:	4681      	mov	r9, r0
 8006562:	6123      	str	r3, [r4, #16]
 8006564:	dc02      	bgt.n	800656c <_printf_float+0x168>
 8006566:	6822      	ldr	r2, [r4, #0]
 8006568:	07d2      	lsls	r2, r2, #31
 800656a:	d501      	bpl.n	8006570 <_printf_float+0x16c>
 800656c:	3301      	adds	r3, #1
 800656e:	6123      	str	r3, [r4, #16]
 8006570:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006574:	2b00      	cmp	r3, #0
 8006576:	d09c      	beq.n	80064b2 <_printf_float+0xae>
 8006578:	232d      	movs	r3, #45	; 0x2d
 800657a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800657e:	e798      	b.n	80064b2 <_printf_float+0xae>
 8006580:	9a06      	ldr	r2, [sp, #24]
 8006582:	2a47      	cmp	r2, #71	; 0x47
 8006584:	d1be      	bne.n	8006504 <_printf_float+0x100>
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1bc      	bne.n	8006504 <_printf_float+0x100>
 800658a:	2301      	movs	r3, #1
 800658c:	e7b9      	b.n	8006502 <_printf_float+0xfe>
 800658e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006592:	d118      	bne.n	80065c6 <_printf_float+0x1c2>
 8006594:	2900      	cmp	r1, #0
 8006596:	6863      	ldr	r3, [r4, #4]
 8006598:	dd0b      	ble.n	80065b2 <_printf_float+0x1ae>
 800659a:	6121      	str	r1, [r4, #16]
 800659c:	b913      	cbnz	r3, 80065a4 <_printf_float+0x1a0>
 800659e:	6822      	ldr	r2, [r4, #0]
 80065a0:	07d0      	lsls	r0, r2, #31
 80065a2:	d502      	bpl.n	80065aa <_printf_float+0x1a6>
 80065a4:	3301      	adds	r3, #1
 80065a6:	440b      	add	r3, r1
 80065a8:	6123      	str	r3, [r4, #16]
 80065aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80065ac:	f04f 0900 	mov.w	r9, #0
 80065b0:	e7de      	b.n	8006570 <_printf_float+0x16c>
 80065b2:	b913      	cbnz	r3, 80065ba <_printf_float+0x1b6>
 80065b4:	6822      	ldr	r2, [r4, #0]
 80065b6:	07d2      	lsls	r2, r2, #31
 80065b8:	d501      	bpl.n	80065be <_printf_float+0x1ba>
 80065ba:	3302      	adds	r3, #2
 80065bc:	e7f4      	b.n	80065a8 <_printf_float+0x1a4>
 80065be:	2301      	movs	r3, #1
 80065c0:	e7f2      	b.n	80065a8 <_printf_float+0x1a4>
 80065c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80065c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065c8:	4299      	cmp	r1, r3
 80065ca:	db05      	blt.n	80065d8 <_printf_float+0x1d4>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	6121      	str	r1, [r4, #16]
 80065d0:	07d8      	lsls	r0, r3, #31
 80065d2:	d5ea      	bpl.n	80065aa <_printf_float+0x1a6>
 80065d4:	1c4b      	adds	r3, r1, #1
 80065d6:	e7e7      	b.n	80065a8 <_printf_float+0x1a4>
 80065d8:	2900      	cmp	r1, #0
 80065da:	bfd4      	ite	le
 80065dc:	f1c1 0202 	rsble	r2, r1, #2
 80065e0:	2201      	movgt	r2, #1
 80065e2:	4413      	add	r3, r2
 80065e4:	e7e0      	b.n	80065a8 <_printf_float+0x1a4>
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	055a      	lsls	r2, r3, #21
 80065ea:	d407      	bmi.n	80065fc <_printf_float+0x1f8>
 80065ec:	6923      	ldr	r3, [r4, #16]
 80065ee:	4642      	mov	r2, r8
 80065f0:	4631      	mov	r1, r6
 80065f2:	4628      	mov	r0, r5
 80065f4:	47b8      	blx	r7
 80065f6:	3001      	adds	r0, #1
 80065f8:	d12c      	bne.n	8006654 <_printf_float+0x250>
 80065fa:	e764      	b.n	80064c6 <_printf_float+0xc2>
 80065fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006600:	f240 80e0 	bls.w	80067c4 <_printf_float+0x3c0>
 8006604:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006608:	2200      	movs	r2, #0
 800660a:	2300      	movs	r3, #0
 800660c:	f7fa fa5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006610:	2800      	cmp	r0, #0
 8006612:	d034      	beq.n	800667e <_printf_float+0x27a>
 8006614:	4a37      	ldr	r2, [pc, #220]	; (80066f4 <_printf_float+0x2f0>)
 8006616:	2301      	movs	r3, #1
 8006618:	4631      	mov	r1, r6
 800661a:	4628      	mov	r0, r5
 800661c:	47b8      	blx	r7
 800661e:	3001      	adds	r0, #1
 8006620:	f43f af51 	beq.w	80064c6 <_printf_float+0xc2>
 8006624:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006628:	429a      	cmp	r2, r3
 800662a:	db02      	blt.n	8006632 <_printf_float+0x22e>
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	07d8      	lsls	r0, r3, #31
 8006630:	d510      	bpl.n	8006654 <_printf_float+0x250>
 8006632:	ee18 3a10 	vmov	r3, s16
 8006636:	4652      	mov	r2, sl
 8006638:	4631      	mov	r1, r6
 800663a:	4628      	mov	r0, r5
 800663c:	47b8      	blx	r7
 800663e:	3001      	adds	r0, #1
 8006640:	f43f af41 	beq.w	80064c6 <_printf_float+0xc2>
 8006644:	f04f 0800 	mov.w	r8, #0
 8006648:	f104 091a 	add.w	r9, r4, #26
 800664c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800664e:	3b01      	subs	r3, #1
 8006650:	4543      	cmp	r3, r8
 8006652:	dc09      	bgt.n	8006668 <_printf_float+0x264>
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	079b      	lsls	r3, r3, #30
 8006658:	f100 8105 	bmi.w	8006866 <_printf_float+0x462>
 800665c:	68e0      	ldr	r0, [r4, #12]
 800665e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006660:	4298      	cmp	r0, r3
 8006662:	bfb8      	it	lt
 8006664:	4618      	movlt	r0, r3
 8006666:	e730      	b.n	80064ca <_printf_float+0xc6>
 8006668:	2301      	movs	r3, #1
 800666a:	464a      	mov	r2, r9
 800666c:	4631      	mov	r1, r6
 800666e:	4628      	mov	r0, r5
 8006670:	47b8      	blx	r7
 8006672:	3001      	adds	r0, #1
 8006674:	f43f af27 	beq.w	80064c6 <_printf_float+0xc2>
 8006678:	f108 0801 	add.w	r8, r8, #1
 800667c:	e7e6      	b.n	800664c <_printf_float+0x248>
 800667e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006680:	2b00      	cmp	r3, #0
 8006682:	dc39      	bgt.n	80066f8 <_printf_float+0x2f4>
 8006684:	4a1b      	ldr	r2, [pc, #108]	; (80066f4 <_printf_float+0x2f0>)
 8006686:	2301      	movs	r3, #1
 8006688:	4631      	mov	r1, r6
 800668a:	4628      	mov	r0, r5
 800668c:	47b8      	blx	r7
 800668e:	3001      	adds	r0, #1
 8006690:	f43f af19 	beq.w	80064c6 <_printf_float+0xc2>
 8006694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006698:	4313      	orrs	r3, r2
 800669a:	d102      	bne.n	80066a2 <_printf_float+0x29e>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	07d9      	lsls	r1, r3, #31
 80066a0:	d5d8      	bpl.n	8006654 <_printf_float+0x250>
 80066a2:	ee18 3a10 	vmov	r3, s16
 80066a6:	4652      	mov	r2, sl
 80066a8:	4631      	mov	r1, r6
 80066aa:	4628      	mov	r0, r5
 80066ac:	47b8      	blx	r7
 80066ae:	3001      	adds	r0, #1
 80066b0:	f43f af09 	beq.w	80064c6 <_printf_float+0xc2>
 80066b4:	f04f 0900 	mov.w	r9, #0
 80066b8:	f104 0a1a 	add.w	sl, r4, #26
 80066bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066be:	425b      	negs	r3, r3
 80066c0:	454b      	cmp	r3, r9
 80066c2:	dc01      	bgt.n	80066c8 <_printf_float+0x2c4>
 80066c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066c6:	e792      	b.n	80065ee <_printf_float+0x1ea>
 80066c8:	2301      	movs	r3, #1
 80066ca:	4652      	mov	r2, sl
 80066cc:	4631      	mov	r1, r6
 80066ce:	4628      	mov	r0, r5
 80066d0:	47b8      	blx	r7
 80066d2:	3001      	adds	r0, #1
 80066d4:	f43f aef7 	beq.w	80064c6 <_printf_float+0xc2>
 80066d8:	f109 0901 	add.w	r9, r9, #1
 80066dc:	e7ee      	b.n	80066bc <_printf_float+0x2b8>
 80066de:	bf00      	nop
 80066e0:	7fefffff 	.word	0x7fefffff
 80066e4:	08009040 	.word	0x08009040
 80066e8:	08009044 	.word	0x08009044
 80066ec:	0800904c 	.word	0x0800904c
 80066f0:	08009048 	.word	0x08009048
 80066f4:	08009050 	.word	0x08009050
 80066f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066fc:	429a      	cmp	r2, r3
 80066fe:	bfa8      	it	ge
 8006700:	461a      	movge	r2, r3
 8006702:	2a00      	cmp	r2, #0
 8006704:	4691      	mov	r9, r2
 8006706:	dc37      	bgt.n	8006778 <_printf_float+0x374>
 8006708:	f04f 0b00 	mov.w	fp, #0
 800670c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006710:	f104 021a 	add.w	r2, r4, #26
 8006714:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006716:	9305      	str	r3, [sp, #20]
 8006718:	eba3 0309 	sub.w	r3, r3, r9
 800671c:	455b      	cmp	r3, fp
 800671e:	dc33      	bgt.n	8006788 <_printf_float+0x384>
 8006720:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006724:	429a      	cmp	r2, r3
 8006726:	db3b      	blt.n	80067a0 <_printf_float+0x39c>
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	07da      	lsls	r2, r3, #31
 800672c:	d438      	bmi.n	80067a0 <_printf_float+0x39c>
 800672e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006730:	9b05      	ldr	r3, [sp, #20]
 8006732:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	eba2 0901 	sub.w	r9, r2, r1
 800673a:	4599      	cmp	r9, r3
 800673c:	bfa8      	it	ge
 800673e:	4699      	movge	r9, r3
 8006740:	f1b9 0f00 	cmp.w	r9, #0
 8006744:	dc35      	bgt.n	80067b2 <_printf_float+0x3ae>
 8006746:	f04f 0800 	mov.w	r8, #0
 800674a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800674e:	f104 0a1a 	add.w	sl, r4, #26
 8006752:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006756:	1a9b      	subs	r3, r3, r2
 8006758:	eba3 0309 	sub.w	r3, r3, r9
 800675c:	4543      	cmp	r3, r8
 800675e:	f77f af79 	ble.w	8006654 <_printf_float+0x250>
 8006762:	2301      	movs	r3, #1
 8006764:	4652      	mov	r2, sl
 8006766:	4631      	mov	r1, r6
 8006768:	4628      	mov	r0, r5
 800676a:	47b8      	blx	r7
 800676c:	3001      	adds	r0, #1
 800676e:	f43f aeaa 	beq.w	80064c6 <_printf_float+0xc2>
 8006772:	f108 0801 	add.w	r8, r8, #1
 8006776:	e7ec      	b.n	8006752 <_printf_float+0x34e>
 8006778:	4613      	mov	r3, r2
 800677a:	4631      	mov	r1, r6
 800677c:	4642      	mov	r2, r8
 800677e:	4628      	mov	r0, r5
 8006780:	47b8      	blx	r7
 8006782:	3001      	adds	r0, #1
 8006784:	d1c0      	bne.n	8006708 <_printf_float+0x304>
 8006786:	e69e      	b.n	80064c6 <_printf_float+0xc2>
 8006788:	2301      	movs	r3, #1
 800678a:	4631      	mov	r1, r6
 800678c:	4628      	mov	r0, r5
 800678e:	9205      	str	r2, [sp, #20]
 8006790:	47b8      	blx	r7
 8006792:	3001      	adds	r0, #1
 8006794:	f43f ae97 	beq.w	80064c6 <_printf_float+0xc2>
 8006798:	9a05      	ldr	r2, [sp, #20]
 800679a:	f10b 0b01 	add.w	fp, fp, #1
 800679e:	e7b9      	b.n	8006714 <_printf_float+0x310>
 80067a0:	ee18 3a10 	vmov	r3, s16
 80067a4:	4652      	mov	r2, sl
 80067a6:	4631      	mov	r1, r6
 80067a8:	4628      	mov	r0, r5
 80067aa:	47b8      	blx	r7
 80067ac:	3001      	adds	r0, #1
 80067ae:	d1be      	bne.n	800672e <_printf_float+0x32a>
 80067b0:	e689      	b.n	80064c6 <_printf_float+0xc2>
 80067b2:	9a05      	ldr	r2, [sp, #20]
 80067b4:	464b      	mov	r3, r9
 80067b6:	4442      	add	r2, r8
 80067b8:	4631      	mov	r1, r6
 80067ba:	4628      	mov	r0, r5
 80067bc:	47b8      	blx	r7
 80067be:	3001      	adds	r0, #1
 80067c0:	d1c1      	bne.n	8006746 <_printf_float+0x342>
 80067c2:	e680      	b.n	80064c6 <_printf_float+0xc2>
 80067c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067c6:	2a01      	cmp	r2, #1
 80067c8:	dc01      	bgt.n	80067ce <_printf_float+0x3ca>
 80067ca:	07db      	lsls	r3, r3, #31
 80067cc:	d538      	bpl.n	8006840 <_printf_float+0x43c>
 80067ce:	2301      	movs	r3, #1
 80067d0:	4642      	mov	r2, r8
 80067d2:	4631      	mov	r1, r6
 80067d4:	4628      	mov	r0, r5
 80067d6:	47b8      	blx	r7
 80067d8:	3001      	adds	r0, #1
 80067da:	f43f ae74 	beq.w	80064c6 <_printf_float+0xc2>
 80067de:	ee18 3a10 	vmov	r3, s16
 80067e2:	4652      	mov	r2, sl
 80067e4:	4631      	mov	r1, r6
 80067e6:	4628      	mov	r0, r5
 80067e8:	47b8      	blx	r7
 80067ea:	3001      	adds	r0, #1
 80067ec:	f43f ae6b 	beq.w	80064c6 <_printf_float+0xc2>
 80067f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067f4:	2200      	movs	r2, #0
 80067f6:	2300      	movs	r3, #0
 80067f8:	f7fa f966 	bl	8000ac8 <__aeabi_dcmpeq>
 80067fc:	b9d8      	cbnz	r0, 8006836 <_printf_float+0x432>
 80067fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006800:	f108 0201 	add.w	r2, r8, #1
 8006804:	3b01      	subs	r3, #1
 8006806:	4631      	mov	r1, r6
 8006808:	4628      	mov	r0, r5
 800680a:	47b8      	blx	r7
 800680c:	3001      	adds	r0, #1
 800680e:	d10e      	bne.n	800682e <_printf_float+0x42a>
 8006810:	e659      	b.n	80064c6 <_printf_float+0xc2>
 8006812:	2301      	movs	r3, #1
 8006814:	4652      	mov	r2, sl
 8006816:	4631      	mov	r1, r6
 8006818:	4628      	mov	r0, r5
 800681a:	47b8      	blx	r7
 800681c:	3001      	adds	r0, #1
 800681e:	f43f ae52 	beq.w	80064c6 <_printf_float+0xc2>
 8006822:	f108 0801 	add.w	r8, r8, #1
 8006826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006828:	3b01      	subs	r3, #1
 800682a:	4543      	cmp	r3, r8
 800682c:	dcf1      	bgt.n	8006812 <_printf_float+0x40e>
 800682e:	464b      	mov	r3, r9
 8006830:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006834:	e6dc      	b.n	80065f0 <_printf_float+0x1ec>
 8006836:	f04f 0800 	mov.w	r8, #0
 800683a:	f104 0a1a 	add.w	sl, r4, #26
 800683e:	e7f2      	b.n	8006826 <_printf_float+0x422>
 8006840:	2301      	movs	r3, #1
 8006842:	4642      	mov	r2, r8
 8006844:	e7df      	b.n	8006806 <_printf_float+0x402>
 8006846:	2301      	movs	r3, #1
 8006848:	464a      	mov	r2, r9
 800684a:	4631      	mov	r1, r6
 800684c:	4628      	mov	r0, r5
 800684e:	47b8      	blx	r7
 8006850:	3001      	adds	r0, #1
 8006852:	f43f ae38 	beq.w	80064c6 <_printf_float+0xc2>
 8006856:	f108 0801 	add.w	r8, r8, #1
 800685a:	68e3      	ldr	r3, [r4, #12]
 800685c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800685e:	1a5b      	subs	r3, r3, r1
 8006860:	4543      	cmp	r3, r8
 8006862:	dcf0      	bgt.n	8006846 <_printf_float+0x442>
 8006864:	e6fa      	b.n	800665c <_printf_float+0x258>
 8006866:	f04f 0800 	mov.w	r8, #0
 800686a:	f104 0919 	add.w	r9, r4, #25
 800686e:	e7f4      	b.n	800685a <_printf_float+0x456>

08006870 <_printf_common>:
 8006870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006874:	4616      	mov	r6, r2
 8006876:	4699      	mov	r9, r3
 8006878:	688a      	ldr	r2, [r1, #8]
 800687a:	690b      	ldr	r3, [r1, #16]
 800687c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006880:	4293      	cmp	r3, r2
 8006882:	bfb8      	it	lt
 8006884:	4613      	movlt	r3, r2
 8006886:	6033      	str	r3, [r6, #0]
 8006888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800688c:	4607      	mov	r7, r0
 800688e:	460c      	mov	r4, r1
 8006890:	b10a      	cbz	r2, 8006896 <_printf_common+0x26>
 8006892:	3301      	adds	r3, #1
 8006894:	6033      	str	r3, [r6, #0]
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	0699      	lsls	r1, r3, #26
 800689a:	bf42      	ittt	mi
 800689c:	6833      	ldrmi	r3, [r6, #0]
 800689e:	3302      	addmi	r3, #2
 80068a0:	6033      	strmi	r3, [r6, #0]
 80068a2:	6825      	ldr	r5, [r4, #0]
 80068a4:	f015 0506 	ands.w	r5, r5, #6
 80068a8:	d106      	bne.n	80068b8 <_printf_common+0x48>
 80068aa:	f104 0a19 	add.w	sl, r4, #25
 80068ae:	68e3      	ldr	r3, [r4, #12]
 80068b0:	6832      	ldr	r2, [r6, #0]
 80068b2:	1a9b      	subs	r3, r3, r2
 80068b4:	42ab      	cmp	r3, r5
 80068b6:	dc26      	bgt.n	8006906 <_printf_common+0x96>
 80068b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068bc:	1e13      	subs	r3, r2, #0
 80068be:	6822      	ldr	r2, [r4, #0]
 80068c0:	bf18      	it	ne
 80068c2:	2301      	movne	r3, #1
 80068c4:	0692      	lsls	r2, r2, #26
 80068c6:	d42b      	bmi.n	8006920 <_printf_common+0xb0>
 80068c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068cc:	4649      	mov	r1, r9
 80068ce:	4638      	mov	r0, r7
 80068d0:	47c0      	blx	r8
 80068d2:	3001      	adds	r0, #1
 80068d4:	d01e      	beq.n	8006914 <_printf_common+0xa4>
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	68e5      	ldr	r5, [r4, #12]
 80068da:	6832      	ldr	r2, [r6, #0]
 80068dc:	f003 0306 	and.w	r3, r3, #6
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	bf08      	it	eq
 80068e4:	1aad      	subeq	r5, r5, r2
 80068e6:	68a3      	ldr	r3, [r4, #8]
 80068e8:	6922      	ldr	r2, [r4, #16]
 80068ea:	bf0c      	ite	eq
 80068ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068f0:	2500      	movne	r5, #0
 80068f2:	4293      	cmp	r3, r2
 80068f4:	bfc4      	itt	gt
 80068f6:	1a9b      	subgt	r3, r3, r2
 80068f8:	18ed      	addgt	r5, r5, r3
 80068fa:	2600      	movs	r6, #0
 80068fc:	341a      	adds	r4, #26
 80068fe:	42b5      	cmp	r5, r6
 8006900:	d11a      	bne.n	8006938 <_printf_common+0xc8>
 8006902:	2000      	movs	r0, #0
 8006904:	e008      	b.n	8006918 <_printf_common+0xa8>
 8006906:	2301      	movs	r3, #1
 8006908:	4652      	mov	r2, sl
 800690a:	4649      	mov	r1, r9
 800690c:	4638      	mov	r0, r7
 800690e:	47c0      	blx	r8
 8006910:	3001      	adds	r0, #1
 8006912:	d103      	bne.n	800691c <_printf_common+0xac>
 8006914:	f04f 30ff 	mov.w	r0, #4294967295
 8006918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691c:	3501      	adds	r5, #1
 800691e:	e7c6      	b.n	80068ae <_printf_common+0x3e>
 8006920:	18e1      	adds	r1, r4, r3
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	2030      	movs	r0, #48	; 0x30
 8006926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800692a:	4422      	add	r2, r4
 800692c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006934:	3302      	adds	r3, #2
 8006936:	e7c7      	b.n	80068c8 <_printf_common+0x58>
 8006938:	2301      	movs	r3, #1
 800693a:	4622      	mov	r2, r4
 800693c:	4649      	mov	r1, r9
 800693e:	4638      	mov	r0, r7
 8006940:	47c0      	blx	r8
 8006942:	3001      	adds	r0, #1
 8006944:	d0e6      	beq.n	8006914 <_printf_common+0xa4>
 8006946:	3601      	adds	r6, #1
 8006948:	e7d9      	b.n	80068fe <_printf_common+0x8e>
	...

0800694c <_printf_i>:
 800694c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006950:	460c      	mov	r4, r1
 8006952:	4691      	mov	r9, r2
 8006954:	7e27      	ldrb	r7, [r4, #24]
 8006956:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006958:	2f78      	cmp	r7, #120	; 0x78
 800695a:	4680      	mov	r8, r0
 800695c:	469a      	mov	sl, r3
 800695e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006962:	d807      	bhi.n	8006974 <_printf_i+0x28>
 8006964:	2f62      	cmp	r7, #98	; 0x62
 8006966:	d80a      	bhi.n	800697e <_printf_i+0x32>
 8006968:	2f00      	cmp	r7, #0
 800696a:	f000 80d8 	beq.w	8006b1e <_printf_i+0x1d2>
 800696e:	2f58      	cmp	r7, #88	; 0x58
 8006970:	f000 80a3 	beq.w	8006aba <_printf_i+0x16e>
 8006974:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800697c:	e03a      	b.n	80069f4 <_printf_i+0xa8>
 800697e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006982:	2b15      	cmp	r3, #21
 8006984:	d8f6      	bhi.n	8006974 <_printf_i+0x28>
 8006986:	a001      	add	r0, pc, #4	; (adr r0, 800698c <_printf_i+0x40>)
 8006988:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800698c:	080069e5 	.word	0x080069e5
 8006990:	080069f9 	.word	0x080069f9
 8006994:	08006975 	.word	0x08006975
 8006998:	08006975 	.word	0x08006975
 800699c:	08006975 	.word	0x08006975
 80069a0:	08006975 	.word	0x08006975
 80069a4:	080069f9 	.word	0x080069f9
 80069a8:	08006975 	.word	0x08006975
 80069ac:	08006975 	.word	0x08006975
 80069b0:	08006975 	.word	0x08006975
 80069b4:	08006975 	.word	0x08006975
 80069b8:	08006b05 	.word	0x08006b05
 80069bc:	08006a29 	.word	0x08006a29
 80069c0:	08006ae7 	.word	0x08006ae7
 80069c4:	08006975 	.word	0x08006975
 80069c8:	08006975 	.word	0x08006975
 80069cc:	08006b27 	.word	0x08006b27
 80069d0:	08006975 	.word	0x08006975
 80069d4:	08006a29 	.word	0x08006a29
 80069d8:	08006975 	.word	0x08006975
 80069dc:	08006975 	.word	0x08006975
 80069e0:	08006aef 	.word	0x08006aef
 80069e4:	680b      	ldr	r3, [r1, #0]
 80069e6:	1d1a      	adds	r2, r3, #4
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	600a      	str	r2, [r1, #0]
 80069ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80069f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069f4:	2301      	movs	r3, #1
 80069f6:	e0a3      	b.n	8006b40 <_printf_i+0x1f4>
 80069f8:	6825      	ldr	r5, [r4, #0]
 80069fa:	6808      	ldr	r0, [r1, #0]
 80069fc:	062e      	lsls	r6, r5, #24
 80069fe:	f100 0304 	add.w	r3, r0, #4
 8006a02:	d50a      	bpl.n	8006a1a <_printf_i+0xce>
 8006a04:	6805      	ldr	r5, [r0, #0]
 8006a06:	600b      	str	r3, [r1, #0]
 8006a08:	2d00      	cmp	r5, #0
 8006a0a:	da03      	bge.n	8006a14 <_printf_i+0xc8>
 8006a0c:	232d      	movs	r3, #45	; 0x2d
 8006a0e:	426d      	negs	r5, r5
 8006a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a14:	485e      	ldr	r0, [pc, #376]	; (8006b90 <_printf_i+0x244>)
 8006a16:	230a      	movs	r3, #10
 8006a18:	e019      	b.n	8006a4e <_printf_i+0x102>
 8006a1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006a1e:	6805      	ldr	r5, [r0, #0]
 8006a20:	600b      	str	r3, [r1, #0]
 8006a22:	bf18      	it	ne
 8006a24:	b22d      	sxthne	r5, r5
 8006a26:	e7ef      	b.n	8006a08 <_printf_i+0xbc>
 8006a28:	680b      	ldr	r3, [r1, #0]
 8006a2a:	6825      	ldr	r5, [r4, #0]
 8006a2c:	1d18      	adds	r0, r3, #4
 8006a2e:	6008      	str	r0, [r1, #0]
 8006a30:	0628      	lsls	r0, r5, #24
 8006a32:	d501      	bpl.n	8006a38 <_printf_i+0xec>
 8006a34:	681d      	ldr	r5, [r3, #0]
 8006a36:	e002      	b.n	8006a3e <_printf_i+0xf2>
 8006a38:	0669      	lsls	r1, r5, #25
 8006a3a:	d5fb      	bpl.n	8006a34 <_printf_i+0xe8>
 8006a3c:	881d      	ldrh	r5, [r3, #0]
 8006a3e:	4854      	ldr	r0, [pc, #336]	; (8006b90 <_printf_i+0x244>)
 8006a40:	2f6f      	cmp	r7, #111	; 0x6f
 8006a42:	bf0c      	ite	eq
 8006a44:	2308      	moveq	r3, #8
 8006a46:	230a      	movne	r3, #10
 8006a48:	2100      	movs	r1, #0
 8006a4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a4e:	6866      	ldr	r6, [r4, #4]
 8006a50:	60a6      	str	r6, [r4, #8]
 8006a52:	2e00      	cmp	r6, #0
 8006a54:	bfa2      	ittt	ge
 8006a56:	6821      	ldrge	r1, [r4, #0]
 8006a58:	f021 0104 	bicge.w	r1, r1, #4
 8006a5c:	6021      	strge	r1, [r4, #0]
 8006a5e:	b90d      	cbnz	r5, 8006a64 <_printf_i+0x118>
 8006a60:	2e00      	cmp	r6, #0
 8006a62:	d04d      	beq.n	8006b00 <_printf_i+0x1b4>
 8006a64:	4616      	mov	r6, r2
 8006a66:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a6a:	fb03 5711 	mls	r7, r3, r1, r5
 8006a6e:	5dc7      	ldrb	r7, [r0, r7]
 8006a70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a74:	462f      	mov	r7, r5
 8006a76:	42bb      	cmp	r3, r7
 8006a78:	460d      	mov	r5, r1
 8006a7a:	d9f4      	bls.n	8006a66 <_printf_i+0x11a>
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d10b      	bne.n	8006a98 <_printf_i+0x14c>
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	07df      	lsls	r7, r3, #31
 8006a84:	d508      	bpl.n	8006a98 <_printf_i+0x14c>
 8006a86:	6923      	ldr	r3, [r4, #16]
 8006a88:	6861      	ldr	r1, [r4, #4]
 8006a8a:	4299      	cmp	r1, r3
 8006a8c:	bfde      	ittt	le
 8006a8e:	2330      	movle	r3, #48	; 0x30
 8006a90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a98:	1b92      	subs	r2, r2, r6
 8006a9a:	6122      	str	r2, [r4, #16]
 8006a9c:	f8cd a000 	str.w	sl, [sp]
 8006aa0:	464b      	mov	r3, r9
 8006aa2:	aa03      	add	r2, sp, #12
 8006aa4:	4621      	mov	r1, r4
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	f7ff fee2 	bl	8006870 <_printf_common>
 8006aac:	3001      	adds	r0, #1
 8006aae:	d14c      	bne.n	8006b4a <_printf_i+0x1fe>
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	b004      	add	sp, #16
 8006ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aba:	4835      	ldr	r0, [pc, #212]	; (8006b90 <_printf_i+0x244>)
 8006abc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ac0:	6823      	ldr	r3, [r4, #0]
 8006ac2:	680e      	ldr	r6, [r1, #0]
 8006ac4:	061f      	lsls	r7, r3, #24
 8006ac6:	f856 5b04 	ldr.w	r5, [r6], #4
 8006aca:	600e      	str	r6, [r1, #0]
 8006acc:	d514      	bpl.n	8006af8 <_printf_i+0x1ac>
 8006ace:	07d9      	lsls	r1, r3, #31
 8006ad0:	bf44      	itt	mi
 8006ad2:	f043 0320 	orrmi.w	r3, r3, #32
 8006ad6:	6023      	strmi	r3, [r4, #0]
 8006ad8:	b91d      	cbnz	r5, 8006ae2 <_printf_i+0x196>
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	f023 0320 	bic.w	r3, r3, #32
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	2310      	movs	r3, #16
 8006ae4:	e7b0      	b.n	8006a48 <_printf_i+0xfc>
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	f043 0320 	orr.w	r3, r3, #32
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	2378      	movs	r3, #120	; 0x78
 8006af0:	4828      	ldr	r0, [pc, #160]	; (8006b94 <_printf_i+0x248>)
 8006af2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006af6:	e7e3      	b.n	8006ac0 <_printf_i+0x174>
 8006af8:	065e      	lsls	r6, r3, #25
 8006afa:	bf48      	it	mi
 8006afc:	b2ad      	uxthmi	r5, r5
 8006afe:	e7e6      	b.n	8006ace <_printf_i+0x182>
 8006b00:	4616      	mov	r6, r2
 8006b02:	e7bb      	b.n	8006a7c <_printf_i+0x130>
 8006b04:	680b      	ldr	r3, [r1, #0]
 8006b06:	6826      	ldr	r6, [r4, #0]
 8006b08:	6960      	ldr	r0, [r4, #20]
 8006b0a:	1d1d      	adds	r5, r3, #4
 8006b0c:	600d      	str	r5, [r1, #0]
 8006b0e:	0635      	lsls	r5, r6, #24
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	d501      	bpl.n	8006b18 <_printf_i+0x1cc>
 8006b14:	6018      	str	r0, [r3, #0]
 8006b16:	e002      	b.n	8006b1e <_printf_i+0x1d2>
 8006b18:	0671      	lsls	r1, r6, #25
 8006b1a:	d5fb      	bpl.n	8006b14 <_printf_i+0x1c8>
 8006b1c:	8018      	strh	r0, [r3, #0]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	6123      	str	r3, [r4, #16]
 8006b22:	4616      	mov	r6, r2
 8006b24:	e7ba      	b.n	8006a9c <_printf_i+0x150>
 8006b26:	680b      	ldr	r3, [r1, #0]
 8006b28:	1d1a      	adds	r2, r3, #4
 8006b2a:	600a      	str	r2, [r1, #0]
 8006b2c:	681e      	ldr	r6, [r3, #0]
 8006b2e:	6862      	ldr	r2, [r4, #4]
 8006b30:	2100      	movs	r1, #0
 8006b32:	4630      	mov	r0, r6
 8006b34:	f7f9 fb54 	bl	80001e0 <memchr>
 8006b38:	b108      	cbz	r0, 8006b3e <_printf_i+0x1f2>
 8006b3a:	1b80      	subs	r0, r0, r6
 8006b3c:	6060      	str	r0, [r4, #4]
 8006b3e:	6863      	ldr	r3, [r4, #4]
 8006b40:	6123      	str	r3, [r4, #16]
 8006b42:	2300      	movs	r3, #0
 8006b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b48:	e7a8      	b.n	8006a9c <_printf_i+0x150>
 8006b4a:	6923      	ldr	r3, [r4, #16]
 8006b4c:	4632      	mov	r2, r6
 8006b4e:	4649      	mov	r1, r9
 8006b50:	4640      	mov	r0, r8
 8006b52:	47d0      	blx	sl
 8006b54:	3001      	adds	r0, #1
 8006b56:	d0ab      	beq.n	8006ab0 <_printf_i+0x164>
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	079b      	lsls	r3, r3, #30
 8006b5c:	d413      	bmi.n	8006b86 <_printf_i+0x23a>
 8006b5e:	68e0      	ldr	r0, [r4, #12]
 8006b60:	9b03      	ldr	r3, [sp, #12]
 8006b62:	4298      	cmp	r0, r3
 8006b64:	bfb8      	it	lt
 8006b66:	4618      	movlt	r0, r3
 8006b68:	e7a4      	b.n	8006ab4 <_printf_i+0x168>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	4632      	mov	r2, r6
 8006b6e:	4649      	mov	r1, r9
 8006b70:	4640      	mov	r0, r8
 8006b72:	47d0      	blx	sl
 8006b74:	3001      	adds	r0, #1
 8006b76:	d09b      	beq.n	8006ab0 <_printf_i+0x164>
 8006b78:	3501      	adds	r5, #1
 8006b7a:	68e3      	ldr	r3, [r4, #12]
 8006b7c:	9903      	ldr	r1, [sp, #12]
 8006b7e:	1a5b      	subs	r3, r3, r1
 8006b80:	42ab      	cmp	r3, r5
 8006b82:	dcf2      	bgt.n	8006b6a <_printf_i+0x21e>
 8006b84:	e7eb      	b.n	8006b5e <_printf_i+0x212>
 8006b86:	2500      	movs	r5, #0
 8006b88:	f104 0619 	add.w	r6, r4, #25
 8006b8c:	e7f5      	b.n	8006b7a <_printf_i+0x22e>
 8006b8e:	bf00      	nop
 8006b90:	08009052 	.word	0x08009052
 8006b94:	08009063 	.word	0x08009063

08006b98 <siprintf>:
 8006b98:	b40e      	push	{r1, r2, r3}
 8006b9a:	b500      	push	{lr}
 8006b9c:	b09c      	sub	sp, #112	; 0x70
 8006b9e:	ab1d      	add	r3, sp, #116	; 0x74
 8006ba0:	9002      	str	r0, [sp, #8]
 8006ba2:	9006      	str	r0, [sp, #24]
 8006ba4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ba8:	4809      	ldr	r0, [pc, #36]	; (8006bd0 <siprintf+0x38>)
 8006baa:	9107      	str	r1, [sp, #28]
 8006bac:	9104      	str	r1, [sp, #16]
 8006bae:	4909      	ldr	r1, [pc, #36]	; (8006bd4 <siprintf+0x3c>)
 8006bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bb4:	9105      	str	r1, [sp, #20]
 8006bb6:	6800      	ldr	r0, [r0, #0]
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	a902      	add	r1, sp, #8
 8006bbc:	f001 fb64 	bl	8008288 <_svfiprintf_r>
 8006bc0:	9b02      	ldr	r3, [sp, #8]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	701a      	strb	r2, [r3, #0]
 8006bc6:	b01c      	add	sp, #112	; 0x70
 8006bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bcc:	b003      	add	sp, #12
 8006bce:	4770      	bx	lr
 8006bd0:	2000001c 	.word	0x2000001c
 8006bd4:	ffff0208 	.word	0xffff0208

08006bd8 <__assert_func>:
 8006bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bda:	4614      	mov	r4, r2
 8006bdc:	461a      	mov	r2, r3
 8006bde:	4b09      	ldr	r3, [pc, #36]	; (8006c04 <__assert_func+0x2c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4605      	mov	r5, r0
 8006be4:	68d8      	ldr	r0, [r3, #12]
 8006be6:	b14c      	cbz	r4, 8006bfc <__assert_func+0x24>
 8006be8:	4b07      	ldr	r3, [pc, #28]	; (8006c08 <__assert_func+0x30>)
 8006bea:	9100      	str	r1, [sp, #0]
 8006bec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006bf0:	4906      	ldr	r1, [pc, #24]	; (8006c0c <__assert_func+0x34>)
 8006bf2:	462b      	mov	r3, r5
 8006bf4:	f000 fe88 	bl	8007908 <fiprintf>
 8006bf8:	f001 fe70 	bl	80088dc <abort>
 8006bfc:	4b04      	ldr	r3, [pc, #16]	; (8006c10 <__assert_func+0x38>)
 8006bfe:	461c      	mov	r4, r3
 8006c00:	e7f3      	b.n	8006bea <__assert_func+0x12>
 8006c02:	bf00      	nop
 8006c04:	2000001c 	.word	0x2000001c
 8006c08:	08009074 	.word	0x08009074
 8006c0c:	08009081 	.word	0x08009081
 8006c10:	080090af 	.word	0x080090af

08006c14 <quorem>:
 8006c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c18:	6903      	ldr	r3, [r0, #16]
 8006c1a:	690c      	ldr	r4, [r1, #16]
 8006c1c:	42a3      	cmp	r3, r4
 8006c1e:	4607      	mov	r7, r0
 8006c20:	f2c0 8081 	blt.w	8006d26 <quorem+0x112>
 8006c24:	3c01      	subs	r4, #1
 8006c26:	f101 0814 	add.w	r8, r1, #20
 8006c2a:	f100 0514 	add.w	r5, r0, #20
 8006c2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c32:	9301      	str	r3, [sp, #4]
 8006c34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c48:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c4c:	d331      	bcc.n	8006cb2 <quorem+0x9e>
 8006c4e:	f04f 0e00 	mov.w	lr, #0
 8006c52:	4640      	mov	r0, r8
 8006c54:	46ac      	mov	ip, r5
 8006c56:	46f2      	mov	sl, lr
 8006c58:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c5c:	b293      	uxth	r3, r2
 8006c5e:	fb06 e303 	mla	r3, r6, r3, lr
 8006c62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	ebaa 0303 	sub.w	r3, sl, r3
 8006c6c:	0c12      	lsrs	r2, r2, #16
 8006c6e:	f8dc a000 	ldr.w	sl, [ip]
 8006c72:	fb06 e202 	mla	r2, r6, r2, lr
 8006c76:	fa13 f38a 	uxtah	r3, r3, sl
 8006c7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c7e:	fa1f fa82 	uxth.w	sl, r2
 8006c82:	f8dc 2000 	ldr.w	r2, [ip]
 8006c86:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006c8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c94:	4581      	cmp	r9, r0
 8006c96:	f84c 3b04 	str.w	r3, [ip], #4
 8006c9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c9e:	d2db      	bcs.n	8006c58 <quorem+0x44>
 8006ca0:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ca4:	b92b      	cbnz	r3, 8006cb2 <quorem+0x9e>
 8006ca6:	9b01      	ldr	r3, [sp, #4]
 8006ca8:	3b04      	subs	r3, #4
 8006caa:	429d      	cmp	r5, r3
 8006cac:	461a      	mov	r2, r3
 8006cae:	d32e      	bcc.n	8006d0e <quorem+0xfa>
 8006cb0:	613c      	str	r4, [r7, #16]
 8006cb2:	4638      	mov	r0, r7
 8006cb4:	f001 f8d2 	bl	8007e5c <__mcmp>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	db24      	blt.n	8006d06 <quorem+0xf2>
 8006cbc:	3601      	adds	r6, #1
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f04f 0c00 	mov.w	ip, #0
 8006cc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8006cc8:	f8d0 e000 	ldr.w	lr, [r0]
 8006ccc:	b293      	uxth	r3, r2
 8006cce:	ebac 0303 	sub.w	r3, ip, r3
 8006cd2:	0c12      	lsrs	r2, r2, #16
 8006cd4:	fa13 f38e 	uxtah	r3, r3, lr
 8006cd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006cdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ce6:	45c1      	cmp	r9, r8
 8006ce8:	f840 3b04 	str.w	r3, [r0], #4
 8006cec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006cf0:	d2e8      	bcs.n	8006cc4 <quorem+0xb0>
 8006cf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cfa:	b922      	cbnz	r2, 8006d06 <quorem+0xf2>
 8006cfc:	3b04      	subs	r3, #4
 8006cfe:	429d      	cmp	r5, r3
 8006d00:	461a      	mov	r2, r3
 8006d02:	d30a      	bcc.n	8006d1a <quorem+0x106>
 8006d04:	613c      	str	r4, [r7, #16]
 8006d06:	4630      	mov	r0, r6
 8006d08:	b003      	add	sp, #12
 8006d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0e:	6812      	ldr	r2, [r2, #0]
 8006d10:	3b04      	subs	r3, #4
 8006d12:	2a00      	cmp	r2, #0
 8006d14:	d1cc      	bne.n	8006cb0 <quorem+0x9c>
 8006d16:	3c01      	subs	r4, #1
 8006d18:	e7c7      	b.n	8006caa <quorem+0x96>
 8006d1a:	6812      	ldr	r2, [r2, #0]
 8006d1c:	3b04      	subs	r3, #4
 8006d1e:	2a00      	cmp	r2, #0
 8006d20:	d1f0      	bne.n	8006d04 <quorem+0xf0>
 8006d22:	3c01      	subs	r4, #1
 8006d24:	e7eb      	b.n	8006cfe <quorem+0xea>
 8006d26:	2000      	movs	r0, #0
 8006d28:	e7ee      	b.n	8006d08 <quorem+0xf4>
 8006d2a:	0000      	movs	r0, r0
 8006d2c:	0000      	movs	r0, r0
	...

08006d30 <_dtoa_r>:
 8006d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d34:	ed2d 8b02 	vpush	{d8}
 8006d38:	ec57 6b10 	vmov	r6, r7, d0
 8006d3c:	b095      	sub	sp, #84	; 0x54
 8006d3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006d44:	9105      	str	r1, [sp, #20]
 8006d46:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d50:	b975      	cbnz	r5, 8006d70 <_dtoa_r+0x40>
 8006d52:	2010      	movs	r0, #16
 8006d54:	f000 fdee 	bl	8007934 <malloc>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	6260      	str	r0, [r4, #36]	; 0x24
 8006d5c:	b920      	cbnz	r0, 8006d68 <_dtoa_r+0x38>
 8006d5e:	4bb2      	ldr	r3, [pc, #712]	; (8007028 <_dtoa_r+0x2f8>)
 8006d60:	21ea      	movs	r1, #234	; 0xea
 8006d62:	48b2      	ldr	r0, [pc, #712]	; (800702c <_dtoa_r+0x2fc>)
 8006d64:	f7ff ff38 	bl	8006bd8 <__assert_func>
 8006d68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d6c:	6005      	str	r5, [r0, #0]
 8006d6e:	60c5      	str	r5, [r0, #12]
 8006d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d72:	6819      	ldr	r1, [r3, #0]
 8006d74:	b151      	cbz	r1, 8006d8c <_dtoa_r+0x5c>
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	604a      	str	r2, [r1, #4]
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	4093      	lsls	r3, r2
 8006d7e:	608b      	str	r3, [r1, #8]
 8006d80:	4620      	mov	r0, r4
 8006d82:	f000 fe2d 	bl	80079e0 <_Bfree>
 8006d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	1e3b      	subs	r3, r7, #0
 8006d8e:	bfb9      	ittee	lt
 8006d90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d94:	9303      	strlt	r3, [sp, #12]
 8006d96:	2300      	movge	r3, #0
 8006d98:	f8c8 3000 	strge.w	r3, [r8]
 8006d9c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006da0:	4ba3      	ldr	r3, [pc, #652]	; (8007030 <_dtoa_r+0x300>)
 8006da2:	bfbc      	itt	lt
 8006da4:	2201      	movlt	r2, #1
 8006da6:	f8c8 2000 	strlt.w	r2, [r8]
 8006daa:	ea33 0309 	bics.w	r3, r3, r9
 8006dae:	d11b      	bne.n	8006de8 <_dtoa_r+0xb8>
 8006db0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006db2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006dbc:	4333      	orrs	r3, r6
 8006dbe:	f000 857a 	beq.w	80078b6 <_dtoa_r+0xb86>
 8006dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dc4:	b963      	cbnz	r3, 8006de0 <_dtoa_r+0xb0>
 8006dc6:	4b9b      	ldr	r3, [pc, #620]	; (8007034 <_dtoa_r+0x304>)
 8006dc8:	e024      	b.n	8006e14 <_dtoa_r+0xe4>
 8006dca:	4b9b      	ldr	r3, [pc, #620]	; (8007038 <_dtoa_r+0x308>)
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	9800      	ldr	r0, [sp, #0]
 8006dd6:	b015      	add	sp, #84	; 0x54
 8006dd8:	ecbd 8b02 	vpop	{d8}
 8006ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de0:	4b94      	ldr	r3, [pc, #592]	; (8007034 <_dtoa_r+0x304>)
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	3303      	adds	r3, #3
 8006de6:	e7f3      	b.n	8006dd0 <_dtoa_r+0xa0>
 8006de8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006dec:	2200      	movs	r2, #0
 8006dee:	ec51 0b17 	vmov	r0, r1, d7
 8006df2:	2300      	movs	r3, #0
 8006df4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006df8:	f7f9 fe66 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dfc:	4680      	mov	r8, r0
 8006dfe:	b158      	cbz	r0, 8006e18 <_dtoa_r+0xe8>
 8006e00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e02:	2301      	movs	r3, #1
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 8551 	beq.w	80078b0 <_dtoa_r+0xb80>
 8006e0e:	488b      	ldr	r0, [pc, #556]	; (800703c <_dtoa_r+0x30c>)
 8006e10:	6018      	str	r0, [r3, #0]
 8006e12:	1e43      	subs	r3, r0, #1
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	e7dd      	b.n	8006dd4 <_dtoa_r+0xa4>
 8006e18:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006e1c:	aa12      	add	r2, sp, #72	; 0x48
 8006e1e:	a913      	add	r1, sp, #76	; 0x4c
 8006e20:	4620      	mov	r0, r4
 8006e22:	f001 f8bf 	bl	8007fa4 <__d2b>
 8006e26:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e2a:	4683      	mov	fp, r0
 8006e2c:	2d00      	cmp	r5, #0
 8006e2e:	d07c      	beq.n	8006f2a <_dtoa_r+0x1fa>
 8006e30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e32:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006e36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e3a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006e3e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006e42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006e46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006e4a:	4b7d      	ldr	r3, [pc, #500]	; (8007040 <_dtoa_r+0x310>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	4630      	mov	r0, r6
 8006e50:	4639      	mov	r1, r7
 8006e52:	f7f9 fa19 	bl	8000288 <__aeabi_dsub>
 8006e56:	a36e      	add	r3, pc, #440	; (adr r3, 8007010 <_dtoa_r+0x2e0>)
 8006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5c:	f7f9 fbcc 	bl	80005f8 <__aeabi_dmul>
 8006e60:	a36d      	add	r3, pc, #436	; (adr r3, 8007018 <_dtoa_r+0x2e8>)
 8006e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e66:	f7f9 fa11 	bl	800028c <__adddf3>
 8006e6a:	4606      	mov	r6, r0
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	460f      	mov	r7, r1
 8006e70:	f7f9 fb58 	bl	8000524 <__aeabi_i2d>
 8006e74:	a36a      	add	r3, pc, #424	; (adr r3, 8007020 <_dtoa_r+0x2f0>)
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	f7f9 fbbd 	bl	80005f8 <__aeabi_dmul>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	4630      	mov	r0, r6
 8006e84:	4639      	mov	r1, r7
 8006e86:	f7f9 fa01 	bl	800028c <__adddf3>
 8006e8a:	4606      	mov	r6, r0
 8006e8c:	460f      	mov	r7, r1
 8006e8e:	f7f9 fe63 	bl	8000b58 <__aeabi_d2iz>
 8006e92:	2200      	movs	r2, #0
 8006e94:	4682      	mov	sl, r0
 8006e96:	2300      	movs	r3, #0
 8006e98:	4630      	mov	r0, r6
 8006e9a:	4639      	mov	r1, r7
 8006e9c:	f7f9 fe1e 	bl	8000adc <__aeabi_dcmplt>
 8006ea0:	b148      	cbz	r0, 8006eb6 <_dtoa_r+0x186>
 8006ea2:	4650      	mov	r0, sl
 8006ea4:	f7f9 fb3e 	bl	8000524 <__aeabi_i2d>
 8006ea8:	4632      	mov	r2, r6
 8006eaa:	463b      	mov	r3, r7
 8006eac:	f7f9 fe0c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006eb0:	b908      	cbnz	r0, 8006eb6 <_dtoa_r+0x186>
 8006eb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006eb6:	f1ba 0f16 	cmp.w	sl, #22
 8006eba:	d854      	bhi.n	8006f66 <_dtoa_r+0x236>
 8006ebc:	4b61      	ldr	r3, [pc, #388]	; (8007044 <_dtoa_r+0x314>)
 8006ebe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006eca:	f7f9 fe07 	bl	8000adc <__aeabi_dcmplt>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	d04b      	beq.n	8006f6a <_dtoa_r+0x23a>
 8006ed2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	930e      	str	r3, [sp, #56]	; 0x38
 8006eda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006edc:	1b5d      	subs	r5, r3, r5
 8006ede:	1e6b      	subs	r3, r5, #1
 8006ee0:	9304      	str	r3, [sp, #16]
 8006ee2:	bf43      	ittte	mi
 8006ee4:	2300      	movmi	r3, #0
 8006ee6:	f1c5 0801 	rsbmi	r8, r5, #1
 8006eea:	9304      	strmi	r3, [sp, #16]
 8006eec:	f04f 0800 	movpl.w	r8, #0
 8006ef0:	f1ba 0f00 	cmp.w	sl, #0
 8006ef4:	db3b      	blt.n	8006f6e <_dtoa_r+0x23e>
 8006ef6:	9b04      	ldr	r3, [sp, #16]
 8006ef8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006efc:	4453      	add	r3, sl
 8006efe:	9304      	str	r3, [sp, #16]
 8006f00:	2300      	movs	r3, #0
 8006f02:	9306      	str	r3, [sp, #24]
 8006f04:	9b05      	ldr	r3, [sp, #20]
 8006f06:	2b09      	cmp	r3, #9
 8006f08:	d869      	bhi.n	8006fde <_dtoa_r+0x2ae>
 8006f0a:	2b05      	cmp	r3, #5
 8006f0c:	bfc4      	itt	gt
 8006f0e:	3b04      	subgt	r3, #4
 8006f10:	9305      	strgt	r3, [sp, #20]
 8006f12:	9b05      	ldr	r3, [sp, #20]
 8006f14:	f1a3 0302 	sub.w	r3, r3, #2
 8006f18:	bfcc      	ite	gt
 8006f1a:	2500      	movgt	r5, #0
 8006f1c:	2501      	movle	r5, #1
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d869      	bhi.n	8006ff6 <_dtoa_r+0x2c6>
 8006f22:	e8df f003 	tbb	[pc, r3]
 8006f26:	4e2c      	.short	0x4e2c
 8006f28:	5a4c      	.short	0x5a4c
 8006f2a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006f2e:	441d      	add	r5, r3
 8006f30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006f34:	2b20      	cmp	r3, #32
 8006f36:	bfc1      	itttt	gt
 8006f38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f3c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006f40:	fa09 f303 	lslgt.w	r3, r9, r3
 8006f44:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006f48:	bfda      	itte	le
 8006f4a:	f1c3 0320 	rsble	r3, r3, #32
 8006f4e:	fa06 f003 	lslle.w	r0, r6, r3
 8006f52:	4318      	orrgt	r0, r3
 8006f54:	f7f9 fad6 	bl	8000504 <__aeabi_ui2d>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	4606      	mov	r6, r0
 8006f5c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006f60:	3d01      	subs	r5, #1
 8006f62:	9310      	str	r3, [sp, #64]	; 0x40
 8006f64:	e771      	b.n	8006e4a <_dtoa_r+0x11a>
 8006f66:	2301      	movs	r3, #1
 8006f68:	e7b6      	b.n	8006ed8 <_dtoa_r+0x1a8>
 8006f6a:	900e      	str	r0, [sp, #56]	; 0x38
 8006f6c:	e7b5      	b.n	8006eda <_dtoa_r+0x1aa>
 8006f6e:	f1ca 0300 	rsb	r3, sl, #0
 8006f72:	9306      	str	r3, [sp, #24]
 8006f74:	2300      	movs	r3, #0
 8006f76:	eba8 080a 	sub.w	r8, r8, sl
 8006f7a:	930d      	str	r3, [sp, #52]	; 0x34
 8006f7c:	e7c2      	b.n	8006f04 <_dtoa_r+0x1d4>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	9308      	str	r3, [sp, #32]
 8006f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	dc39      	bgt.n	8006ffc <_dtoa_r+0x2cc>
 8006f88:	f04f 0901 	mov.w	r9, #1
 8006f8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006f90:	464b      	mov	r3, r9
 8006f92:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006f96:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006f98:	2200      	movs	r2, #0
 8006f9a:	6042      	str	r2, [r0, #4]
 8006f9c:	2204      	movs	r2, #4
 8006f9e:	f102 0614 	add.w	r6, r2, #20
 8006fa2:	429e      	cmp	r6, r3
 8006fa4:	6841      	ldr	r1, [r0, #4]
 8006fa6:	d92f      	bls.n	8007008 <_dtoa_r+0x2d8>
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f000 fcd9 	bl	8007960 <_Balloc>
 8006fae:	9000      	str	r0, [sp, #0]
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d14b      	bne.n	800704c <_dtoa_r+0x31c>
 8006fb4:	4b24      	ldr	r3, [pc, #144]	; (8007048 <_dtoa_r+0x318>)
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006fbc:	e6d1      	b.n	8006d62 <_dtoa_r+0x32>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e7de      	b.n	8006f80 <_dtoa_r+0x250>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	9308      	str	r3, [sp, #32]
 8006fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc8:	eb0a 0903 	add.w	r9, sl, r3
 8006fcc:	f109 0301 	add.w	r3, r9, #1
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	9301      	str	r3, [sp, #4]
 8006fd4:	bfb8      	it	lt
 8006fd6:	2301      	movlt	r3, #1
 8006fd8:	e7dd      	b.n	8006f96 <_dtoa_r+0x266>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e7f2      	b.n	8006fc4 <_dtoa_r+0x294>
 8006fde:	2501      	movs	r5, #1
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	9305      	str	r3, [sp, #20]
 8006fe4:	9508      	str	r5, [sp, #32]
 8006fe6:	f04f 39ff 	mov.w	r9, #4294967295
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ff0:	2312      	movs	r3, #18
 8006ff2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ff4:	e7cf      	b.n	8006f96 <_dtoa_r+0x266>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	9308      	str	r3, [sp, #32]
 8006ffa:	e7f4      	b.n	8006fe6 <_dtoa_r+0x2b6>
 8006ffc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007000:	f8cd 9004 	str.w	r9, [sp, #4]
 8007004:	464b      	mov	r3, r9
 8007006:	e7c6      	b.n	8006f96 <_dtoa_r+0x266>
 8007008:	3101      	adds	r1, #1
 800700a:	6041      	str	r1, [r0, #4]
 800700c:	0052      	lsls	r2, r2, #1
 800700e:	e7c6      	b.n	8006f9e <_dtoa_r+0x26e>
 8007010:	636f4361 	.word	0x636f4361
 8007014:	3fd287a7 	.word	0x3fd287a7
 8007018:	8b60c8b3 	.word	0x8b60c8b3
 800701c:	3fc68a28 	.word	0x3fc68a28
 8007020:	509f79fb 	.word	0x509f79fb
 8007024:	3fd34413 	.word	0x3fd34413
 8007028:	080091be 	.word	0x080091be
 800702c:	080091d5 	.word	0x080091d5
 8007030:	7ff00000 	.word	0x7ff00000
 8007034:	080091ba 	.word	0x080091ba
 8007038:	080091b1 	.word	0x080091b1
 800703c:	08009051 	.word	0x08009051
 8007040:	3ff80000 	.word	0x3ff80000
 8007044:	080092d0 	.word	0x080092d0
 8007048:	08009234 	.word	0x08009234
 800704c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800704e:	9a00      	ldr	r2, [sp, #0]
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	9b01      	ldr	r3, [sp, #4]
 8007054:	2b0e      	cmp	r3, #14
 8007056:	f200 80ad 	bhi.w	80071b4 <_dtoa_r+0x484>
 800705a:	2d00      	cmp	r5, #0
 800705c:	f000 80aa 	beq.w	80071b4 <_dtoa_r+0x484>
 8007060:	f1ba 0f00 	cmp.w	sl, #0
 8007064:	dd36      	ble.n	80070d4 <_dtoa_r+0x3a4>
 8007066:	4ac3      	ldr	r2, [pc, #780]	; (8007374 <_dtoa_r+0x644>)
 8007068:	f00a 030f 	and.w	r3, sl, #15
 800706c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007070:	ed93 7b00 	vldr	d7, [r3]
 8007074:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007078:	ea4f 172a 	mov.w	r7, sl, asr #4
 800707c:	eeb0 8a47 	vmov.f32	s16, s14
 8007080:	eef0 8a67 	vmov.f32	s17, s15
 8007084:	d016      	beq.n	80070b4 <_dtoa_r+0x384>
 8007086:	4bbc      	ldr	r3, [pc, #752]	; (8007378 <_dtoa_r+0x648>)
 8007088:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800708c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007090:	f7f9 fbdc 	bl	800084c <__aeabi_ddiv>
 8007094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007098:	f007 070f 	and.w	r7, r7, #15
 800709c:	2503      	movs	r5, #3
 800709e:	4eb6      	ldr	r6, [pc, #728]	; (8007378 <_dtoa_r+0x648>)
 80070a0:	b957      	cbnz	r7, 80070b8 <_dtoa_r+0x388>
 80070a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070a6:	ec53 2b18 	vmov	r2, r3, d8
 80070aa:	f7f9 fbcf 	bl	800084c <__aeabi_ddiv>
 80070ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070b2:	e029      	b.n	8007108 <_dtoa_r+0x3d8>
 80070b4:	2502      	movs	r5, #2
 80070b6:	e7f2      	b.n	800709e <_dtoa_r+0x36e>
 80070b8:	07f9      	lsls	r1, r7, #31
 80070ba:	d508      	bpl.n	80070ce <_dtoa_r+0x39e>
 80070bc:	ec51 0b18 	vmov	r0, r1, d8
 80070c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070c4:	f7f9 fa98 	bl	80005f8 <__aeabi_dmul>
 80070c8:	ec41 0b18 	vmov	d8, r0, r1
 80070cc:	3501      	adds	r5, #1
 80070ce:	107f      	asrs	r7, r7, #1
 80070d0:	3608      	adds	r6, #8
 80070d2:	e7e5      	b.n	80070a0 <_dtoa_r+0x370>
 80070d4:	f000 80a6 	beq.w	8007224 <_dtoa_r+0x4f4>
 80070d8:	f1ca 0600 	rsb	r6, sl, #0
 80070dc:	4ba5      	ldr	r3, [pc, #660]	; (8007374 <_dtoa_r+0x644>)
 80070de:	4fa6      	ldr	r7, [pc, #664]	; (8007378 <_dtoa_r+0x648>)
 80070e0:	f006 020f 	and.w	r2, r6, #15
 80070e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80070f0:	f7f9 fa82 	bl	80005f8 <__aeabi_dmul>
 80070f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070f8:	1136      	asrs	r6, r6, #4
 80070fa:	2300      	movs	r3, #0
 80070fc:	2502      	movs	r5, #2
 80070fe:	2e00      	cmp	r6, #0
 8007100:	f040 8085 	bne.w	800720e <_dtoa_r+0x4de>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1d2      	bne.n	80070ae <_dtoa_r+0x37e>
 8007108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 808c 	beq.w	8007228 <_dtoa_r+0x4f8>
 8007110:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007114:	4b99      	ldr	r3, [pc, #612]	; (800737c <_dtoa_r+0x64c>)
 8007116:	2200      	movs	r2, #0
 8007118:	4630      	mov	r0, r6
 800711a:	4639      	mov	r1, r7
 800711c:	f7f9 fcde 	bl	8000adc <__aeabi_dcmplt>
 8007120:	2800      	cmp	r0, #0
 8007122:	f000 8081 	beq.w	8007228 <_dtoa_r+0x4f8>
 8007126:	9b01      	ldr	r3, [sp, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d07d      	beq.n	8007228 <_dtoa_r+0x4f8>
 800712c:	f1b9 0f00 	cmp.w	r9, #0
 8007130:	dd3c      	ble.n	80071ac <_dtoa_r+0x47c>
 8007132:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007136:	9307      	str	r3, [sp, #28]
 8007138:	2200      	movs	r2, #0
 800713a:	4b91      	ldr	r3, [pc, #580]	; (8007380 <_dtoa_r+0x650>)
 800713c:	4630      	mov	r0, r6
 800713e:	4639      	mov	r1, r7
 8007140:	f7f9 fa5a 	bl	80005f8 <__aeabi_dmul>
 8007144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007148:	3501      	adds	r5, #1
 800714a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800714e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007152:	4628      	mov	r0, r5
 8007154:	f7f9 f9e6 	bl	8000524 <__aeabi_i2d>
 8007158:	4632      	mov	r2, r6
 800715a:	463b      	mov	r3, r7
 800715c:	f7f9 fa4c 	bl	80005f8 <__aeabi_dmul>
 8007160:	4b88      	ldr	r3, [pc, #544]	; (8007384 <_dtoa_r+0x654>)
 8007162:	2200      	movs	r2, #0
 8007164:	f7f9 f892 	bl	800028c <__adddf3>
 8007168:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800716c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007170:	9303      	str	r3, [sp, #12]
 8007172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007174:	2b00      	cmp	r3, #0
 8007176:	d15c      	bne.n	8007232 <_dtoa_r+0x502>
 8007178:	4b83      	ldr	r3, [pc, #524]	; (8007388 <_dtoa_r+0x658>)
 800717a:	2200      	movs	r2, #0
 800717c:	4630      	mov	r0, r6
 800717e:	4639      	mov	r1, r7
 8007180:	f7f9 f882 	bl	8000288 <__aeabi_dsub>
 8007184:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007188:	4606      	mov	r6, r0
 800718a:	460f      	mov	r7, r1
 800718c:	f7f9 fcc4 	bl	8000b18 <__aeabi_dcmpgt>
 8007190:	2800      	cmp	r0, #0
 8007192:	f040 8296 	bne.w	80076c2 <_dtoa_r+0x992>
 8007196:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800719a:	4630      	mov	r0, r6
 800719c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071a0:	4639      	mov	r1, r7
 80071a2:	f7f9 fc9b 	bl	8000adc <__aeabi_dcmplt>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	f040 8288 	bne.w	80076bc <_dtoa_r+0x98c>
 80071ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80071b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f2c0 8158 	blt.w	800746c <_dtoa_r+0x73c>
 80071bc:	f1ba 0f0e 	cmp.w	sl, #14
 80071c0:	f300 8154 	bgt.w	800746c <_dtoa_r+0x73c>
 80071c4:	4b6b      	ldr	r3, [pc, #428]	; (8007374 <_dtoa_r+0x644>)
 80071c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80071ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f280 80e3 	bge.w	800739c <_dtoa_r+0x66c>
 80071d6:	9b01      	ldr	r3, [sp, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f300 80df 	bgt.w	800739c <_dtoa_r+0x66c>
 80071de:	f040 826d 	bne.w	80076bc <_dtoa_r+0x98c>
 80071e2:	4b69      	ldr	r3, [pc, #420]	; (8007388 <_dtoa_r+0x658>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	4640      	mov	r0, r8
 80071e8:	4649      	mov	r1, r9
 80071ea:	f7f9 fa05 	bl	80005f8 <__aeabi_dmul>
 80071ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071f2:	f7f9 fc87 	bl	8000b04 <__aeabi_dcmpge>
 80071f6:	9e01      	ldr	r6, [sp, #4]
 80071f8:	4637      	mov	r7, r6
 80071fa:	2800      	cmp	r0, #0
 80071fc:	f040 8243 	bne.w	8007686 <_dtoa_r+0x956>
 8007200:	9d00      	ldr	r5, [sp, #0]
 8007202:	2331      	movs	r3, #49	; 0x31
 8007204:	f805 3b01 	strb.w	r3, [r5], #1
 8007208:	f10a 0a01 	add.w	sl, sl, #1
 800720c:	e23f      	b.n	800768e <_dtoa_r+0x95e>
 800720e:	07f2      	lsls	r2, r6, #31
 8007210:	d505      	bpl.n	800721e <_dtoa_r+0x4ee>
 8007212:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007216:	f7f9 f9ef 	bl	80005f8 <__aeabi_dmul>
 800721a:	3501      	adds	r5, #1
 800721c:	2301      	movs	r3, #1
 800721e:	1076      	asrs	r6, r6, #1
 8007220:	3708      	adds	r7, #8
 8007222:	e76c      	b.n	80070fe <_dtoa_r+0x3ce>
 8007224:	2502      	movs	r5, #2
 8007226:	e76f      	b.n	8007108 <_dtoa_r+0x3d8>
 8007228:	9b01      	ldr	r3, [sp, #4]
 800722a:	f8cd a01c 	str.w	sl, [sp, #28]
 800722e:	930c      	str	r3, [sp, #48]	; 0x30
 8007230:	e78d      	b.n	800714e <_dtoa_r+0x41e>
 8007232:	9900      	ldr	r1, [sp, #0]
 8007234:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007236:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007238:	4b4e      	ldr	r3, [pc, #312]	; (8007374 <_dtoa_r+0x644>)
 800723a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800723e:	4401      	add	r1, r0
 8007240:	9102      	str	r1, [sp, #8]
 8007242:	9908      	ldr	r1, [sp, #32]
 8007244:	eeb0 8a47 	vmov.f32	s16, s14
 8007248:	eef0 8a67 	vmov.f32	s17, s15
 800724c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007250:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007254:	2900      	cmp	r1, #0
 8007256:	d045      	beq.n	80072e4 <_dtoa_r+0x5b4>
 8007258:	494c      	ldr	r1, [pc, #304]	; (800738c <_dtoa_r+0x65c>)
 800725a:	2000      	movs	r0, #0
 800725c:	f7f9 faf6 	bl	800084c <__aeabi_ddiv>
 8007260:	ec53 2b18 	vmov	r2, r3, d8
 8007264:	f7f9 f810 	bl	8000288 <__aeabi_dsub>
 8007268:	9d00      	ldr	r5, [sp, #0]
 800726a:	ec41 0b18 	vmov	d8, r0, r1
 800726e:	4639      	mov	r1, r7
 8007270:	4630      	mov	r0, r6
 8007272:	f7f9 fc71 	bl	8000b58 <__aeabi_d2iz>
 8007276:	900c      	str	r0, [sp, #48]	; 0x30
 8007278:	f7f9 f954 	bl	8000524 <__aeabi_i2d>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4630      	mov	r0, r6
 8007282:	4639      	mov	r1, r7
 8007284:	f7f9 f800 	bl	8000288 <__aeabi_dsub>
 8007288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800728a:	3330      	adds	r3, #48	; 0x30
 800728c:	f805 3b01 	strb.w	r3, [r5], #1
 8007290:	ec53 2b18 	vmov	r2, r3, d8
 8007294:	4606      	mov	r6, r0
 8007296:	460f      	mov	r7, r1
 8007298:	f7f9 fc20 	bl	8000adc <__aeabi_dcmplt>
 800729c:	2800      	cmp	r0, #0
 800729e:	d165      	bne.n	800736c <_dtoa_r+0x63c>
 80072a0:	4632      	mov	r2, r6
 80072a2:	463b      	mov	r3, r7
 80072a4:	4935      	ldr	r1, [pc, #212]	; (800737c <_dtoa_r+0x64c>)
 80072a6:	2000      	movs	r0, #0
 80072a8:	f7f8 ffee 	bl	8000288 <__aeabi_dsub>
 80072ac:	ec53 2b18 	vmov	r2, r3, d8
 80072b0:	f7f9 fc14 	bl	8000adc <__aeabi_dcmplt>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	f040 80b9 	bne.w	800742c <_dtoa_r+0x6fc>
 80072ba:	9b02      	ldr	r3, [sp, #8]
 80072bc:	429d      	cmp	r5, r3
 80072be:	f43f af75 	beq.w	80071ac <_dtoa_r+0x47c>
 80072c2:	4b2f      	ldr	r3, [pc, #188]	; (8007380 <_dtoa_r+0x650>)
 80072c4:	ec51 0b18 	vmov	r0, r1, d8
 80072c8:	2200      	movs	r2, #0
 80072ca:	f7f9 f995 	bl	80005f8 <__aeabi_dmul>
 80072ce:	4b2c      	ldr	r3, [pc, #176]	; (8007380 <_dtoa_r+0x650>)
 80072d0:	ec41 0b18 	vmov	d8, r0, r1
 80072d4:	2200      	movs	r2, #0
 80072d6:	4630      	mov	r0, r6
 80072d8:	4639      	mov	r1, r7
 80072da:	f7f9 f98d 	bl	80005f8 <__aeabi_dmul>
 80072de:	4606      	mov	r6, r0
 80072e0:	460f      	mov	r7, r1
 80072e2:	e7c4      	b.n	800726e <_dtoa_r+0x53e>
 80072e4:	ec51 0b17 	vmov	r0, r1, d7
 80072e8:	f7f9 f986 	bl	80005f8 <__aeabi_dmul>
 80072ec:	9b02      	ldr	r3, [sp, #8]
 80072ee:	9d00      	ldr	r5, [sp, #0]
 80072f0:	930c      	str	r3, [sp, #48]	; 0x30
 80072f2:	ec41 0b18 	vmov	d8, r0, r1
 80072f6:	4639      	mov	r1, r7
 80072f8:	4630      	mov	r0, r6
 80072fa:	f7f9 fc2d 	bl	8000b58 <__aeabi_d2iz>
 80072fe:	9011      	str	r0, [sp, #68]	; 0x44
 8007300:	f7f9 f910 	bl	8000524 <__aeabi_i2d>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	4630      	mov	r0, r6
 800730a:	4639      	mov	r1, r7
 800730c:	f7f8 ffbc 	bl	8000288 <__aeabi_dsub>
 8007310:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007312:	3330      	adds	r3, #48	; 0x30
 8007314:	f805 3b01 	strb.w	r3, [r5], #1
 8007318:	9b02      	ldr	r3, [sp, #8]
 800731a:	429d      	cmp	r5, r3
 800731c:	4606      	mov	r6, r0
 800731e:	460f      	mov	r7, r1
 8007320:	f04f 0200 	mov.w	r2, #0
 8007324:	d134      	bne.n	8007390 <_dtoa_r+0x660>
 8007326:	4b19      	ldr	r3, [pc, #100]	; (800738c <_dtoa_r+0x65c>)
 8007328:	ec51 0b18 	vmov	r0, r1, d8
 800732c:	f7f8 ffae 	bl	800028c <__adddf3>
 8007330:	4602      	mov	r2, r0
 8007332:	460b      	mov	r3, r1
 8007334:	4630      	mov	r0, r6
 8007336:	4639      	mov	r1, r7
 8007338:	f7f9 fbee 	bl	8000b18 <__aeabi_dcmpgt>
 800733c:	2800      	cmp	r0, #0
 800733e:	d175      	bne.n	800742c <_dtoa_r+0x6fc>
 8007340:	ec53 2b18 	vmov	r2, r3, d8
 8007344:	4911      	ldr	r1, [pc, #68]	; (800738c <_dtoa_r+0x65c>)
 8007346:	2000      	movs	r0, #0
 8007348:	f7f8 ff9e 	bl	8000288 <__aeabi_dsub>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4630      	mov	r0, r6
 8007352:	4639      	mov	r1, r7
 8007354:	f7f9 fbc2 	bl	8000adc <__aeabi_dcmplt>
 8007358:	2800      	cmp	r0, #0
 800735a:	f43f af27 	beq.w	80071ac <_dtoa_r+0x47c>
 800735e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007360:	1e6b      	subs	r3, r5, #1
 8007362:	930c      	str	r3, [sp, #48]	; 0x30
 8007364:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007368:	2b30      	cmp	r3, #48	; 0x30
 800736a:	d0f8      	beq.n	800735e <_dtoa_r+0x62e>
 800736c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007370:	e04a      	b.n	8007408 <_dtoa_r+0x6d8>
 8007372:	bf00      	nop
 8007374:	080092d0 	.word	0x080092d0
 8007378:	080092a8 	.word	0x080092a8
 800737c:	3ff00000 	.word	0x3ff00000
 8007380:	40240000 	.word	0x40240000
 8007384:	401c0000 	.word	0x401c0000
 8007388:	40140000 	.word	0x40140000
 800738c:	3fe00000 	.word	0x3fe00000
 8007390:	4baf      	ldr	r3, [pc, #700]	; (8007650 <_dtoa_r+0x920>)
 8007392:	f7f9 f931 	bl	80005f8 <__aeabi_dmul>
 8007396:	4606      	mov	r6, r0
 8007398:	460f      	mov	r7, r1
 800739a:	e7ac      	b.n	80072f6 <_dtoa_r+0x5c6>
 800739c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80073a0:	9d00      	ldr	r5, [sp, #0]
 80073a2:	4642      	mov	r2, r8
 80073a4:	464b      	mov	r3, r9
 80073a6:	4630      	mov	r0, r6
 80073a8:	4639      	mov	r1, r7
 80073aa:	f7f9 fa4f 	bl	800084c <__aeabi_ddiv>
 80073ae:	f7f9 fbd3 	bl	8000b58 <__aeabi_d2iz>
 80073b2:	9002      	str	r0, [sp, #8]
 80073b4:	f7f9 f8b6 	bl	8000524 <__aeabi_i2d>
 80073b8:	4642      	mov	r2, r8
 80073ba:	464b      	mov	r3, r9
 80073bc:	f7f9 f91c 	bl	80005f8 <__aeabi_dmul>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4630      	mov	r0, r6
 80073c6:	4639      	mov	r1, r7
 80073c8:	f7f8 ff5e 	bl	8000288 <__aeabi_dsub>
 80073cc:	9e02      	ldr	r6, [sp, #8]
 80073ce:	9f01      	ldr	r7, [sp, #4]
 80073d0:	3630      	adds	r6, #48	; 0x30
 80073d2:	f805 6b01 	strb.w	r6, [r5], #1
 80073d6:	9e00      	ldr	r6, [sp, #0]
 80073d8:	1bae      	subs	r6, r5, r6
 80073da:	42b7      	cmp	r7, r6
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	d137      	bne.n	8007452 <_dtoa_r+0x722>
 80073e2:	f7f8 ff53 	bl	800028c <__adddf3>
 80073e6:	4642      	mov	r2, r8
 80073e8:	464b      	mov	r3, r9
 80073ea:	4606      	mov	r6, r0
 80073ec:	460f      	mov	r7, r1
 80073ee:	f7f9 fb93 	bl	8000b18 <__aeabi_dcmpgt>
 80073f2:	b9c8      	cbnz	r0, 8007428 <_dtoa_r+0x6f8>
 80073f4:	4642      	mov	r2, r8
 80073f6:	464b      	mov	r3, r9
 80073f8:	4630      	mov	r0, r6
 80073fa:	4639      	mov	r1, r7
 80073fc:	f7f9 fb64 	bl	8000ac8 <__aeabi_dcmpeq>
 8007400:	b110      	cbz	r0, 8007408 <_dtoa_r+0x6d8>
 8007402:	9b02      	ldr	r3, [sp, #8]
 8007404:	07d9      	lsls	r1, r3, #31
 8007406:	d40f      	bmi.n	8007428 <_dtoa_r+0x6f8>
 8007408:	4620      	mov	r0, r4
 800740a:	4659      	mov	r1, fp
 800740c:	f000 fae8 	bl	80079e0 <_Bfree>
 8007410:	2300      	movs	r3, #0
 8007412:	702b      	strb	r3, [r5, #0]
 8007414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007416:	f10a 0001 	add.w	r0, sl, #1
 800741a:	6018      	str	r0, [r3, #0]
 800741c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800741e:	2b00      	cmp	r3, #0
 8007420:	f43f acd8 	beq.w	8006dd4 <_dtoa_r+0xa4>
 8007424:	601d      	str	r5, [r3, #0]
 8007426:	e4d5      	b.n	8006dd4 <_dtoa_r+0xa4>
 8007428:	f8cd a01c 	str.w	sl, [sp, #28]
 800742c:	462b      	mov	r3, r5
 800742e:	461d      	mov	r5, r3
 8007430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007434:	2a39      	cmp	r2, #57	; 0x39
 8007436:	d108      	bne.n	800744a <_dtoa_r+0x71a>
 8007438:	9a00      	ldr	r2, [sp, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d1f7      	bne.n	800742e <_dtoa_r+0x6fe>
 800743e:	9a07      	ldr	r2, [sp, #28]
 8007440:	9900      	ldr	r1, [sp, #0]
 8007442:	3201      	adds	r2, #1
 8007444:	9207      	str	r2, [sp, #28]
 8007446:	2230      	movs	r2, #48	; 0x30
 8007448:	700a      	strb	r2, [r1, #0]
 800744a:	781a      	ldrb	r2, [r3, #0]
 800744c:	3201      	adds	r2, #1
 800744e:	701a      	strb	r2, [r3, #0]
 8007450:	e78c      	b.n	800736c <_dtoa_r+0x63c>
 8007452:	4b7f      	ldr	r3, [pc, #508]	; (8007650 <_dtoa_r+0x920>)
 8007454:	2200      	movs	r2, #0
 8007456:	f7f9 f8cf 	bl	80005f8 <__aeabi_dmul>
 800745a:	2200      	movs	r2, #0
 800745c:	2300      	movs	r3, #0
 800745e:	4606      	mov	r6, r0
 8007460:	460f      	mov	r7, r1
 8007462:	f7f9 fb31 	bl	8000ac8 <__aeabi_dcmpeq>
 8007466:	2800      	cmp	r0, #0
 8007468:	d09b      	beq.n	80073a2 <_dtoa_r+0x672>
 800746a:	e7cd      	b.n	8007408 <_dtoa_r+0x6d8>
 800746c:	9a08      	ldr	r2, [sp, #32]
 800746e:	2a00      	cmp	r2, #0
 8007470:	f000 80c4 	beq.w	80075fc <_dtoa_r+0x8cc>
 8007474:	9a05      	ldr	r2, [sp, #20]
 8007476:	2a01      	cmp	r2, #1
 8007478:	f300 80a8 	bgt.w	80075cc <_dtoa_r+0x89c>
 800747c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800747e:	2a00      	cmp	r2, #0
 8007480:	f000 80a0 	beq.w	80075c4 <_dtoa_r+0x894>
 8007484:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007488:	9e06      	ldr	r6, [sp, #24]
 800748a:	4645      	mov	r5, r8
 800748c:	9a04      	ldr	r2, [sp, #16]
 800748e:	2101      	movs	r1, #1
 8007490:	441a      	add	r2, r3
 8007492:	4620      	mov	r0, r4
 8007494:	4498      	add	r8, r3
 8007496:	9204      	str	r2, [sp, #16]
 8007498:	f000 fb5e 	bl	8007b58 <__i2b>
 800749c:	4607      	mov	r7, r0
 800749e:	2d00      	cmp	r5, #0
 80074a0:	dd0b      	ble.n	80074ba <_dtoa_r+0x78a>
 80074a2:	9b04      	ldr	r3, [sp, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	dd08      	ble.n	80074ba <_dtoa_r+0x78a>
 80074a8:	42ab      	cmp	r3, r5
 80074aa:	9a04      	ldr	r2, [sp, #16]
 80074ac:	bfa8      	it	ge
 80074ae:	462b      	movge	r3, r5
 80074b0:	eba8 0803 	sub.w	r8, r8, r3
 80074b4:	1aed      	subs	r5, r5, r3
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	9304      	str	r3, [sp, #16]
 80074ba:	9b06      	ldr	r3, [sp, #24]
 80074bc:	b1fb      	cbz	r3, 80074fe <_dtoa_r+0x7ce>
 80074be:	9b08      	ldr	r3, [sp, #32]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 809f 	beq.w	8007604 <_dtoa_r+0x8d4>
 80074c6:	2e00      	cmp	r6, #0
 80074c8:	dd11      	ble.n	80074ee <_dtoa_r+0x7be>
 80074ca:	4639      	mov	r1, r7
 80074cc:	4632      	mov	r2, r6
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 fbfe 	bl	8007cd0 <__pow5mult>
 80074d4:	465a      	mov	r2, fp
 80074d6:	4601      	mov	r1, r0
 80074d8:	4607      	mov	r7, r0
 80074da:	4620      	mov	r0, r4
 80074dc:	f000 fb52 	bl	8007b84 <__multiply>
 80074e0:	4659      	mov	r1, fp
 80074e2:	9007      	str	r0, [sp, #28]
 80074e4:	4620      	mov	r0, r4
 80074e6:	f000 fa7b 	bl	80079e0 <_Bfree>
 80074ea:	9b07      	ldr	r3, [sp, #28]
 80074ec:	469b      	mov	fp, r3
 80074ee:	9b06      	ldr	r3, [sp, #24]
 80074f0:	1b9a      	subs	r2, r3, r6
 80074f2:	d004      	beq.n	80074fe <_dtoa_r+0x7ce>
 80074f4:	4659      	mov	r1, fp
 80074f6:	4620      	mov	r0, r4
 80074f8:	f000 fbea 	bl	8007cd0 <__pow5mult>
 80074fc:	4683      	mov	fp, r0
 80074fe:	2101      	movs	r1, #1
 8007500:	4620      	mov	r0, r4
 8007502:	f000 fb29 	bl	8007b58 <__i2b>
 8007506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007508:	2b00      	cmp	r3, #0
 800750a:	4606      	mov	r6, r0
 800750c:	dd7c      	ble.n	8007608 <_dtoa_r+0x8d8>
 800750e:	461a      	mov	r2, r3
 8007510:	4601      	mov	r1, r0
 8007512:	4620      	mov	r0, r4
 8007514:	f000 fbdc 	bl	8007cd0 <__pow5mult>
 8007518:	9b05      	ldr	r3, [sp, #20]
 800751a:	2b01      	cmp	r3, #1
 800751c:	4606      	mov	r6, r0
 800751e:	dd76      	ble.n	800760e <_dtoa_r+0x8de>
 8007520:	2300      	movs	r3, #0
 8007522:	9306      	str	r3, [sp, #24]
 8007524:	6933      	ldr	r3, [r6, #16]
 8007526:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800752a:	6918      	ldr	r0, [r3, #16]
 800752c:	f000 fac4 	bl	8007ab8 <__hi0bits>
 8007530:	f1c0 0020 	rsb	r0, r0, #32
 8007534:	9b04      	ldr	r3, [sp, #16]
 8007536:	4418      	add	r0, r3
 8007538:	f010 001f 	ands.w	r0, r0, #31
 800753c:	f000 8086 	beq.w	800764c <_dtoa_r+0x91c>
 8007540:	f1c0 0320 	rsb	r3, r0, #32
 8007544:	2b04      	cmp	r3, #4
 8007546:	dd7f      	ble.n	8007648 <_dtoa_r+0x918>
 8007548:	f1c0 001c 	rsb	r0, r0, #28
 800754c:	9b04      	ldr	r3, [sp, #16]
 800754e:	4403      	add	r3, r0
 8007550:	4480      	add	r8, r0
 8007552:	4405      	add	r5, r0
 8007554:	9304      	str	r3, [sp, #16]
 8007556:	f1b8 0f00 	cmp.w	r8, #0
 800755a:	dd05      	ble.n	8007568 <_dtoa_r+0x838>
 800755c:	4659      	mov	r1, fp
 800755e:	4642      	mov	r2, r8
 8007560:	4620      	mov	r0, r4
 8007562:	f000 fc0f 	bl	8007d84 <__lshift>
 8007566:	4683      	mov	fp, r0
 8007568:	9b04      	ldr	r3, [sp, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	dd05      	ble.n	800757a <_dtoa_r+0x84a>
 800756e:	4631      	mov	r1, r6
 8007570:	461a      	mov	r2, r3
 8007572:	4620      	mov	r0, r4
 8007574:	f000 fc06 	bl	8007d84 <__lshift>
 8007578:	4606      	mov	r6, r0
 800757a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800757c:	2b00      	cmp	r3, #0
 800757e:	d069      	beq.n	8007654 <_dtoa_r+0x924>
 8007580:	4631      	mov	r1, r6
 8007582:	4658      	mov	r0, fp
 8007584:	f000 fc6a 	bl	8007e5c <__mcmp>
 8007588:	2800      	cmp	r0, #0
 800758a:	da63      	bge.n	8007654 <_dtoa_r+0x924>
 800758c:	2300      	movs	r3, #0
 800758e:	4659      	mov	r1, fp
 8007590:	220a      	movs	r2, #10
 8007592:	4620      	mov	r0, r4
 8007594:	f000 fa46 	bl	8007a24 <__multadd>
 8007598:	9b08      	ldr	r3, [sp, #32]
 800759a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800759e:	4683      	mov	fp, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 818f 	beq.w	80078c4 <_dtoa_r+0xb94>
 80075a6:	4639      	mov	r1, r7
 80075a8:	2300      	movs	r3, #0
 80075aa:	220a      	movs	r2, #10
 80075ac:	4620      	mov	r0, r4
 80075ae:	f000 fa39 	bl	8007a24 <__multadd>
 80075b2:	f1b9 0f00 	cmp.w	r9, #0
 80075b6:	4607      	mov	r7, r0
 80075b8:	f300 808e 	bgt.w	80076d8 <_dtoa_r+0x9a8>
 80075bc:	9b05      	ldr	r3, [sp, #20]
 80075be:	2b02      	cmp	r3, #2
 80075c0:	dc50      	bgt.n	8007664 <_dtoa_r+0x934>
 80075c2:	e089      	b.n	80076d8 <_dtoa_r+0x9a8>
 80075c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80075ca:	e75d      	b.n	8007488 <_dtoa_r+0x758>
 80075cc:	9b01      	ldr	r3, [sp, #4]
 80075ce:	1e5e      	subs	r6, r3, #1
 80075d0:	9b06      	ldr	r3, [sp, #24]
 80075d2:	42b3      	cmp	r3, r6
 80075d4:	bfbf      	itttt	lt
 80075d6:	9b06      	ldrlt	r3, [sp, #24]
 80075d8:	9606      	strlt	r6, [sp, #24]
 80075da:	1af2      	sublt	r2, r6, r3
 80075dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80075de:	bfb6      	itet	lt
 80075e0:	189b      	addlt	r3, r3, r2
 80075e2:	1b9e      	subge	r6, r3, r6
 80075e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80075e6:	9b01      	ldr	r3, [sp, #4]
 80075e8:	bfb8      	it	lt
 80075ea:	2600      	movlt	r6, #0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	bfb5      	itete	lt
 80075f0:	eba8 0503 	sublt.w	r5, r8, r3
 80075f4:	9b01      	ldrge	r3, [sp, #4]
 80075f6:	2300      	movlt	r3, #0
 80075f8:	4645      	movge	r5, r8
 80075fa:	e747      	b.n	800748c <_dtoa_r+0x75c>
 80075fc:	9e06      	ldr	r6, [sp, #24]
 80075fe:	9f08      	ldr	r7, [sp, #32]
 8007600:	4645      	mov	r5, r8
 8007602:	e74c      	b.n	800749e <_dtoa_r+0x76e>
 8007604:	9a06      	ldr	r2, [sp, #24]
 8007606:	e775      	b.n	80074f4 <_dtoa_r+0x7c4>
 8007608:	9b05      	ldr	r3, [sp, #20]
 800760a:	2b01      	cmp	r3, #1
 800760c:	dc18      	bgt.n	8007640 <_dtoa_r+0x910>
 800760e:	9b02      	ldr	r3, [sp, #8]
 8007610:	b9b3      	cbnz	r3, 8007640 <_dtoa_r+0x910>
 8007612:	9b03      	ldr	r3, [sp, #12]
 8007614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007618:	b9a3      	cbnz	r3, 8007644 <_dtoa_r+0x914>
 800761a:	9b03      	ldr	r3, [sp, #12]
 800761c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007620:	0d1b      	lsrs	r3, r3, #20
 8007622:	051b      	lsls	r3, r3, #20
 8007624:	b12b      	cbz	r3, 8007632 <_dtoa_r+0x902>
 8007626:	9b04      	ldr	r3, [sp, #16]
 8007628:	3301      	adds	r3, #1
 800762a:	9304      	str	r3, [sp, #16]
 800762c:	f108 0801 	add.w	r8, r8, #1
 8007630:	2301      	movs	r3, #1
 8007632:	9306      	str	r3, [sp, #24]
 8007634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007636:	2b00      	cmp	r3, #0
 8007638:	f47f af74 	bne.w	8007524 <_dtoa_r+0x7f4>
 800763c:	2001      	movs	r0, #1
 800763e:	e779      	b.n	8007534 <_dtoa_r+0x804>
 8007640:	2300      	movs	r3, #0
 8007642:	e7f6      	b.n	8007632 <_dtoa_r+0x902>
 8007644:	9b02      	ldr	r3, [sp, #8]
 8007646:	e7f4      	b.n	8007632 <_dtoa_r+0x902>
 8007648:	d085      	beq.n	8007556 <_dtoa_r+0x826>
 800764a:	4618      	mov	r0, r3
 800764c:	301c      	adds	r0, #28
 800764e:	e77d      	b.n	800754c <_dtoa_r+0x81c>
 8007650:	40240000 	.word	0x40240000
 8007654:	9b01      	ldr	r3, [sp, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	dc38      	bgt.n	80076cc <_dtoa_r+0x99c>
 800765a:	9b05      	ldr	r3, [sp, #20]
 800765c:	2b02      	cmp	r3, #2
 800765e:	dd35      	ble.n	80076cc <_dtoa_r+0x99c>
 8007660:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007664:	f1b9 0f00 	cmp.w	r9, #0
 8007668:	d10d      	bne.n	8007686 <_dtoa_r+0x956>
 800766a:	4631      	mov	r1, r6
 800766c:	464b      	mov	r3, r9
 800766e:	2205      	movs	r2, #5
 8007670:	4620      	mov	r0, r4
 8007672:	f000 f9d7 	bl	8007a24 <__multadd>
 8007676:	4601      	mov	r1, r0
 8007678:	4606      	mov	r6, r0
 800767a:	4658      	mov	r0, fp
 800767c:	f000 fbee 	bl	8007e5c <__mcmp>
 8007680:	2800      	cmp	r0, #0
 8007682:	f73f adbd 	bgt.w	8007200 <_dtoa_r+0x4d0>
 8007686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007688:	9d00      	ldr	r5, [sp, #0]
 800768a:	ea6f 0a03 	mvn.w	sl, r3
 800768e:	f04f 0800 	mov.w	r8, #0
 8007692:	4631      	mov	r1, r6
 8007694:	4620      	mov	r0, r4
 8007696:	f000 f9a3 	bl	80079e0 <_Bfree>
 800769a:	2f00      	cmp	r7, #0
 800769c:	f43f aeb4 	beq.w	8007408 <_dtoa_r+0x6d8>
 80076a0:	f1b8 0f00 	cmp.w	r8, #0
 80076a4:	d005      	beq.n	80076b2 <_dtoa_r+0x982>
 80076a6:	45b8      	cmp	r8, r7
 80076a8:	d003      	beq.n	80076b2 <_dtoa_r+0x982>
 80076aa:	4641      	mov	r1, r8
 80076ac:	4620      	mov	r0, r4
 80076ae:	f000 f997 	bl	80079e0 <_Bfree>
 80076b2:	4639      	mov	r1, r7
 80076b4:	4620      	mov	r0, r4
 80076b6:	f000 f993 	bl	80079e0 <_Bfree>
 80076ba:	e6a5      	b.n	8007408 <_dtoa_r+0x6d8>
 80076bc:	2600      	movs	r6, #0
 80076be:	4637      	mov	r7, r6
 80076c0:	e7e1      	b.n	8007686 <_dtoa_r+0x956>
 80076c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80076c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80076c8:	4637      	mov	r7, r6
 80076ca:	e599      	b.n	8007200 <_dtoa_r+0x4d0>
 80076cc:	9b08      	ldr	r3, [sp, #32]
 80076ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 80fd 	beq.w	80078d2 <_dtoa_r+0xba2>
 80076d8:	2d00      	cmp	r5, #0
 80076da:	dd05      	ble.n	80076e8 <_dtoa_r+0x9b8>
 80076dc:	4639      	mov	r1, r7
 80076de:	462a      	mov	r2, r5
 80076e0:	4620      	mov	r0, r4
 80076e2:	f000 fb4f 	bl	8007d84 <__lshift>
 80076e6:	4607      	mov	r7, r0
 80076e8:	9b06      	ldr	r3, [sp, #24]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d05c      	beq.n	80077a8 <_dtoa_r+0xa78>
 80076ee:	6879      	ldr	r1, [r7, #4]
 80076f0:	4620      	mov	r0, r4
 80076f2:	f000 f935 	bl	8007960 <_Balloc>
 80076f6:	4605      	mov	r5, r0
 80076f8:	b928      	cbnz	r0, 8007706 <_dtoa_r+0x9d6>
 80076fa:	4b80      	ldr	r3, [pc, #512]	; (80078fc <_dtoa_r+0xbcc>)
 80076fc:	4602      	mov	r2, r0
 80076fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007702:	f7ff bb2e 	b.w	8006d62 <_dtoa_r+0x32>
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	3202      	adds	r2, #2
 800770a:	0092      	lsls	r2, r2, #2
 800770c:	f107 010c 	add.w	r1, r7, #12
 8007710:	300c      	adds	r0, #12
 8007712:	f000 f917 	bl	8007944 <memcpy>
 8007716:	2201      	movs	r2, #1
 8007718:	4629      	mov	r1, r5
 800771a:	4620      	mov	r0, r4
 800771c:	f000 fb32 	bl	8007d84 <__lshift>
 8007720:	9b00      	ldr	r3, [sp, #0]
 8007722:	3301      	adds	r3, #1
 8007724:	9301      	str	r3, [sp, #4]
 8007726:	9b00      	ldr	r3, [sp, #0]
 8007728:	444b      	add	r3, r9
 800772a:	9307      	str	r3, [sp, #28]
 800772c:	9b02      	ldr	r3, [sp, #8]
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	46b8      	mov	r8, r7
 8007734:	9306      	str	r3, [sp, #24]
 8007736:	4607      	mov	r7, r0
 8007738:	9b01      	ldr	r3, [sp, #4]
 800773a:	4631      	mov	r1, r6
 800773c:	3b01      	subs	r3, #1
 800773e:	4658      	mov	r0, fp
 8007740:	9302      	str	r3, [sp, #8]
 8007742:	f7ff fa67 	bl	8006c14 <quorem>
 8007746:	4603      	mov	r3, r0
 8007748:	3330      	adds	r3, #48	; 0x30
 800774a:	9004      	str	r0, [sp, #16]
 800774c:	4641      	mov	r1, r8
 800774e:	4658      	mov	r0, fp
 8007750:	9308      	str	r3, [sp, #32]
 8007752:	f000 fb83 	bl	8007e5c <__mcmp>
 8007756:	463a      	mov	r2, r7
 8007758:	4681      	mov	r9, r0
 800775a:	4631      	mov	r1, r6
 800775c:	4620      	mov	r0, r4
 800775e:	f000 fb99 	bl	8007e94 <__mdiff>
 8007762:	68c2      	ldr	r2, [r0, #12]
 8007764:	9b08      	ldr	r3, [sp, #32]
 8007766:	4605      	mov	r5, r0
 8007768:	bb02      	cbnz	r2, 80077ac <_dtoa_r+0xa7c>
 800776a:	4601      	mov	r1, r0
 800776c:	4658      	mov	r0, fp
 800776e:	f000 fb75 	bl	8007e5c <__mcmp>
 8007772:	9b08      	ldr	r3, [sp, #32]
 8007774:	4602      	mov	r2, r0
 8007776:	4629      	mov	r1, r5
 8007778:	4620      	mov	r0, r4
 800777a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800777e:	f000 f92f 	bl	80079e0 <_Bfree>
 8007782:	9b05      	ldr	r3, [sp, #20]
 8007784:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007786:	9d01      	ldr	r5, [sp, #4]
 8007788:	ea43 0102 	orr.w	r1, r3, r2
 800778c:	9b06      	ldr	r3, [sp, #24]
 800778e:	430b      	orrs	r3, r1
 8007790:	9b08      	ldr	r3, [sp, #32]
 8007792:	d10d      	bne.n	80077b0 <_dtoa_r+0xa80>
 8007794:	2b39      	cmp	r3, #57	; 0x39
 8007796:	d029      	beq.n	80077ec <_dtoa_r+0xabc>
 8007798:	f1b9 0f00 	cmp.w	r9, #0
 800779c:	dd01      	ble.n	80077a2 <_dtoa_r+0xa72>
 800779e:	9b04      	ldr	r3, [sp, #16]
 80077a0:	3331      	adds	r3, #49	; 0x31
 80077a2:	9a02      	ldr	r2, [sp, #8]
 80077a4:	7013      	strb	r3, [r2, #0]
 80077a6:	e774      	b.n	8007692 <_dtoa_r+0x962>
 80077a8:	4638      	mov	r0, r7
 80077aa:	e7b9      	b.n	8007720 <_dtoa_r+0x9f0>
 80077ac:	2201      	movs	r2, #1
 80077ae:	e7e2      	b.n	8007776 <_dtoa_r+0xa46>
 80077b0:	f1b9 0f00 	cmp.w	r9, #0
 80077b4:	db06      	blt.n	80077c4 <_dtoa_r+0xa94>
 80077b6:	9905      	ldr	r1, [sp, #20]
 80077b8:	ea41 0909 	orr.w	r9, r1, r9
 80077bc:	9906      	ldr	r1, [sp, #24]
 80077be:	ea59 0101 	orrs.w	r1, r9, r1
 80077c2:	d120      	bne.n	8007806 <_dtoa_r+0xad6>
 80077c4:	2a00      	cmp	r2, #0
 80077c6:	ddec      	ble.n	80077a2 <_dtoa_r+0xa72>
 80077c8:	4659      	mov	r1, fp
 80077ca:	2201      	movs	r2, #1
 80077cc:	4620      	mov	r0, r4
 80077ce:	9301      	str	r3, [sp, #4]
 80077d0:	f000 fad8 	bl	8007d84 <__lshift>
 80077d4:	4631      	mov	r1, r6
 80077d6:	4683      	mov	fp, r0
 80077d8:	f000 fb40 	bl	8007e5c <__mcmp>
 80077dc:	2800      	cmp	r0, #0
 80077de:	9b01      	ldr	r3, [sp, #4]
 80077e0:	dc02      	bgt.n	80077e8 <_dtoa_r+0xab8>
 80077e2:	d1de      	bne.n	80077a2 <_dtoa_r+0xa72>
 80077e4:	07da      	lsls	r2, r3, #31
 80077e6:	d5dc      	bpl.n	80077a2 <_dtoa_r+0xa72>
 80077e8:	2b39      	cmp	r3, #57	; 0x39
 80077ea:	d1d8      	bne.n	800779e <_dtoa_r+0xa6e>
 80077ec:	9a02      	ldr	r2, [sp, #8]
 80077ee:	2339      	movs	r3, #57	; 0x39
 80077f0:	7013      	strb	r3, [r2, #0]
 80077f2:	462b      	mov	r3, r5
 80077f4:	461d      	mov	r5, r3
 80077f6:	3b01      	subs	r3, #1
 80077f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80077fc:	2a39      	cmp	r2, #57	; 0x39
 80077fe:	d050      	beq.n	80078a2 <_dtoa_r+0xb72>
 8007800:	3201      	adds	r2, #1
 8007802:	701a      	strb	r2, [r3, #0]
 8007804:	e745      	b.n	8007692 <_dtoa_r+0x962>
 8007806:	2a00      	cmp	r2, #0
 8007808:	dd03      	ble.n	8007812 <_dtoa_r+0xae2>
 800780a:	2b39      	cmp	r3, #57	; 0x39
 800780c:	d0ee      	beq.n	80077ec <_dtoa_r+0xabc>
 800780e:	3301      	adds	r3, #1
 8007810:	e7c7      	b.n	80077a2 <_dtoa_r+0xa72>
 8007812:	9a01      	ldr	r2, [sp, #4]
 8007814:	9907      	ldr	r1, [sp, #28]
 8007816:	f802 3c01 	strb.w	r3, [r2, #-1]
 800781a:	428a      	cmp	r2, r1
 800781c:	d02a      	beq.n	8007874 <_dtoa_r+0xb44>
 800781e:	4659      	mov	r1, fp
 8007820:	2300      	movs	r3, #0
 8007822:	220a      	movs	r2, #10
 8007824:	4620      	mov	r0, r4
 8007826:	f000 f8fd 	bl	8007a24 <__multadd>
 800782a:	45b8      	cmp	r8, r7
 800782c:	4683      	mov	fp, r0
 800782e:	f04f 0300 	mov.w	r3, #0
 8007832:	f04f 020a 	mov.w	r2, #10
 8007836:	4641      	mov	r1, r8
 8007838:	4620      	mov	r0, r4
 800783a:	d107      	bne.n	800784c <_dtoa_r+0xb1c>
 800783c:	f000 f8f2 	bl	8007a24 <__multadd>
 8007840:	4680      	mov	r8, r0
 8007842:	4607      	mov	r7, r0
 8007844:	9b01      	ldr	r3, [sp, #4]
 8007846:	3301      	adds	r3, #1
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	e775      	b.n	8007738 <_dtoa_r+0xa08>
 800784c:	f000 f8ea 	bl	8007a24 <__multadd>
 8007850:	4639      	mov	r1, r7
 8007852:	4680      	mov	r8, r0
 8007854:	2300      	movs	r3, #0
 8007856:	220a      	movs	r2, #10
 8007858:	4620      	mov	r0, r4
 800785a:	f000 f8e3 	bl	8007a24 <__multadd>
 800785e:	4607      	mov	r7, r0
 8007860:	e7f0      	b.n	8007844 <_dtoa_r+0xb14>
 8007862:	f1b9 0f00 	cmp.w	r9, #0
 8007866:	9a00      	ldr	r2, [sp, #0]
 8007868:	bfcc      	ite	gt
 800786a:	464d      	movgt	r5, r9
 800786c:	2501      	movle	r5, #1
 800786e:	4415      	add	r5, r2
 8007870:	f04f 0800 	mov.w	r8, #0
 8007874:	4659      	mov	r1, fp
 8007876:	2201      	movs	r2, #1
 8007878:	4620      	mov	r0, r4
 800787a:	9301      	str	r3, [sp, #4]
 800787c:	f000 fa82 	bl	8007d84 <__lshift>
 8007880:	4631      	mov	r1, r6
 8007882:	4683      	mov	fp, r0
 8007884:	f000 faea 	bl	8007e5c <__mcmp>
 8007888:	2800      	cmp	r0, #0
 800788a:	dcb2      	bgt.n	80077f2 <_dtoa_r+0xac2>
 800788c:	d102      	bne.n	8007894 <_dtoa_r+0xb64>
 800788e:	9b01      	ldr	r3, [sp, #4]
 8007890:	07db      	lsls	r3, r3, #31
 8007892:	d4ae      	bmi.n	80077f2 <_dtoa_r+0xac2>
 8007894:	462b      	mov	r3, r5
 8007896:	461d      	mov	r5, r3
 8007898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800789c:	2a30      	cmp	r2, #48	; 0x30
 800789e:	d0fa      	beq.n	8007896 <_dtoa_r+0xb66>
 80078a0:	e6f7      	b.n	8007692 <_dtoa_r+0x962>
 80078a2:	9a00      	ldr	r2, [sp, #0]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d1a5      	bne.n	80077f4 <_dtoa_r+0xac4>
 80078a8:	f10a 0a01 	add.w	sl, sl, #1
 80078ac:	2331      	movs	r3, #49	; 0x31
 80078ae:	e779      	b.n	80077a4 <_dtoa_r+0xa74>
 80078b0:	4b13      	ldr	r3, [pc, #76]	; (8007900 <_dtoa_r+0xbd0>)
 80078b2:	f7ff baaf 	b.w	8006e14 <_dtoa_r+0xe4>
 80078b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f47f aa86 	bne.w	8006dca <_dtoa_r+0x9a>
 80078be:	4b11      	ldr	r3, [pc, #68]	; (8007904 <_dtoa_r+0xbd4>)
 80078c0:	f7ff baa8 	b.w	8006e14 <_dtoa_r+0xe4>
 80078c4:	f1b9 0f00 	cmp.w	r9, #0
 80078c8:	dc03      	bgt.n	80078d2 <_dtoa_r+0xba2>
 80078ca:	9b05      	ldr	r3, [sp, #20]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	f73f aec9 	bgt.w	8007664 <_dtoa_r+0x934>
 80078d2:	9d00      	ldr	r5, [sp, #0]
 80078d4:	4631      	mov	r1, r6
 80078d6:	4658      	mov	r0, fp
 80078d8:	f7ff f99c 	bl	8006c14 <quorem>
 80078dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80078e0:	f805 3b01 	strb.w	r3, [r5], #1
 80078e4:	9a00      	ldr	r2, [sp, #0]
 80078e6:	1aaa      	subs	r2, r5, r2
 80078e8:	4591      	cmp	r9, r2
 80078ea:	ddba      	ble.n	8007862 <_dtoa_r+0xb32>
 80078ec:	4659      	mov	r1, fp
 80078ee:	2300      	movs	r3, #0
 80078f0:	220a      	movs	r2, #10
 80078f2:	4620      	mov	r0, r4
 80078f4:	f000 f896 	bl	8007a24 <__multadd>
 80078f8:	4683      	mov	fp, r0
 80078fa:	e7eb      	b.n	80078d4 <_dtoa_r+0xba4>
 80078fc:	08009234 	.word	0x08009234
 8007900:	08009050 	.word	0x08009050
 8007904:	080091b1 	.word	0x080091b1

08007908 <fiprintf>:
 8007908:	b40e      	push	{r1, r2, r3}
 800790a:	b503      	push	{r0, r1, lr}
 800790c:	4601      	mov	r1, r0
 800790e:	ab03      	add	r3, sp, #12
 8007910:	4805      	ldr	r0, [pc, #20]	; (8007928 <fiprintf+0x20>)
 8007912:	f853 2b04 	ldr.w	r2, [r3], #4
 8007916:	6800      	ldr	r0, [r0, #0]
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	f000 fddf 	bl	80084dc <_vfiprintf_r>
 800791e:	b002      	add	sp, #8
 8007920:	f85d eb04 	ldr.w	lr, [sp], #4
 8007924:	b003      	add	sp, #12
 8007926:	4770      	bx	lr
 8007928:	2000001c 	.word	0x2000001c

0800792c <_localeconv_r>:
 800792c:	4800      	ldr	r0, [pc, #0]	; (8007930 <_localeconv_r+0x4>)
 800792e:	4770      	bx	lr
 8007930:	20000170 	.word	0x20000170

08007934 <malloc>:
 8007934:	4b02      	ldr	r3, [pc, #8]	; (8007940 <malloc+0xc>)
 8007936:	4601      	mov	r1, r0
 8007938:	6818      	ldr	r0, [r3, #0]
 800793a:	f000 bbef 	b.w	800811c <_malloc_r>
 800793e:	bf00      	nop
 8007940:	2000001c 	.word	0x2000001c

08007944 <memcpy>:
 8007944:	440a      	add	r2, r1
 8007946:	4291      	cmp	r1, r2
 8007948:	f100 33ff 	add.w	r3, r0, #4294967295
 800794c:	d100      	bne.n	8007950 <memcpy+0xc>
 800794e:	4770      	bx	lr
 8007950:	b510      	push	{r4, lr}
 8007952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800795a:	4291      	cmp	r1, r2
 800795c:	d1f9      	bne.n	8007952 <memcpy+0xe>
 800795e:	bd10      	pop	{r4, pc}

08007960 <_Balloc>:
 8007960:	b570      	push	{r4, r5, r6, lr}
 8007962:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007964:	4604      	mov	r4, r0
 8007966:	460d      	mov	r5, r1
 8007968:	b976      	cbnz	r6, 8007988 <_Balloc+0x28>
 800796a:	2010      	movs	r0, #16
 800796c:	f7ff ffe2 	bl	8007934 <malloc>
 8007970:	4602      	mov	r2, r0
 8007972:	6260      	str	r0, [r4, #36]	; 0x24
 8007974:	b920      	cbnz	r0, 8007980 <_Balloc+0x20>
 8007976:	4b18      	ldr	r3, [pc, #96]	; (80079d8 <_Balloc+0x78>)
 8007978:	4818      	ldr	r0, [pc, #96]	; (80079dc <_Balloc+0x7c>)
 800797a:	2166      	movs	r1, #102	; 0x66
 800797c:	f7ff f92c 	bl	8006bd8 <__assert_func>
 8007980:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007984:	6006      	str	r6, [r0, #0]
 8007986:	60c6      	str	r6, [r0, #12]
 8007988:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800798a:	68f3      	ldr	r3, [r6, #12]
 800798c:	b183      	cbz	r3, 80079b0 <_Balloc+0x50>
 800798e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007996:	b9b8      	cbnz	r0, 80079c8 <_Balloc+0x68>
 8007998:	2101      	movs	r1, #1
 800799a:	fa01 f605 	lsl.w	r6, r1, r5
 800799e:	1d72      	adds	r2, r6, #5
 80079a0:	0092      	lsls	r2, r2, #2
 80079a2:	4620      	mov	r0, r4
 80079a4:	f000 fb5a 	bl	800805c <_calloc_r>
 80079a8:	b160      	cbz	r0, 80079c4 <_Balloc+0x64>
 80079aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079ae:	e00e      	b.n	80079ce <_Balloc+0x6e>
 80079b0:	2221      	movs	r2, #33	; 0x21
 80079b2:	2104      	movs	r1, #4
 80079b4:	4620      	mov	r0, r4
 80079b6:	f000 fb51 	bl	800805c <_calloc_r>
 80079ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079bc:	60f0      	str	r0, [r6, #12]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e4      	bne.n	800798e <_Balloc+0x2e>
 80079c4:	2000      	movs	r0, #0
 80079c6:	bd70      	pop	{r4, r5, r6, pc}
 80079c8:	6802      	ldr	r2, [r0, #0]
 80079ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079ce:	2300      	movs	r3, #0
 80079d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079d4:	e7f7      	b.n	80079c6 <_Balloc+0x66>
 80079d6:	bf00      	nop
 80079d8:	080091be 	.word	0x080091be
 80079dc:	08009245 	.word	0x08009245

080079e0 <_Bfree>:
 80079e0:	b570      	push	{r4, r5, r6, lr}
 80079e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079e4:	4605      	mov	r5, r0
 80079e6:	460c      	mov	r4, r1
 80079e8:	b976      	cbnz	r6, 8007a08 <_Bfree+0x28>
 80079ea:	2010      	movs	r0, #16
 80079ec:	f7ff ffa2 	bl	8007934 <malloc>
 80079f0:	4602      	mov	r2, r0
 80079f2:	6268      	str	r0, [r5, #36]	; 0x24
 80079f4:	b920      	cbnz	r0, 8007a00 <_Bfree+0x20>
 80079f6:	4b09      	ldr	r3, [pc, #36]	; (8007a1c <_Bfree+0x3c>)
 80079f8:	4809      	ldr	r0, [pc, #36]	; (8007a20 <_Bfree+0x40>)
 80079fa:	218a      	movs	r1, #138	; 0x8a
 80079fc:	f7ff f8ec 	bl	8006bd8 <__assert_func>
 8007a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a04:	6006      	str	r6, [r0, #0]
 8007a06:	60c6      	str	r6, [r0, #12]
 8007a08:	b13c      	cbz	r4, 8007a1a <_Bfree+0x3a>
 8007a0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a0c:	6862      	ldr	r2, [r4, #4]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a14:	6021      	str	r1, [r4, #0]
 8007a16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a1a:	bd70      	pop	{r4, r5, r6, pc}
 8007a1c:	080091be 	.word	0x080091be
 8007a20:	08009245 	.word	0x08009245

08007a24 <__multadd>:
 8007a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a28:	690e      	ldr	r6, [r1, #16]
 8007a2a:	4607      	mov	r7, r0
 8007a2c:	4698      	mov	r8, r3
 8007a2e:	460c      	mov	r4, r1
 8007a30:	f101 0014 	add.w	r0, r1, #20
 8007a34:	2300      	movs	r3, #0
 8007a36:	6805      	ldr	r5, [r0, #0]
 8007a38:	b2a9      	uxth	r1, r5
 8007a3a:	fb02 8101 	mla	r1, r2, r1, r8
 8007a3e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007a42:	0c2d      	lsrs	r5, r5, #16
 8007a44:	fb02 c505 	mla	r5, r2, r5, ip
 8007a48:	b289      	uxth	r1, r1
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007a50:	429e      	cmp	r6, r3
 8007a52:	f840 1b04 	str.w	r1, [r0], #4
 8007a56:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007a5a:	dcec      	bgt.n	8007a36 <__multadd+0x12>
 8007a5c:	f1b8 0f00 	cmp.w	r8, #0
 8007a60:	d022      	beq.n	8007aa8 <__multadd+0x84>
 8007a62:	68a3      	ldr	r3, [r4, #8]
 8007a64:	42b3      	cmp	r3, r6
 8007a66:	dc19      	bgt.n	8007a9c <__multadd+0x78>
 8007a68:	6861      	ldr	r1, [r4, #4]
 8007a6a:	4638      	mov	r0, r7
 8007a6c:	3101      	adds	r1, #1
 8007a6e:	f7ff ff77 	bl	8007960 <_Balloc>
 8007a72:	4605      	mov	r5, r0
 8007a74:	b928      	cbnz	r0, 8007a82 <__multadd+0x5e>
 8007a76:	4602      	mov	r2, r0
 8007a78:	4b0d      	ldr	r3, [pc, #52]	; (8007ab0 <__multadd+0x8c>)
 8007a7a:	480e      	ldr	r0, [pc, #56]	; (8007ab4 <__multadd+0x90>)
 8007a7c:	21b5      	movs	r1, #181	; 0xb5
 8007a7e:	f7ff f8ab 	bl	8006bd8 <__assert_func>
 8007a82:	6922      	ldr	r2, [r4, #16]
 8007a84:	3202      	adds	r2, #2
 8007a86:	f104 010c 	add.w	r1, r4, #12
 8007a8a:	0092      	lsls	r2, r2, #2
 8007a8c:	300c      	adds	r0, #12
 8007a8e:	f7ff ff59 	bl	8007944 <memcpy>
 8007a92:	4621      	mov	r1, r4
 8007a94:	4638      	mov	r0, r7
 8007a96:	f7ff ffa3 	bl	80079e0 <_Bfree>
 8007a9a:	462c      	mov	r4, r5
 8007a9c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007aa0:	3601      	adds	r6, #1
 8007aa2:	f8c3 8014 	str.w	r8, [r3, #20]
 8007aa6:	6126      	str	r6, [r4, #16]
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aae:	bf00      	nop
 8007ab0:	08009234 	.word	0x08009234
 8007ab4:	08009245 	.word	0x08009245

08007ab8 <__hi0bits>:
 8007ab8:	0c03      	lsrs	r3, r0, #16
 8007aba:	041b      	lsls	r3, r3, #16
 8007abc:	b9d3      	cbnz	r3, 8007af4 <__hi0bits+0x3c>
 8007abe:	0400      	lsls	r0, r0, #16
 8007ac0:	2310      	movs	r3, #16
 8007ac2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ac6:	bf04      	itt	eq
 8007ac8:	0200      	lsleq	r0, r0, #8
 8007aca:	3308      	addeq	r3, #8
 8007acc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ad0:	bf04      	itt	eq
 8007ad2:	0100      	lsleq	r0, r0, #4
 8007ad4:	3304      	addeq	r3, #4
 8007ad6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ada:	bf04      	itt	eq
 8007adc:	0080      	lsleq	r0, r0, #2
 8007ade:	3302      	addeq	r3, #2
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	db05      	blt.n	8007af0 <__hi0bits+0x38>
 8007ae4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ae8:	f103 0301 	add.w	r3, r3, #1
 8007aec:	bf08      	it	eq
 8007aee:	2320      	moveq	r3, #32
 8007af0:	4618      	mov	r0, r3
 8007af2:	4770      	bx	lr
 8007af4:	2300      	movs	r3, #0
 8007af6:	e7e4      	b.n	8007ac2 <__hi0bits+0xa>

08007af8 <__lo0bits>:
 8007af8:	6803      	ldr	r3, [r0, #0]
 8007afa:	f013 0207 	ands.w	r2, r3, #7
 8007afe:	4601      	mov	r1, r0
 8007b00:	d00b      	beq.n	8007b1a <__lo0bits+0x22>
 8007b02:	07da      	lsls	r2, r3, #31
 8007b04:	d424      	bmi.n	8007b50 <__lo0bits+0x58>
 8007b06:	0798      	lsls	r0, r3, #30
 8007b08:	bf49      	itett	mi
 8007b0a:	085b      	lsrmi	r3, r3, #1
 8007b0c:	089b      	lsrpl	r3, r3, #2
 8007b0e:	2001      	movmi	r0, #1
 8007b10:	600b      	strmi	r3, [r1, #0]
 8007b12:	bf5c      	itt	pl
 8007b14:	600b      	strpl	r3, [r1, #0]
 8007b16:	2002      	movpl	r0, #2
 8007b18:	4770      	bx	lr
 8007b1a:	b298      	uxth	r0, r3
 8007b1c:	b9b0      	cbnz	r0, 8007b4c <__lo0bits+0x54>
 8007b1e:	0c1b      	lsrs	r3, r3, #16
 8007b20:	2010      	movs	r0, #16
 8007b22:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b26:	bf04      	itt	eq
 8007b28:	0a1b      	lsreq	r3, r3, #8
 8007b2a:	3008      	addeq	r0, #8
 8007b2c:	071a      	lsls	r2, r3, #28
 8007b2e:	bf04      	itt	eq
 8007b30:	091b      	lsreq	r3, r3, #4
 8007b32:	3004      	addeq	r0, #4
 8007b34:	079a      	lsls	r2, r3, #30
 8007b36:	bf04      	itt	eq
 8007b38:	089b      	lsreq	r3, r3, #2
 8007b3a:	3002      	addeq	r0, #2
 8007b3c:	07da      	lsls	r2, r3, #31
 8007b3e:	d403      	bmi.n	8007b48 <__lo0bits+0x50>
 8007b40:	085b      	lsrs	r3, r3, #1
 8007b42:	f100 0001 	add.w	r0, r0, #1
 8007b46:	d005      	beq.n	8007b54 <__lo0bits+0x5c>
 8007b48:	600b      	str	r3, [r1, #0]
 8007b4a:	4770      	bx	lr
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	e7e8      	b.n	8007b22 <__lo0bits+0x2a>
 8007b50:	2000      	movs	r0, #0
 8007b52:	4770      	bx	lr
 8007b54:	2020      	movs	r0, #32
 8007b56:	4770      	bx	lr

08007b58 <__i2b>:
 8007b58:	b510      	push	{r4, lr}
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	f7ff feff 	bl	8007960 <_Balloc>
 8007b62:	4602      	mov	r2, r0
 8007b64:	b928      	cbnz	r0, 8007b72 <__i2b+0x1a>
 8007b66:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <__i2b+0x24>)
 8007b68:	4805      	ldr	r0, [pc, #20]	; (8007b80 <__i2b+0x28>)
 8007b6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007b6e:	f7ff f833 	bl	8006bd8 <__assert_func>
 8007b72:	2301      	movs	r3, #1
 8007b74:	6144      	str	r4, [r0, #20]
 8007b76:	6103      	str	r3, [r0, #16]
 8007b78:	bd10      	pop	{r4, pc}
 8007b7a:	bf00      	nop
 8007b7c:	08009234 	.word	0x08009234
 8007b80:	08009245 	.word	0x08009245

08007b84 <__multiply>:
 8007b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b88:	4614      	mov	r4, r2
 8007b8a:	690a      	ldr	r2, [r1, #16]
 8007b8c:	6923      	ldr	r3, [r4, #16]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	bfb8      	it	lt
 8007b92:	460b      	movlt	r3, r1
 8007b94:	460d      	mov	r5, r1
 8007b96:	bfbc      	itt	lt
 8007b98:	4625      	movlt	r5, r4
 8007b9a:	461c      	movlt	r4, r3
 8007b9c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007ba0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007ba4:	68ab      	ldr	r3, [r5, #8]
 8007ba6:	6869      	ldr	r1, [r5, #4]
 8007ba8:	eb0a 0709 	add.w	r7, sl, r9
 8007bac:	42bb      	cmp	r3, r7
 8007bae:	b085      	sub	sp, #20
 8007bb0:	bfb8      	it	lt
 8007bb2:	3101      	addlt	r1, #1
 8007bb4:	f7ff fed4 	bl	8007960 <_Balloc>
 8007bb8:	b930      	cbnz	r0, 8007bc8 <__multiply+0x44>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	4b42      	ldr	r3, [pc, #264]	; (8007cc8 <__multiply+0x144>)
 8007bbe:	4843      	ldr	r0, [pc, #268]	; (8007ccc <__multiply+0x148>)
 8007bc0:	f240 115d 	movw	r1, #349	; 0x15d
 8007bc4:	f7ff f808 	bl	8006bd8 <__assert_func>
 8007bc8:	f100 0614 	add.w	r6, r0, #20
 8007bcc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007bd0:	4633      	mov	r3, r6
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	4543      	cmp	r3, r8
 8007bd6:	d31e      	bcc.n	8007c16 <__multiply+0x92>
 8007bd8:	f105 0c14 	add.w	ip, r5, #20
 8007bdc:	f104 0314 	add.w	r3, r4, #20
 8007be0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007be4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007be8:	9202      	str	r2, [sp, #8]
 8007bea:	ebac 0205 	sub.w	r2, ip, r5
 8007bee:	3a15      	subs	r2, #21
 8007bf0:	f022 0203 	bic.w	r2, r2, #3
 8007bf4:	3204      	adds	r2, #4
 8007bf6:	f105 0115 	add.w	r1, r5, #21
 8007bfa:	458c      	cmp	ip, r1
 8007bfc:	bf38      	it	cc
 8007bfe:	2204      	movcc	r2, #4
 8007c00:	9201      	str	r2, [sp, #4]
 8007c02:	9a02      	ldr	r2, [sp, #8]
 8007c04:	9303      	str	r3, [sp, #12]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d808      	bhi.n	8007c1c <__multiply+0x98>
 8007c0a:	2f00      	cmp	r7, #0
 8007c0c:	dc55      	bgt.n	8007cba <__multiply+0x136>
 8007c0e:	6107      	str	r7, [r0, #16]
 8007c10:	b005      	add	sp, #20
 8007c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c16:	f843 2b04 	str.w	r2, [r3], #4
 8007c1a:	e7db      	b.n	8007bd4 <__multiply+0x50>
 8007c1c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c20:	f1ba 0f00 	cmp.w	sl, #0
 8007c24:	d020      	beq.n	8007c68 <__multiply+0xe4>
 8007c26:	f105 0e14 	add.w	lr, r5, #20
 8007c2a:	46b1      	mov	r9, r6
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007c32:	f8d9 b000 	ldr.w	fp, [r9]
 8007c36:	b2a1      	uxth	r1, r4
 8007c38:	fa1f fb8b 	uxth.w	fp, fp
 8007c3c:	fb0a b101 	mla	r1, sl, r1, fp
 8007c40:	4411      	add	r1, r2
 8007c42:	f8d9 2000 	ldr.w	r2, [r9]
 8007c46:	0c24      	lsrs	r4, r4, #16
 8007c48:	0c12      	lsrs	r2, r2, #16
 8007c4a:	fb0a 2404 	mla	r4, sl, r4, r2
 8007c4e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007c52:	b289      	uxth	r1, r1
 8007c54:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007c58:	45f4      	cmp	ip, lr
 8007c5a:	f849 1b04 	str.w	r1, [r9], #4
 8007c5e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007c62:	d8e4      	bhi.n	8007c2e <__multiply+0xaa>
 8007c64:	9901      	ldr	r1, [sp, #4]
 8007c66:	5072      	str	r2, [r6, r1]
 8007c68:	9a03      	ldr	r2, [sp, #12]
 8007c6a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c6e:	3304      	adds	r3, #4
 8007c70:	f1b9 0f00 	cmp.w	r9, #0
 8007c74:	d01f      	beq.n	8007cb6 <__multiply+0x132>
 8007c76:	6834      	ldr	r4, [r6, #0]
 8007c78:	f105 0114 	add.w	r1, r5, #20
 8007c7c:	46b6      	mov	lr, r6
 8007c7e:	f04f 0a00 	mov.w	sl, #0
 8007c82:	880a      	ldrh	r2, [r1, #0]
 8007c84:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007c88:	fb09 b202 	mla	r2, r9, r2, fp
 8007c8c:	4492      	add	sl, r2
 8007c8e:	b2a4      	uxth	r4, r4
 8007c90:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007c94:	f84e 4b04 	str.w	r4, [lr], #4
 8007c98:	f851 4b04 	ldr.w	r4, [r1], #4
 8007c9c:	f8be 2000 	ldrh.w	r2, [lr]
 8007ca0:	0c24      	lsrs	r4, r4, #16
 8007ca2:	fb09 2404 	mla	r4, r9, r4, r2
 8007ca6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007caa:	458c      	cmp	ip, r1
 8007cac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007cb0:	d8e7      	bhi.n	8007c82 <__multiply+0xfe>
 8007cb2:	9a01      	ldr	r2, [sp, #4]
 8007cb4:	50b4      	str	r4, [r6, r2]
 8007cb6:	3604      	adds	r6, #4
 8007cb8:	e7a3      	b.n	8007c02 <__multiply+0x7e>
 8007cba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1a5      	bne.n	8007c0e <__multiply+0x8a>
 8007cc2:	3f01      	subs	r7, #1
 8007cc4:	e7a1      	b.n	8007c0a <__multiply+0x86>
 8007cc6:	bf00      	nop
 8007cc8:	08009234 	.word	0x08009234
 8007ccc:	08009245 	.word	0x08009245

08007cd0 <__pow5mult>:
 8007cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cd4:	4615      	mov	r5, r2
 8007cd6:	f012 0203 	ands.w	r2, r2, #3
 8007cda:	4606      	mov	r6, r0
 8007cdc:	460f      	mov	r7, r1
 8007cde:	d007      	beq.n	8007cf0 <__pow5mult+0x20>
 8007ce0:	4c25      	ldr	r4, [pc, #148]	; (8007d78 <__pow5mult+0xa8>)
 8007ce2:	3a01      	subs	r2, #1
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cea:	f7ff fe9b 	bl	8007a24 <__multadd>
 8007cee:	4607      	mov	r7, r0
 8007cf0:	10ad      	asrs	r5, r5, #2
 8007cf2:	d03d      	beq.n	8007d70 <__pow5mult+0xa0>
 8007cf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007cf6:	b97c      	cbnz	r4, 8007d18 <__pow5mult+0x48>
 8007cf8:	2010      	movs	r0, #16
 8007cfa:	f7ff fe1b 	bl	8007934 <malloc>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	6270      	str	r0, [r6, #36]	; 0x24
 8007d02:	b928      	cbnz	r0, 8007d10 <__pow5mult+0x40>
 8007d04:	4b1d      	ldr	r3, [pc, #116]	; (8007d7c <__pow5mult+0xac>)
 8007d06:	481e      	ldr	r0, [pc, #120]	; (8007d80 <__pow5mult+0xb0>)
 8007d08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007d0c:	f7fe ff64 	bl	8006bd8 <__assert_func>
 8007d10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d14:	6004      	str	r4, [r0, #0]
 8007d16:	60c4      	str	r4, [r0, #12]
 8007d18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d20:	b94c      	cbnz	r4, 8007d36 <__pow5mult+0x66>
 8007d22:	f240 2171 	movw	r1, #625	; 0x271
 8007d26:	4630      	mov	r0, r6
 8007d28:	f7ff ff16 	bl	8007b58 <__i2b>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d32:	4604      	mov	r4, r0
 8007d34:	6003      	str	r3, [r0, #0]
 8007d36:	f04f 0900 	mov.w	r9, #0
 8007d3a:	07eb      	lsls	r3, r5, #31
 8007d3c:	d50a      	bpl.n	8007d54 <__pow5mult+0x84>
 8007d3e:	4639      	mov	r1, r7
 8007d40:	4622      	mov	r2, r4
 8007d42:	4630      	mov	r0, r6
 8007d44:	f7ff ff1e 	bl	8007b84 <__multiply>
 8007d48:	4639      	mov	r1, r7
 8007d4a:	4680      	mov	r8, r0
 8007d4c:	4630      	mov	r0, r6
 8007d4e:	f7ff fe47 	bl	80079e0 <_Bfree>
 8007d52:	4647      	mov	r7, r8
 8007d54:	106d      	asrs	r5, r5, #1
 8007d56:	d00b      	beq.n	8007d70 <__pow5mult+0xa0>
 8007d58:	6820      	ldr	r0, [r4, #0]
 8007d5a:	b938      	cbnz	r0, 8007d6c <__pow5mult+0x9c>
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	4621      	mov	r1, r4
 8007d60:	4630      	mov	r0, r6
 8007d62:	f7ff ff0f 	bl	8007b84 <__multiply>
 8007d66:	6020      	str	r0, [r4, #0]
 8007d68:	f8c0 9000 	str.w	r9, [r0]
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	e7e4      	b.n	8007d3a <__pow5mult+0x6a>
 8007d70:	4638      	mov	r0, r7
 8007d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d76:	bf00      	nop
 8007d78:	08009398 	.word	0x08009398
 8007d7c:	080091be 	.word	0x080091be
 8007d80:	08009245 	.word	0x08009245

08007d84 <__lshift>:
 8007d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d88:	460c      	mov	r4, r1
 8007d8a:	6849      	ldr	r1, [r1, #4]
 8007d8c:	6923      	ldr	r3, [r4, #16]
 8007d8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d92:	68a3      	ldr	r3, [r4, #8]
 8007d94:	4607      	mov	r7, r0
 8007d96:	4691      	mov	r9, r2
 8007d98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d9c:	f108 0601 	add.w	r6, r8, #1
 8007da0:	42b3      	cmp	r3, r6
 8007da2:	db0b      	blt.n	8007dbc <__lshift+0x38>
 8007da4:	4638      	mov	r0, r7
 8007da6:	f7ff fddb 	bl	8007960 <_Balloc>
 8007daa:	4605      	mov	r5, r0
 8007dac:	b948      	cbnz	r0, 8007dc2 <__lshift+0x3e>
 8007dae:	4602      	mov	r2, r0
 8007db0:	4b28      	ldr	r3, [pc, #160]	; (8007e54 <__lshift+0xd0>)
 8007db2:	4829      	ldr	r0, [pc, #164]	; (8007e58 <__lshift+0xd4>)
 8007db4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007db8:	f7fe ff0e 	bl	8006bd8 <__assert_func>
 8007dbc:	3101      	adds	r1, #1
 8007dbe:	005b      	lsls	r3, r3, #1
 8007dc0:	e7ee      	b.n	8007da0 <__lshift+0x1c>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f100 0114 	add.w	r1, r0, #20
 8007dc8:	f100 0210 	add.w	r2, r0, #16
 8007dcc:	4618      	mov	r0, r3
 8007dce:	4553      	cmp	r3, sl
 8007dd0:	db33      	blt.n	8007e3a <__lshift+0xb6>
 8007dd2:	6920      	ldr	r0, [r4, #16]
 8007dd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007dd8:	f104 0314 	add.w	r3, r4, #20
 8007ddc:	f019 091f 	ands.w	r9, r9, #31
 8007de0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007de4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007de8:	d02b      	beq.n	8007e42 <__lshift+0xbe>
 8007dea:	f1c9 0e20 	rsb	lr, r9, #32
 8007dee:	468a      	mov	sl, r1
 8007df0:	2200      	movs	r2, #0
 8007df2:	6818      	ldr	r0, [r3, #0]
 8007df4:	fa00 f009 	lsl.w	r0, r0, r9
 8007df8:	4302      	orrs	r2, r0
 8007dfa:	f84a 2b04 	str.w	r2, [sl], #4
 8007dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e02:	459c      	cmp	ip, r3
 8007e04:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e08:	d8f3      	bhi.n	8007df2 <__lshift+0x6e>
 8007e0a:	ebac 0304 	sub.w	r3, ip, r4
 8007e0e:	3b15      	subs	r3, #21
 8007e10:	f023 0303 	bic.w	r3, r3, #3
 8007e14:	3304      	adds	r3, #4
 8007e16:	f104 0015 	add.w	r0, r4, #21
 8007e1a:	4584      	cmp	ip, r0
 8007e1c:	bf38      	it	cc
 8007e1e:	2304      	movcc	r3, #4
 8007e20:	50ca      	str	r2, [r1, r3]
 8007e22:	b10a      	cbz	r2, 8007e28 <__lshift+0xa4>
 8007e24:	f108 0602 	add.w	r6, r8, #2
 8007e28:	3e01      	subs	r6, #1
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	612e      	str	r6, [r5, #16]
 8007e2e:	4621      	mov	r1, r4
 8007e30:	f7ff fdd6 	bl	80079e0 <_Bfree>
 8007e34:	4628      	mov	r0, r5
 8007e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e3e:	3301      	adds	r3, #1
 8007e40:	e7c5      	b.n	8007dce <__lshift+0x4a>
 8007e42:	3904      	subs	r1, #4
 8007e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e48:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e4c:	459c      	cmp	ip, r3
 8007e4e:	d8f9      	bhi.n	8007e44 <__lshift+0xc0>
 8007e50:	e7ea      	b.n	8007e28 <__lshift+0xa4>
 8007e52:	bf00      	nop
 8007e54:	08009234 	.word	0x08009234
 8007e58:	08009245 	.word	0x08009245

08007e5c <__mcmp>:
 8007e5c:	b530      	push	{r4, r5, lr}
 8007e5e:	6902      	ldr	r2, [r0, #16]
 8007e60:	690c      	ldr	r4, [r1, #16]
 8007e62:	1b12      	subs	r2, r2, r4
 8007e64:	d10e      	bne.n	8007e84 <__mcmp+0x28>
 8007e66:	f100 0314 	add.w	r3, r0, #20
 8007e6a:	3114      	adds	r1, #20
 8007e6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e7c:	42a5      	cmp	r5, r4
 8007e7e:	d003      	beq.n	8007e88 <__mcmp+0x2c>
 8007e80:	d305      	bcc.n	8007e8e <__mcmp+0x32>
 8007e82:	2201      	movs	r2, #1
 8007e84:	4610      	mov	r0, r2
 8007e86:	bd30      	pop	{r4, r5, pc}
 8007e88:	4283      	cmp	r3, r0
 8007e8a:	d3f3      	bcc.n	8007e74 <__mcmp+0x18>
 8007e8c:	e7fa      	b.n	8007e84 <__mcmp+0x28>
 8007e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e92:	e7f7      	b.n	8007e84 <__mcmp+0x28>

08007e94 <__mdiff>:
 8007e94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e98:	460c      	mov	r4, r1
 8007e9a:	4606      	mov	r6, r0
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	4617      	mov	r7, r2
 8007ea2:	f7ff ffdb 	bl	8007e5c <__mcmp>
 8007ea6:	1e05      	subs	r5, r0, #0
 8007ea8:	d110      	bne.n	8007ecc <__mdiff+0x38>
 8007eaa:	4629      	mov	r1, r5
 8007eac:	4630      	mov	r0, r6
 8007eae:	f7ff fd57 	bl	8007960 <_Balloc>
 8007eb2:	b930      	cbnz	r0, 8007ec2 <__mdiff+0x2e>
 8007eb4:	4b39      	ldr	r3, [pc, #228]	; (8007f9c <__mdiff+0x108>)
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	f240 2132 	movw	r1, #562	; 0x232
 8007ebc:	4838      	ldr	r0, [pc, #224]	; (8007fa0 <__mdiff+0x10c>)
 8007ebe:	f7fe fe8b 	bl	8006bd8 <__assert_func>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ecc:	bfa4      	itt	ge
 8007ece:	463b      	movge	r3, r7
 8007ed0:	4627      	movge	r7, r4
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	6879      	ldr	r1, [r7, #4]
 8007ed6:	bfa6      	itte	ge
 8007ed8:	461c      	movge	r4, r3
 8007eda:	2500      	movge	r5, #0
 8007edc:	2501      	movlt	r5, #1
 8007ede:	f7ff fd3f 	bl	8007960 <_Balloc>
 8007ee2:	b920      	cbnz	r0, 8007eee <__mdiff+0x5a>
 8007ee4:	4b2d      	ldr	r3, [pc, #180]	; (8007f9c <__mdiff+0x108>)
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007eec:	e7e6      	b.n	8007ebc <__mdiff+0x28>
 8007eee:	693e      	ldr	r6, [r7, #16]
 8007ef0:	60c5      	str	r5, [r0, #12]
 8007ef2:	6925      	ldr	r5, [r4, #16]
 8007ef4:	f107 0114 	add.w	r1, r7, #20
 8007ef8:	f104 0914 	add.w	r9, r4, #20
 8007efc:	f100 0e14 	add.w	lr, r0, #20
 8007f00:	f107 0210 	add.w	r2, r7, #16
 8007f04:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007f08:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007f0c:	46f2      	mov	sl, lr
 8007f0e:	2700      	movs	r7, #0
 8007f10:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f18:	fa1f f883 	uxth.w	r8, r3
 8007f1c:	fa17 f78b 	uxtah	r7, r7, fp
 8007f20:	0c1b      	lsrs	r3, r3, #16
 8007f22:	eba7 0808 	sub.w	r8, r7, r8
 8007f26:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f2a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f2e:	fa1f f888 	uxth.w	r8, r8
 8007f32:	141f      	asrs	r7, r3, #16
 8007f34:	454d      	cmp	r5, r9
 8007f36:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f3a:	f84a 3b04 	str.w	r3, [sl], #4
 8007f3e:	d8e7      	bhi.n	8007f10 <__mdiff+0x7c>
 8007f40:	1b2b      	subs	r3, r5, r4
 8007f42:	3b15      	subs	r3, #21
 8007f44:	f023 0303 	bic.w	r3, r3, #3
 8007f48:	3304      	adds	r3, #4
 8007f4a:	3415      	adds	r4, #21
 8007f4c:	42a5      	cmp	r5, r4
 8007f4e:	bf38      	it	cc
 8007f50:	2304      	movcc	r3, #4
 8007f52:	4419      	add	r1, r3
 8007f54:	4473      	add	r3, lr
 8007f56:	469e      	mov	lr, r3
 8007f58:	460d      	mov	r5, r1
 8007f5a:	4565      	cmp	r5, ip
 8007f5c:	d30e      	bcc.n	8007f7c <__mdiff+0xe8>
 8007f5e:	f10c 0203 	add.w	r2, ip, #3
 8007f62:	1a52      	subs	r2, r2, r1
 8007f64:	f022 0203 	bic.w	r2, r2, #3
 8007f68:	3903      	subs	r1, #3
 8007f6a:	458c      	cmp	ip, r1
 8007f6c:	bf38      	it	cc
 8007f6e:	2200      	movcc	r2, #0
 8007f70:	441a      	add	r2, r3
 8007f72:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007f76:	b17b      	cbz	r3, 8007f98 <__mdiff+0x104>
 8007f78:	6106      	str	r6, [r0, #16]
 8007f7a:	e7a5      	b.n	8007ec8 <__mdiff+0x34>
 8007f7c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007f80:	fa17 f488 	uxtah	r4, r7, r8
 8007f84:	1422      	asrs	r2, r4, #16
 8007f86:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007f8a:	b2a4      	uxth	r4, r4
 8007f8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007f90:	f84e 4b04 	str.w	r4, [lr], #4
 8007f94:	1417      	asrs	r7, r2, #16
 8007f96:	e7e0      	b.n	8007f5a <__mdiff+0xc6>
 8007f98:	3e01      	subs	r6, #1
 8007f9a:	e7ea      	b.n	8007f72 <__mdiff+0xde>
 8007f9c:	08009234 	.word	0x08009234
 8007fa0:	08009245 	.word	0x08009245

08007fa4 <__d2b>:
 8007fa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fa8:	4689      	mov	r9, r1
 8007faa:	2101      	movs	r1, #1
 8007fac:	ec57 6b10 	vmov	r6, r7, d0
 8007fb0:	4690      	mov	r8, r2
 8007fb2:	f7ff fcd5 	bl	8007960 <_Balloc>
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	b930      	cbnz	r0, 8007fc8 <__d2b+0x24>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	4b25      	ldr	r3, [pc, #148]	; (8008054 <__d2b+0xb0>)
 8007fbe:	4826      	ldr	r0, [pc, #152]	; (8008058 <__d2b+0xb4>)
 8007fc0:	f240 310a 	movw	r1, #778	; 0x30a
 8007fc4:	f7fe fe08 	bl	8006bd8 <__assert_func>
 8007fc8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007fcc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007fd0:	bb35      	cbnz	r5, 8008020 <__d2b+0x7c>
 8007fd2:	2e00      	cmp	r6, #0
 8007fd4:	9301      	str	r3, [sp, #4]
 8007fd6:	d028      	beq.n	800802a <__d2b+0x86>
 8007fd8:	4668      	mov	r0, sp
 8007fda:	9600      	str	r6, [sp, #0]
 8007fdc:	f7ff fd8c 	bl	8007af8 <__lo0bits>
 8007fe0:	9900      	ldr	r1, [sp, #0]
 8007fe2:	b300      	cbz	r0, 8008026 <__d2b+0x82>
 8007fe4:	9a01      	ldr	r2, [sp, #4]
 8007fe6:	f1c0 0320 	rsb	r3, r0, #32
 8007fea:	fa02 f303 	lsl.w	r3, r2, r3
 8007fee:	430b      	orrs	r3, r1
 8007ff0:	40c2      	lsrs	r2, r0
 8007ff2:	6163      	str	r3, [r4, #20]
 8007ff4:	9201      	str	r2, [sp, #4]
 8007ff6:	9b01      	ldr	r3, [sp, #4]
 8007ff8:	61a3      	str	r3, [r4, #24]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	bf14      	ite	ne
 8007ffe:	2202      	movne	r2, #2
 8008000:	2201      	moveq	r2, #1
 8008002:	6122      	str	r2, [r4, #16]
 8008004:	b1d5      	cbz	r5, 800803c <__d2b+0x98>
 8008006:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800800a:	4405      	add	r5, r0
 800800c:	f8c9 5000 	str.w	r5, [r9]
 8008010:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008014:	f8c8 0000 	str.w	r0, [r8]
 8008018:	4620      	mov	r0, r4
 800801a:	b003      	add	sp, #12
 800801c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008020:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008024:	e7d5      	b.n	8007fd2 <__d2b+0x2e>
 8008026:	6161      	str	r1, [r4, #20]
 8008028:	e7e5      	b.n	8007ff6 <__d2b+0x52>
 800802a:	a801      	add	r0, sp, #4
 800802c:	f7ff fd64 	bl	8007af8 <__lo0bits>
 8008030:	9b01      	ldr	r3, [sp, #4]
 8008032:	6163      	str	r3, [r4, #20]
 8008034:	2201      	movs	r2, #1
 8008036:	6122      	str	r2, [r4, #16]
 8008038:	3020      	adds	r0, #32
 800803a:	e7e3      	b.n	8008004 <__d2b+0x60>
 800803c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008040:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008044:	f8c9 0000 	str.w	r0, [r9]
 8008048:	6918      	ldr	r0, [r3, #16]
 800804a:	f7ff fd35 	bl	8007ab8 <__hi0bits>
 800804e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008052:	e7df      	b.n	8008014 <__d2b+0x70>
 8008054:	08009234 	.word	0x08009234
 8008058:	08009245 	.word	0x08009245

0800805c <_calloc_r>:
 800805c:	b513      	push	{r0, r1, r4, lr}
 800805e:	434a      	muls	r2, r1
 8008060:	4611      	mov	r1, r2
 8008062:	9201      	str	r2, [sp, #4]
 8008064:	f000 f85a 	bl	800811c <_malloc_r>
 8008068:	4604      	mov	r4, r0
 800806a:	b118      	cbz	r0, 8008074 <_calloc_r+0x18>
 800806c:	9a01      	ldr	r2, [sp, #4]
 800806e:	2100      	movs	r1, #0
 8008070:	f7fe f920 	bl	80062b4 <memset>
 8008074:	4620      	mov	r0, r4
 8008076:	b002      	add	sp, #8
 8008078:	bd10      	pop	{r4, pc}
	...

0800807c <_free_r>:
 800807c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800807e:	2900      	cmp	r1, #0
 8008080:	d048      	beq.n	8008114 <_free_r+0x98>
 8008082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008086:	9001      	str	r0, [sp, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	f1a1 0404 	sub.w	r4, r1, #4
 800808e:	bfb8      	it	lt
 8008090:	18e4      	addlt	r4, r4, r3
 8008092:	f000 fe75 	bl	8008d80 <__malloc_lock>
 8008096:	4a20      	ldr	r2, [pc, #128]	; (8008118 <_free_r+0x9c>)
 8008098:	9801      	ldr	r0, [sp, #4]
 800809a:	6813      	ldr	r3, [r2, #0]
 800809c:	4615      	mov	r5, r2
 800809e:	b933      	cbnz	r3, 80080ae <_free_r+0x32>
 80080a0:	6063      	str	r3, [r4, #4]
 80080a2:	6014      	str	r4, [r2, #0]
 80080a4:	b003      	add	sp, #12
 80080a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080aa:	f000 be6f 	b.w	8008d8c <__malloc_unlock>
 80080ae:	42a3      	cmp	r3, r4
 80080b0:	d90b      	bls.n	80080ca <_free_r+0x4e>
 80080b2:	6821      	ldr	r1, [r4, #0]
 80080b4:	1862      	adds	r2, r4, r1
 80080b6:	4293      	cmp	r3, r2
 80080b8:	bf04      	itt	eq
 80080ba:	681a      	ldreq	r2, [r3, #0]
 80080bc:	685b      	ldreq	r3, [r3, #4]
 80080be:	6063      	str	r3, [r4, #4]
 80080c0:	bf04      	itt	eq
 80080c2:	1852      	addeq	r2, r2, r1
 80080c4:	6022      	streq	r2, [r4, #0]
 80080c6:	602c      	str	r4, [r5, #0]
 80080c8:	e7ec      	b.n	80080a4 <_free_r+0x28>
 80080ca:	461a      	mov	r2, r3
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	b10b      	cbz	r3, 80080d4 <_free_r+0x58>
 80080d0:	42a3      	cmp	r3, r4
 80080d2:	d9fa      	bls.n	80080ca <_free_r+0x4e>
 80080d4:	6811      	ldr	r1, [r2, #0]
 80080d6:	1855      	adds	r5, r2, r1
 80080d8:	42a5      	cmp	r5, r4
 80080da:	d10b      	bne.n	80080f4 <_free_r+0x78>
 80080dc:	6824      	ldr	r4, [r4, #0]
 80080de:	4421      	add	r1, r4
 80080e0:	1854      	adds	r4, r2, r1
 80080e2:	42a3      	cmp	r3, r4
 80080e4:	6011      	str	r1, [r2, #0]
 80080e6:	d1dd      	bne.n	80080a4 <_free_r+0x28>
 80080e8:	681c      	ldr	r4, [r3, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	6053      	str	r3, [r2, #4]
 80080ee:	4421      	add	r1, r4
 80080f0:	6011      	str	r1, [r2, #0]
 80080f2:	e7d7      	b.n	80080a4 <_free_r+0x28>
 80080f4:	d902      	bls.n	80080fc <_free_r+0x80>
 80080f6:	230c      	movs	r3, #12
 80080f8:	6003      	str	r3, [r0, #0]
 80080fa:	e7d3      	b.n	80080a4 <_free_r+0x28>
 80080fc:	6825      	ldr	r5, [r4, #0]
 80080fe:	1961      	adds	r1, r4, r5
 8008100:	428b      	cmp	r3, r1
 8008102:	bf04      	itt	eq
 8008104:	6819      	ldreq	r1, [r3, #0]
 8008106:	685b      	ldreq	r3, [r3, #4]
 8008108:	6063      	str	r3, [r4, #4]
 800810a:	bf04      	itt	eq
 800810c:	1949      	addeq	r1, r1, r5
 800810e:	6021      	streq	r1, [r4, #0]
 8008110:	6054      	str	r4, [r2, #4]
 8008112:	e7c7      	b.n	80080a4 <_free_r+0x28>
 8008114:	b003      	add	sp, #12
 8008116:	bd30      	pop	{r4, r5, pc}
 8008118:	20000910 	.word	0x20000910

0800811c <_malloc_r>:
 800811c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811e:	1ccd      	adds	r5, r1, #3
 8008120:	f025 0503 	bic.w	r5, r5, #3
 8008124:	3508      	adds	r5, #8
 8008126:	2d0c      	cmp	r5, #12
 8008128:	bf38      	it	cc
 800812a:	250c      	movcc	r5, #12
 800812c:	2d00      	cmp	r5, #0
 800812e:	4606      	mov	r6, r0
 8008130:	db01      	blt.n	8008136 <_malloc_r+0x1a>
 8008132:	42a9      	cmp	r1, r5
 8008134:	d903      	bls.n	800813e <_malloc_r+0x22>
 8008136:	230c      	movs	r3, #12
 8008138:	6033      	str	r3, [r6, #0]
 800813a:	2000      	movs	r0, #0
 800813c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800813e:	f000 fe1f 	bl	8008d80 <__malloc_lock>
 8008142:	4921      	ldr	r1, [pc, #132]	; (80081c8 <_malloc_r+0xac>)
 8008144:	680a      	ldr	r2, [r1, #0]
 8008146:	4614      	mov	r4, r2
 8008148:	b99c      	cbnz	r4, 8008172 <_malloc_r+0x56>
 800814a:	4f20      	ldr	r7, [pc, #128]	; (80081cc <_malloc_r+0xb0>)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	b923      	cbnz	r3, 800815a <_malloc_r+0x3e>
 8008150:	4621      	mov	r1, r4
 8008152:	4630      	mov	r0, r6
 8008154:	f000 faf2 	bl	800873c <_sbrk_r>
 8008158:	6038      	str	r0, [r7, #0]
 800815a:	4629      	mov	r1, r5
 800815c:	4630      	mov	r0, r6
 800815e:	f000 faed 	bl	800873c <_sbrk_r>
 8008162:	1c43      	adds	r3, r0, #1
 8008164:	d123      	bne.n	80081ae <_malloc_r+0x92>
 8008166:	230c      	movs	r3, #12
 8008168:	6033      	str	r3, [r6, #0]
 800816a:	4630      	mov	r0, r6
 800816c:	f000 fe0e 	bl	8008d8c <__malloc_unlock>
 8008170:	e7e3      	b.n	800813a <_malloc_r+0x1e>
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	1b5b      	subs	r3, r3, r5
 8008176:	d417      	bmi.n	80081a8 <_malloc_r+0x8c>
 8008178:	2b0b      	cmp	r3, #11
 800817a:	d903      	bls.n	8008184 <_malloc_r+0x68>
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	441c      	add	r4, r3
 8008180:	6025      	str	r5, [r4, #0]
 8008182:	e004      	b.n	800818e <_malloc_r+0x72>
 8008184:	6863      	ldr	r3, [r4, #4]
 8008186:	42a2      	cmp	r2, r4
 8008188:	bf0c      	ite	eq
 800818a:	600b      	streq	r3, [r1, #0]
 800818c:	6053      	strne	r3, [r2, #4]
 800818e:	4630      	mov	r0, r6
 8008190:	f000 fdfc 	bl	8008d8c <__malloc_unlock>
 8008194:	f104 000b 	add.w	r0, r4, #11
 8008198:	1d23      	adds	r3, r4, #4
 800819a:	f020 0007 	bic.w	r0, r0, #7
 800819e:	1ac2      	subs	r2, r0, r3
 80081a0:	d0cc      	beq.n	800813c <_malloc_r+0x20>
 80081a2:	1a1b      	subs	r3, r3, r0
 80081a4:	50a3      	str	r3, [r4, r2]
 80081a6:	e7c9      	b.n	800813c <_malloc_r+0x20>
 80081a8:	4622      	mov	r2, r4
 80081aa:	6864      	ldr	r4, [r4, #4]
 80081ac:	e7cc      	b.n	8008148 <_malloc_r+0x2c>
 80081ae:	1cc4      	adds	r4, r0, #3
 80081b0:	f024 0403 	bic.w	r4, r4, #3
 80081b4:	42a0      	cmp	r0, r4
 80081b6:	d0e3      	beq.n	8008180 <_malloc_r+0x64>
 80081b8:	1a21      	subs	r1, r4, r0
 80081ba:	4630      	mov	r0, r6
 80081bc:	f000 fabe 	bl	800873c <_sbrk_r>
 80081c0:	3001      	adds	r0, #1
 80081c2:	d1dd      	bne.n	8008180 <_malloc_r+0x64>
 80081c4:	e7cf      	b.n	8008166 <_malloc_r+0x4a>
 80081c6:	bf00      	nop
 80081c8:	20000910 	.word	0x20000910
 80081cc:	20000914 	.word	0x20000914

080081d0 <__ssputs_r>:
 80081d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d4:	688e      	ldr	r6, [r1, #8]
 80081d6:	429e      	cmp	r6, r3
 80081d8:	4682      	mov	sl, r0
 80081da:	460c      	mov	r4, r1
 80081dc:	4690      	mov	r8, r2
 80081de:	461f      	mov	r7, r3
 80081e0:	d838      	bhi.n	8008254 <__ssputs_r+0x84>
 80081e2:	898a      	ldrh	r2, [r1, #12]
 80081e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081e8:	d032      	beq.n	8008250 <__ssputs_r+0x80>
 80081ea:	6825      	ldr	r5, [r4, #0]
 80081ec:	6909      	ldr	r1, [r1, #16]
 80081ee:	eba5 0901 	sub.w	r9, r5, r1
 80081f2:	6965      	ldr	r5, [r4, #20]
 80081f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081fc:	3301      	adds	r3, #1
 80081fe:	444b      	add	r3, r9
 8008200:	106d      	asrs	r5, r5, #1
 8008202:	429d      	cmp	r5, r3
 8008204:	bf38      	it	cc
 8008206:	461d      	movcc	r5, r3
 8008208:	0553      	lsls	r3, r2, #21
 800820a:	d531      	bpl.n	8008270 <__ssputs_r+0xa0>
 800820c:	4629      	mov	r1, r5
 800820e:	f7ff ff85 	bl	800811c <_malloc_r>
 8008212:	4606      	mov	r6, r0
 8008214:	b950      	cbnz	r0, 800822c <__ssputs_r+0x5c>
 8008216:	230c      	movs	r3, #12
 8008218:	f8ca 3000 	str.w	r3, [sl]
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008222:	81a3      	strh	r3, [r4, #12]
 8008224:	f04f 30ff 	mov.w	r0, #4294967295
 8008228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800822c:	6921      	ldr	r1, [r4, #16]
 800822e:	464a      	mov	r2, r9
 8008230:	f7ff fb88 	bl	8007944 <memcpy>
 8008234:	89a3      	ldrh	r3, [r4, #12]
 8008236:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800823a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800823e:	81a3      	strh	r3, [r4, #12]
 8008240:	6126      	str	r6, [r4, #16]
 8008242:	6165      	str	r5, [r4, #20]
 8008244:	444e      	add	r6, r9
 8008246:	eba5 0509 	sub.w	r5, r5, r9
 800824a:	6026      	str	r6, [r4, #0]
 800824c:	60a5      	str	r5, [r4, #8]
 800824e:	463e      	mov	r6, r7
 8008250:	42be      	cmp	r6, r7
 8008252:	d900      	bls.n	8008256 <__ssputs_r+0x86>
 8008254:	463e      	mov	r6, r7
 8008256:	4632      	mov	r2, r6
 8008258:	6820      	ldr	r0, [r4, #0]
 800825a:	4641      	mov	r1, r8
 800825c:	f000 fd76 	bl	8008d4c <memmove>
 8008260:	68a3      	ldr	r3, [r4, #8]
 8008262:	6822      	ldr	r2, [r4, #0]
 8008264:	1b9b      	subs	r3, r3, r6
 8008266:	4432      	add	r2, r6
 8008268:	60a3      	str	r3, [r4, #8]
 800826a:	6022      	str	r2, [r4, #0]
 800826c:	2000      	movs	r0, #0
 800826e:	e7db      	b.n	8008228 <__ssputs_r+0x58>
 8008270:	462a      	mov	r2, r5
 8008272:	f000 fd91 	bl	8008d98 <_realloc_r>
 8008276:	4606      	mov	r6, r0
 8008278:	2800      	cmp	r0, #0
 800827a:	d1e1      	bne.n	8008240 <__ssputs_r+0x70>
 800827c:	6921      	ldr	r1, [r4, #16]
 800827e:	4650      	mov	r0, sl
 8008280:	f7ff fefc 	bl	800807c <_free_r>
 8008284:	e7c7      	b.n	8008216 <__ssputs_r+0x46>
	...

08008288 <_svfiprintf_r>:
 8008288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	4698      	mov	r8, r3
 800828e:	898b      	ldrh	r3, [r1, #12]
 8008290:	061b      	lsls	r3, r3, #24
 8008292:	b09d      	sub	sp, #116	; 0x74
 8008294:	4607      	mov	r7, r0
 8008296:	460d      	mov	r5, r1
 8008298:	4614      	mov	r4, r2
 800829a:	d50e      	bpl.n	80082ba <_svfiprintf_r+0x32>
 800829c:	690b      	ldr	r3, [r1, #16]
 800829e:	b963      	cbnz	r3, 80082ba <_svfiprintf_r+0x32>
 80082a0:	2140      	movs	r1, #64	; 0x40
 80082a2:	f7ff ff3b 	bl	800811c <_malloc_r>
 80082a6:	6028      	str	r0, [r5, #0]
 80082a8:	6128      	str	r0, [r5, #16]
 80082aa:	b920      	cbnz	r0, 80082b6 <_svfiprintf_r+0x2e>
 80082ac:	230c      	movs	r3, #12
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	f04f 30ff 	mov.w	r0, #4294967295
 80082b4:	e0d1      	b.n	800845a <_svfiprintf_r+0x1d2>
 80082b6:	2340      	movs	r3, #64	; 0x40
 80082b8:	616b      	str	r3, [r5, #20]
 80082ba:	2300      	movs	r3, #0
 80082bc:	9309      	str	r3, [sp, #36]	; 0x24
 80082be:	2320      	movs	r3, #32
 80082c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80082c8:	2330      	movs	r3, #48	; 0x30
 80082ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008474 <_svfiprintf_r+0x1ec>
 80082ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082d2:	f04f 0901 	mov.w	r9, #1
 80082d6:	4623      	mov	r3, r4
 80082d8:	469a      	mov	sl, r3
 80082da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082de:	b10a      	cbz	r2, 80082e4 <_svfiprintf_r+0x5c>
 80082e0:	2a25      	cmp	r2, #37	; 0x25
 80082e2:	d1f9      	bne.n	80082d8 <_svfiprintf_r+0x50>
 80082e4:	ebba 0b04 	subs.w	fp, sl, r4
 80082e8:	d00b      	beq.n	8008302 <_svfiprintf_r+0x7a>
 80082ea:	465b      	mov	r3, fp
 80082ec:	4622      	mov	r2, r4
 80082ee:	4629      	mov	r1, r5
 80082f0:	4638      	mov	r0, r7
 80082f2:	f7ff ff6d 	bl	80081d0 <__ssputs_r>
 80082f6:	3001      	adds	r0, #1
 80082f8:	f000 80aa 	beq.w	8008450 <_svfiprintf_r+0x1c8>
 80082fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082fe:	445a      	add	r2, fp
 8008300:	9209      	str	r2, [sp, #36]	; 0x24
 8008302:	f89a 3000 	ldrb.w	r3, [sl]
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 80a2 	beq.w	8008450 <_svfiprintf_r+0x1c8>
 800830c:	2300      	movs	r3, #0
 800830e:	f04f 32ff 	mov.w	r2, #4294967295
 8008312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008316:	f10a 0a01 	add.w	sl, sl, #1
 800831a:	9304      	str	r3, [sp, #16]
 800831c:	9307      	str	r3, [sp, #28]
 800831e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008322:	931a      	str	r3, [sp, #104]	; 0x68
 8008324:	4654      	mov	r4, sl
 8008326:	2205      	movs	r2, #5
 8008328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800832c:	4851      	ldr	r0, [pc, #324]	; (8008474 <_svfiprintf_r+0x1ec>)
 800832e:	f7f7 ff57 	bl	80001e0 <memchr>
 8008332:	9a04      	ldr	r2, [sp, #16]
 8008334:	b9d8      	cbnz	r0, 800836e <_svfiprintf_r+0xe6>
 8008336:	06d0      	lsls	r0, r2, #27
 8008338:	bf44      	itt	mi
 800833a:	2320      	movmi	r3, #32
 800833c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008340:	0711      	lsls	r1, r2, #28
 8008342:	bf44      	itt	mi
 8008344:	232b      	movmi	r3, #43	; 0x2b
 8008346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800834a:	f89a 3000 	ldrb.w	r3, [sl]
 800834e:	2b2a      	cmp	r3, #42	; 0x2a
 8008350:	d015      	beq.n	800837e <_svfiprintf_r+0xf6>
 8008352:	9a07      	ldr	r2, [sp, #28]
 8008354:	4654      	mov	r4, sl
 8008356:	2000      	movs	r0, #0
 8008358:	f04f 0c0a 	mov.w	ip, #10
 800835c:	4621      	mov	r1, r4
 800835e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008362:	3b30      	subs	r3, #48	; 0x30
 8008364:	2b09      	cmp	r3, #9
 8008366:	d94e      	bls.n	8008406 <_svfiprintf_r+0x17e>
 8008368:	b1b0      	cbz	r0, 8008398 <_svfiprintf_r+0x110>
 800836a:	9207      	str	r2, [sp, #28]
 800836c:	e014      	b.n	8008398 <_svfiprintf_r+0x110>
 800836e:	eba0 0308 	sub.w	r3, r0, r8
 8008372:	fa09 f303 	lsl.w	r3, r9, r3
 8008376:	4313      	orrs	r3, r2
 8008378:	9304      	str	r3, [sp, #16]
 800837a:	46a2      	mov	sl, r4
 800837c:	e7d2      	b.n	8008324 <_svfiprintf_r+0x9c>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	1d19      	adds	r1, r3, #4
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	9103      	str	r1, [sp, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	bfbb      	ittet	lt
 800838a:	425b      	neglt	r3, r3
 800838c:	f042 0202 	orrlt.w	r2, r2, #2
 8008390:	9307      	strge	r3, [sp, #28]
 8008392:	9307      	strlt	r3, [sp, #28]
 8008394:	bfb8      	it	lt
 8008396:	9204      	strlt	r2, [sp, #16]
 8008398:	7823      	ldrb	r3, [r4, #0]
 800839a:	2b2e      	cmp	r3, #46	; 0x2e
 800839c:	d10c      	bne.n	80083b8 <_svfiprintf_r+0x130>
 800839e:	7863      	ldrb	r3, [r4, #1]
 80083a0:	2b2a      	cmp	r3, #42	; 0x2a
 80083a2:	d135      	bne.n	8008410 <_svfiprintf_r+0x188>
 80083a4:	9b03      	ldr	r3, [sp, #12]
 80083a6:	1d1a      	adds	r2, r3, #4
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	9203      	str	r2, [sp, #12]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	bfb8      	it	lt
 80083b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80083b4:	3402      	adds	r4, #2
 80083b6:	9305      	str	r3, [sp, #20]
 80083b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008484 <_svfiprintf_r+0x1fc>
 80083bc:	7821      	ldrb	r1, [r4, #0]
 80083be:	2203      	movs	r2, #3
 80083c0:	4650      	mov	r0, sl
 80083c2:	f7f7 ff0d 	bl	80001e0 <memchr>
 80083c6:	b140      	cbz	r0, 80083da <_svfiprintf_r+0x152>
 80083c8:	2340      	movs	r3, #64	; 0x40
 80083ca:	eba0 000a 	sub.w	r0, r0, sl
 80083ce:	fa03 f000 	lsl.w	r0, r3, r0
 80083d2:	9b04      	ldr	r3, [sp, #16]
 80083d4:	4303      	orrs	r3, r0
 80083d6:	3401      	adds	r4, #1
 80083d8:	9304      	str	r3, [sp, #16]
 80083da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083de:	4826      	ldr	r0, [pc, #152]	; (8008478 <_svfiprintf_r+0x1f0>)
 80083e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083e4:	2206      	movs	r2, #6
 80083e6:	f7f7 fefb 	bl	80001e0 <memchr>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d038      	beq.n	8008460 <_svfiprintf_r+0x1d8>
 80083ee:	4b23      	ldr	r3, [pc, #140]	; (800847c <_svfiprintf_r+0x1f4>)
 80083f0:	bb1b      	cbnz	r3, 800843a <_svfiprintf_r+0x1b2>
 80083f2:	9b03      	ldr	r3, [sp, #12]
 80083f4:	3307      	adds	r3, #7
 80083f6:	f023 0307 	bic.w	r3, r3, #7
 80083fa:	3308      	adds	r3, #8
 80083fc:	9303      	str	r3, [sp, #12]
 80083fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008400:	4433      	add	r3, r6
 8008402:	9309      	str	r3, [sp, #36]	; 0x24
 8008404:	e767      	b.n	80082d6 <_svfiprintf_r+0x4e>
 8008406:	fb0c 3202 	mla	r2, ip, r2, r3
 800840a:	460c      	mov	r4, r1
 800840c:	2001      	movs	r0, #1
 800840e:	e7a5      	b.n	800835c <_svfiprintf_r+0xd4>
 8008410:	2300      	movs	r3, #0
 8008412:	3401      	adds	r4, #1
 8008414:	9305      	str	r3, [sp, #20]
 8008416:	4619      	mov	r1, r3
 8008418:	f04f 0c0a 	mov.w	ip, #10
 800841c:	4620      	mov	r0, r4
 800841e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008422:	3a30      	subs	r2, #48	; 0x30
 8008424:	2a09      	cmp	r2, #9
 8008426:	d903      	bls.n	8008430 <_svfiprintf_r+0x1a8>
 8008428:	2b00      	cmp	r3, #0
 800842a:	d0c5      	beq.n	80083b8 <_svfiprintf_r+0x130>
 800842c:	9105      	str	r1, [sp, #20]
 800842e:	e7c3      	b.n	80083b8 <_svfiprintf_r+0x130>
 8008430:	fb0c 2101 	mla	r1, ip, r1, r2
 8008434:	4604      	mov	r4, r0
 8008436:	2301      	movs	r3, #1
 8008438:	e7f0      	b.n	800841c <_svfiprintf_r+0x194>
 800843a:	ab03      	add	r3, sp, #12
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	462a      	mov	r2, r5
 8008440:	4b0f      	ldr	r3, [pc, #60]	; (8008480 <_svfiprintf_r+0x1f8>)
 8008442:	a904      	add	r1, sp, #16
 8008444:	4638      	mov	r0, r7
 8008446:	f7fd ffdd 	bl	8006404 <_printf_float>
 800844a:	1c42      	adds	r2, r0, #1
 800844c:	4606      	mov	r6, r0
 800844e:	d1d6      	bne.n	80083fe <_svfiprintf_r+0x176>
 8008450:	89ab      	ldrh	r3, [r5, #12]
 8008452:	065b      	lsls	r3, r3, #25
 8008454:	f53f af2c 	bmi.w	80082b0 <_svfiprintf_r+0x28>
 8008458:	9809      	ldr	r0, [sp, #36]	; 0x24
 800845a:	b01d      	add	sp, #116	; 0x74
 800845c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008460:	ab03      	add	r3, sp, #12
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	462a      	mov	r2, r5
 8008466:	4b06      	ldr	r3, [pc, #24]	; (8008480 <_svfiprintf_r+0x1f8>)
 8008468:	a904      	add	r1, sp, #16
 800846a:	4638      	mov	r0, r7
 800846c:	f7fe fa6e 	bl	800694c <_printf_i>
 8008470:	e7eb      	b.n	800844a <_svfiprintf_r+0x1c2>
 8008472:	bf00      	nop
 8008474:	080093a4 	.word	0x080093a4
 8008478:	080093ae 	.word	0x080093ae
 800847c:	08006405 	.word	0x08006405
 8008480:	080081d1 	.word	0x080081d1
 8008484:	080093aa 	.word	0x080093aa

08008488 <__sfputc_r>:
 8008488:	6893      	ldr	r3, [r2, #8]
 800848a:	3b01      	subs	r3, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	b410      	push	{r4}
 8008490:	6093      	str	r3, [r2, #8]
 8008492:	da08      	bge.n	80084a6 <__sfputc_r+0x1e>
 8008494:	6994      	ldr	r4, [r2, #24]
 8008496:	42a3      	cmp	r3, r4
 8008498:	db01      	blt.n	800849e <__sfputc_r+0x16>
 800849a:	290a      	cmp	r1, #10
 800849c:	d103      	bne.n	80084a6 <__sfputc_r+0x1e>
 800849e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084a2:	f000 b95b 	b.w	800875c <__swbuf_r>
 80084a6:	6813      	ldr	r3, [r2, #0]
 80084a8:	1c58      	adds	r0, r3, #1
 80084aa:	6010      	str	r0, [r2, #0]
 80084ac:	7019      	strb	r1, [r3, #0]
 80084ae:	4608      	mov	r0, r1
 80084b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <__sfputs_r>:
 80084b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b8:	4606      	mov	r6, r0
 80084ba:	460f      	mov	r7, r1
 80084bc:	4614      	mov	r4, r2
 80084be:	18d5      	adds	r5, r2, r3
 80084c0:	42ac      	cmp	r4, r5
 80084c2:	d101      	bne.n	80084c8 <__sfputs_r+0x12>
 80084c4:	2000      	movs	r0, #0
 80084c6:	e007      	b.n	80084d8 <__sfputs_r+0x22>
 80084c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084cc:	463a      	mov	r2, r7
 80084ce:	4630      	mov	r0, r6
 80084d0:	f7ff ffda 	bl	8008488 <__sfputc_r>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d1f3      	bne.n	80084c0 <__sfputs_r+0xa>
 80084d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084dc <_vfiprintf_r>:
 80084dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e0:	460d      	mov	r5, r1
 80084e2:	b09d      	sub	sp, #116	; 0x74
 80084e4:	4614      	mov	r4, r2
 80084e6:	4698      	mov	r8, r3
 80084e8:	4606      	mov	r6, r0
 80084ea:	b118      	cbz	r0, 80084f4 <_vfiprintf_r+0x18>
 80084ec:	6983      	ldr	r3, [r0, #24]
 80084ee:	b90b      	cbnz	r3, 80084f4 <_vfiprintf_r+0x18>
 80084f0:	f000 fb16 	bl	8008b20 <__sinit>
 80084f4:	4b89      	ldr	r3, [pc, #548]	; (800871c <_vfiprintf_r+0x240>)
 80084f6:	429d      	cmp	r5, r3
 80084f8:	d11b      	bne.n	8008532 <_vfiprintf_r+0x56>
 80084fa:	6875      	ldr	r5, [r6, #4]
 80084fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084fe:	07d9      	lsls	r1, r3, #31
 8008500:	d405      	bmi.n	800850e <_vfiprintf_r+0x32>
 8008502:	89ab      	ldrh	r3, [r5, #12]
 8008504:	059a      	lsls	r2, r3, #22
 8008506:	d402      	bmi.n	800850e <_vfiprintf_r+0x32>
 8008508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800850a:	f000 fba7 	bl	8008c5c <__retarget_lock_acquire_recursive>
 800850e:	89ab      	ldrh	r3, [r5, #12]
 8008510:	071b      	lsls	r3, r3, #28
 8008512:	d501      	bpl.n	8008518 <_vfiprintf_r+0x3c>
 8008514:	692b      	ldr	r3, [r5, #16]
 8008516:	b9eb      	cbnz	r3, 8008554 <_vfiprintf_r+0x78>
 8008518:	4629      	mov	r1, r5
 800851a:	4630      	mov	r0, r6
 800851c:	f000 f970 	bl	8008800 <__swsetup_r>
 8008520:	b1c0      	cbz	r0, 8008554 <_vfiprintf_r+0x78>
 8008522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008524:	07dc      	lsls	r4, r3, #31
 8008526:	d50e      	bpl.n	8008546 <_vfiprintf_r+0x6a>
 8008528:	f04f 30ff 	mov.w	r0, #4294967295
 800852c:	b01d      	add	sp, #116	; 0x74
 800852e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008532:	4b7b      	ldr	r3, [pc, #492]	; (8008720 <_vfiprintf_r+0x244>)
 8008534:	429d      	cmp	r5, r3
 8008536:	d101      	bne.n	800853c <_vfiprintf_r+0x60>
 8008538:	68b5      	ldr	r5, [r6, #8]
 800853a:	e7df      	b.n	80084fc <_vfiprintf_r+0x20>
 800853c:	4b79      	ldr	r3, [pc, #484]	; (8008724 <_vfiprintf_r+0x248>)
 800853e:	429d      	cmp	r5, r3
 8008540:	bf08      	it	eq
 8008542:	68f5      	ldreq	r5, [r6, #12]
 8008544:	e7da      	b.n	80084fc <_vfiprintf_r+0x20>
 8008546:	89ab      	ldrh	r3, [r5, #12]
 8008548:	0598      	lsls	r0, r3, #22
 800854a:	d4ed      	bmi.n	8008528 <_vfiprintf_r+0x4c>
 800854c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800854e:	f000 fb86 	bl	8008c5e <__retarget_lock_release_recursive>
 8008552:	e7e9      	b.n	8008528 <_vfiprintf_r+0x4c>
 8008554:	2300      	movs	r3, #0
 8008556:	9309      	str	r3, [sp, #36]	; 0x24
 8008558:	2320      	movs	r3, #32
 800855a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800855e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008562:	2330      	movs	r3, #48	; 0x30
 8008564:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008728 <_vfiprintf_r+0x24c>
 8008568:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800856c:	f04f 0901 	mov.w	r9, #1
 8008570:	4623      	mov	r3, r4
 8008572:	469a      	mov	sl, r3
 8008574:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008578:	b10a      	cbz	r2, 800857e <_vfiprintf_r+0xa2>
 800857a:	2a25      	cmp	r2, #37	; 0x25
 800857c:	d1f9      	bne.n	8008572 <_vfiprintf_r+0x96>
 800857e:	ebba 0b04 	subs.w	fp, sl, r4
 8008582:	d00b      	beq.n	800859c <_vfiprintf_r+0xc0>
 8008584:	465b      	mov	r3, fp
 8008586:	4622      	mov	r2, r4
 8008588:	4629      	mov	r1, r5
 800858a:	4630      	mov	r0, r6
 800858c:	f7ff ff93 	bl	80084b6 <__sfputs_r>
 8008590:	3001      	adds	r0, #1
 8008592:	f000 80aa 	beq.w	80086ea <_vfiprintf_r+0x20e>
 8008596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008598:	445a      	add	r2, fp
 800859a:	9209      	str	r2, [sp, #36]	; 0x24
 800859c:	f89a 3000 	ldrb.w	r3, [sl]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 80a2 	beq.w	80086ea <_vfiprintf_r+0x20e>
 80085a6:	2300      	movs	r3, #0
 80085a8:	f04f 32ff 	mov.w	r2, #4294967295
 80085ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085b0:	f10a 0a01 	add.w	sl, sl, #1
 80085b4:	9304      	str	r3, [sp, #16]
 80085b6:	9307      	str	r3, [sp, #28]
 80085b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085bc:	931a      	str	r3, [sp, #104]	; 0x68
 80085be:	4654      	mov	r4, sl
 80085c0:	2205      	movs	r2, #5
 80085c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085c6:	4858      	ldr	r0, [pc, #352]	; (8008728 <_vfiprintf_r+0x24c>)
 80085c8:	f7f7 fe0a 	bl	80001e0 <memchr>
 80085cc:	9a04      	ldr	r2, [sp, #16]
 80085ce:	b9d8      	cbnz	r0, 8008608 <_vfiprintf_r+0x12c>
 80085d0:	06d1      	lsls	r1, r2, #27
 80085d2:	bf44      	itt	mi
 80085d4:	2320      	movmi	r3, #32
 80085d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085da:	0713      	lsls	r3, r2, #28
 80085dc:	bf44      	itt	mi
 80085de:	232b      	movmi	r3, #43	; 0x2b
 80085e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085e4:	f89a 3000 	ldrb.w	r3, [sl]
 80085e8:	2b2a      	cmp	r3, #42	; 0x2a
 80085ea:	d015      	beq.n	8008618 <_vfiprintf_r+0x13c>
 80085ec:	9a07      	ldr	r2, [sp, #28]
 80085ee:	4654      	mov	r4, sl
 80085f0:	2000      	movs	r0, #0
 80085f2:	f04f 0c0a 	mov.w	ip, #10
 80085f6:	4621      	mov	r1, r4
 80085f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085fc:	3b30      	subs	r3, #48	; 0x30
 80085fe:	2b09      	cmp	r3, #9
 8008600:	d94e      	bls.n	80086a0 <_vfiprintf_r+0x1c4>
 8008602:	b1b0      	cbz	r0, 8008632 <_vfiprintf_r+0x156>
 8008604:	9207      	str	r2, [sp, #28]
 8008606:	e014      	b.n	8008632 <_vfiprintf_r+0x156>
 8008608:	eba0 0308 	sub.w	r3, r0, r8
 800860c:	fa09 f303 	lsl.w	r3, r9, r3
 8008610:	4313      	orrs	r3, r2
 8008612:	9304      	str	r3, [sp, #16]
 8008614:	46a2      	mov	sl, r4
 8008616:	e7d2      	b.n	80085be <_vfiprintf_r+0xe2>
 8008618:	9b03      	ldr	r3, [sp, #12]
 800861a:	1d19      	adds	r1, r3, #4
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	9103      	str	r1, [sp, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	bfbb      	ittet	lt
 8008624:	425b      	neglt	r3, r3
 8008626:	f042 0202 	orrlt.w	r2, r2, #2
 800862a:	9307      	strge	r3, [sp, #28]
 800862c:	9307      	strlt	r3, [sp, #28]
 800862e:	bfb8      	it	lt
 8008630:	9204      	strlt	r2, [sp, #16]
 8008632:	7823      	ldrb	r3, [r4, #0]
 8008634:	2b2e      	cmp	r3, #46	; 0x2e
 8008636:	d10c      	bne.n	8008652 <_vfiprintf_r+0x176>
 8008638:	7863      	ldrb	r3, [r4, #1]
 800863a:	2b2a      	cmp	r3, #42	; 0x2a
 800863c:	d135      	bne.n	80086aa <_vfiprintf_r+0x1ce>
 800863e:	9b03      	ldr	r3, [sp, #12]
 8008640:	1d1a      	adds	r2, r3, #4
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	9203      	str	r2, [sp, #12]
 8008646:	2b00      	cmp	r3, #0
 8008648:	bfb8      	it	lt
 800864a:	f04f 33ff 	movlt.w	r3, #4294967295
 800864e:	3402      	adds	r4, #2
 8008650:	9305      	str	r3, [sp, #20]
 8008652:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008738 <_vfiprintf_r+0x25c>
 8008656:	7821      	ldrb	r1, [r4, #0]
 8008658:	2203      	movs	r2, #3
 800865a:	4650      	mov	r0, sl
 800865c:	f7f7 fdc0 	bl	80001e0 <memchr>
 8008660:	b140      	cbz	r0, 8008674 <_vfiprintf_r+0x198>
 8008662:	2340      	movs	r3, #64	; 0x40
 8008664:	eba0 000a 	sub.w	r0, r0, sl
 8008668:	fa03 f000 	lsl.w	r0, r3, r0
 800866c:	9b04      	ldr	r3, [sp, #16]
 800866e:	4303      	orrs	r3, r0
 8008670:	3401      	adds	r4, #1
 8008672:	9304      	str	r3, [sp, #16]
 8008674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008678:	482c      	ldr	r0, [pc, #176]	; (800872c <_vfiprintf_r+0x250>)
 800867a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800867e:	2206      	movs	r2, #6
 8008680:	f7f7 fdae 	bl	80001e0 <memchr>
 8008684:	2800      	cmp	r0, #0
 8008686:	d03f      	beq.n	8008708 <_vfiprintf_r+0x22c>
 8008688:	4b29      	ldr	r3, [pc, #164]	; (8008730 <_vfiprintf_r+0x254>)
 800868a:	bb1b      	cbnz	r3, 80086d4 <_vfiprintf_r+0x1f8>
 800868c:	9b03      	ldr	r3, [sp, #12]
 800868e:	3307      	adds	r3, #7
 8008690:	f023 0307 	bic.w	r3, r3, #7
 8008694:	3308      	adds	r3, #8
 8008696:	9303      	str	r3, [sp, #12]
 8008698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800869a:	443b      	add	r3, r7
 800869c:	9309      	str	r3, [sp, #36]	; 0x24
 800869e:	e767      	b.n	8008570 <_vfiprintf_r+0x94>
 80086a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80086a4:	460c      	mov	r4, r1
 80086a6:	2001      	movs	r0, #1
 80086a8:	e7a5      	b.n	80085f6 <_vfiprintf_r+0x11a>
 80086aa:	2300      	movs	r3, #0
 80086ac:	3401      	adds	r4, #1
 80086ae:	9305      	str	r3, [sp, #20]
 80086b0:	4619      	mov	r1, r3
 80086b2:	f04f 0c0a 	mov.w	ip, #10
 80086b6:	4620      	mov	r0, r4
 80086b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086bc:	3a30      	subs	r2, #48	; 0x30
 80086be:	2a09      	cmp	r2, #9
 80086c0:	d903      	bls.n	80086ca <_vfiprintf_r+0x1ee>
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d0c5      	beq.n	8008652 <_vfiprintf_r+0x176>
 80086c6:	9105      	str	r1, [sp, #20]
 80086c8:	e7c3      	b.n	8008652 <_vfiprintf_r+0x176>
 80086ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80086ce:	4604      	mov	r4, r0
 80086d0:	2301      	movs	r3, #1
 80086d2:	e7f0      	b.n	80086b6 <_vfiprintf_r+0x1da>
 80086d4:	ab03      	add	r3, sp, #12
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	462a      	mov	r2, r5
 80086da:	4b16      	ldr	r3, [pc, #88]	; (8008734 <_vfiprintf_r+0x258>)
 80086dc:	a904      	add	r1, sp, #16
 80086de:	4630      	mov	r0, r6
 80086e0:	f7fd fe90 	bl	8006404 <_printf_float>
 80086e4:	4607      	mov	r7, r0
 80086e6:	1c78      	adds	r0, r7, #1
 80086e8:	d1d6      	bne.n	8008698 <_vfiprintf_r+0x1bc>
 80086ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086ec:	07d9      	lsls	r1, r3, #31
 80086ee:	d405      	bmi.n	80086fc <_vfiprintf_r+0x220>
 80086f0:	89ab      	ldrh	r3, [r5, #12]
 80086f2:	059a      	lsls	r2, r3, #22
 80086f4:	d402      	bmi.n	80086fc <_vfiprintf_r+0x220>
 80086f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086f8:	f000 fab1 	bl	8008c5e <__retarget_lock_release_recursive>
 80086fc:	89ab      	ldrh	r3, [r5, #12]
 80086fe:	065b      	lsls	r3, r3, #25
 8008700:	f53f af12 	bmi.w	8008528 <_vfiprintf_r+0x4c>
 8008704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008706:	e711      	b.n	800852c <_vfiprintf_r+0x50>
 8008708:	ab03      	add	r3, sp, #12
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	462a      	mov	r2, r5
 800870e:	4b09      	ldr	r3, [pc, #36]	; (8008734 <_vfiprintf_r+0x258>)
 8008710:	a904      	add	r1, sp, #16
 8008712:	4630      	mov	r0, r6
 8008714:	f7fe f91a 	bl	800694c <_printf_i>
 8008718:	e7e4      	b.n	80086e4 <_vfiprintf_r+0x208>
 800871a:	bf00      	nop
 800871c:	080093d8 	.word	0x080093d8
 8008720:	080093f8 	.word	0x080093f8
 8008724:	080093b8 	.word	0x080093b8
 8008728:	080093a4 	.word	0x080093a4
 800872c:	080093ae 	.word	0x080093ae
 8008730:	08006405 	.word	0x08006405
 8008734:	080084b7 	.word	0x080084b7
 8008738:	080093aa 	.word	0x080093aa

0800873c <_sbrk_r>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4d06      	ldr	r5, [pc, #24]	; (8008758 <_sbrk_r+0x1c>)
 8008740:	2300      	movs	r3, #0
 8008742:	4604      	mov	r4, r0
 8008744:	4608      	mov	r0, r1
 8008746:	602b      	str	r3, [r5, #0]
 8008748:	f7f9 f9f0 	bl	8001b2c <_sbrk>
 800874c:	1c43      	adds	r3, r0, #1
 800874e:	d102      	bne.n	8008756 <_sbrk_r+0x1a>
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	b103      	cbz	r3, 8008756 <_sbrk_r+0x1a>
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	bd38      	pop	{r3, r4, r5, pc}
 8008758:	20000da8 	.word	0x20000da8

0800875c <__swbuf_r>:
 800875c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875e:	460e      	mov	r6, r1
 8008760:	4614      	mov	r4, r2
 8008762:	4605      	mov	r5, r0
 8008764:	b118      	cbz	r0, 800876e <__swbuf_r+0x12>
 8008766:	6983      	ldr	r3, [r0, #24]
 8008768:	b90b      	cbnz	r3, 800876e <__swbuf_r+0x12>
 800876a:	f000 f9d9 	bl	8008b20 <__sinit>
 800876e:	4b21      	ldr	r3, [pc, #132]	; (80087f4 <__swbuf_r+0x98>)
 8008770:	429c      	cmp	r4, r3
 8008772:	d12b      	bne.n	80087cc <__swbuf_r+0x70>
 8008774:	686c      	ldr	r4, [r5, #4]
 8008776:	69a3      	ldr	r3, [r4, #24]
 8008778:	60a3      	str	r3, [r4, #8]
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	071a      	lsls	r2, r3, #28
 800877e:	d52f      	bpl.n	80087e0 <__swbuf_r+0x84>
 8008780:	6923      	ldr	r3, [r4, #16]
 8008782:	b36b      	cbz	r3, 80087e0 <__swbuf_r+0x84>
 8008784:	6923      	ldr	r3, [r4, #16]
 8008786:	6820      	ldr	r0, [r4, #0]
 8008788:	1ac0      	subs	r0, r0, r3
 800878a:	6963      	ldr	r3, [r4, #20]
 800878c:	b2f6      	uxtb	r6, r6
 800878e:	4283      	cmp	r3, r0
 8008790:	4637      	mov	r7, r6
 8008792:	dc04      	bgt.n	800879e <__swbuf_r+0x42>
 8008794:	4621      	mov	r1, r4
 8008796:	4628      	mov	r0, r5
 8008798:	f000 f92e 	bl	80089f8 <_fflush_r>
 800879c:	bb30      	cbnz	r0, 80087ec <__swbuf_r+0x90>
 800879e:	68a3      	ldr	r3, [r4, #8]
 80087a0:	3b01      	subs	r3, #1
 80087a2:	60a3      	str	r3, [r4, #8]
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	6022      	str	r2, [r4, #0]
 80087aa:	701e      	strb	r6, [r3, #0]
 80087ac:	6963      	ldr	r3, [r4, #20]
 80087ae:	3001      	adds	r0, #1
 80087b0:	4283      	cmp	r3, r0
 80087b2:	d004      	beq.n	80087be <__swbuf_r+0x62>
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	07db      	lsls	r3, r3, #31
 80087b8:	d506      	bpl.n	80087c8 <__swbuf_r+0x6c>
 80087ba:	2e0a      	cmp	r6, #10
 80087bc:	d104      	bne.n	80087c8 <__swbuf_r+0x6c>
 80087be:	4621      	mov	r1, r4
 80087c0:	4628      	mov	r0, r5
 80087c2:	f000 f919 	bl	80089f8 <_fflush_r>
 80087c6:	b988      	cbnz	r0, 80087ec <__swbuf_r+0x90>
 80087c8:	4638      	mov	r0, r7
 80087ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087cc:	4b0a      	ldr	r3, [pc, #40]	; (80087f8 <__swbuf_r+0x9c>)
 80087ce:	429c      	cmp	r4, r3
 80087d0:	d101      	bne.n	80087d6 <__swbuf_r+0x7a>
 80087d2:	68ac      	ldr	r4, [r5, #8]
 80087d4:	e7cf      	b.n	8008776 <__swbuf_r+0x1a>
 80087d6:	4b09      	ldr	r3, [pc, #36]	; (80087fc <__swbuf_r+0xa0>)
 80087d8:	429c      	cmp	r4, r3
 80087da:	bf08      	it	eq
 80087dc:	68ec      	ldreq	r4, [r5, #12]
 80087de:	e7ca      	b.n	8008776 <__swbuf_r+0x1a>
 80087e0:	4621      	mov	r1, r4
 80087e2:	4628      	mov	r0, r5
 80087e4:	f000 f80c 	bl	8008800 <__swsetup_r>
 80087e8:	2800      	cmp	r0, #0
 80087ea:	d0cb      	beq.n	8008784 <__swbuf_r+0x28>
 80087ec:	f04f 37ff 	mov.w	r7, #4294967295
 80087f0:	e7ea      	b.n	80087c8 <__swbuf_r+0x6c>
 80087f2:	bf00      	nop
 80087f4:	080093d8 	.word	0x080093d8
 80087f8:	080093f8 	.word	0x080093f8
 80087fc:	080093b8 	.word	0x080093b8

08008800 <__swsetup_r>:
 8008800:	4b32      	ldr	r3, [pc, #200]	; (80088cc <__swsetup_r+0xcc>)
 8008802:	b570      	push	{r4, r5, r6, lr}
 8008804:	681d      	ldr	r5, [r3, #0]
 8008806:	4606      	mov	r6, r0
 8008808:	460c      	mov	r4, r1
 800880a:	b125      	cbz	r5, 8008816 <__swsetup_r+0x16>
 800880c:	69ab      	ldr	r3, [r5, #24]
 800880e:	b913      	cbnz	r3, 8008816 <__swsetup_r+0x16>
 8008810:	4628      	mov	r0, r5
 8008812:	f000 f985 	bl	8008b20 <__sinit>
 8008816:	4b2e      	ldr	r3, [pc, #184]	; (80088d0 <__swsetup_r+0xd0>)
 8008818:	429c      	cmp	r4, r3
 800881a:	d10f      	bne.n	800883c <__swsetup_r+0x3c>
 800881c:	686c      	ldr	r4, [r5, #4]
 800881e:	89a3      	ldrh	r3, [r4, #12]
 8008820:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008824:	0719      	lsls	r1, r3, #28
 8008826:	d42c      	bmi.n	8008882 <__swsetup_r+0x82>
 8008828:	06dd      	lsls	r5, r3, #27
 800882a:	d411      	bmi.n	8008850 <__swsetup_r+0x50>
 800882c:	2309      	movs	r3, #9
 800882e:	6033      	str	r3, [r6, #0]
 8008830:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008834:	81a3      	strh	r3, [r4, #12]
 8008836:	f04f 30ff 	mov.w	r0, #4294967295
 800883a:	e03e      	b.n	80088ba <__swsetup_r+0xba>
 800883c:	4b25      	ldr	r3, [pc, #148]	; (80088d4 <__swsetup_r+0xd4>)
 800883e:	429c      	cmp	r4, r3
 8008840:	d101      	bne.n	8008846 <__swsetup_r+0x46>
 8008842:	68ac      	ldr	r4, [r5, #8]
 8008844:	e7eb      	b.n	800881e <__swsetup_r+0x1e>
 8008846:	4b24      	ldr	r3, [pc, #144]	; (80088d8 <__swsetup_r+0xd8>)
 8008848:	429c      	cmp	r4, r3
 800884a:	bf08      	it	eq
 800884c:	68ec      	ldreq	r4, [r5, #12]
 800884e:	e7e6      	b.n	800881e <__swsetup_r+0x1e>
 8008850:	0758      	lsls	r0, r3, #29
 8008852:	d512      	bpl.n	800887a <__swsetup_r+0x7a>
 8008854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008856:	b141      	cbz	r1, 800886a <__swsetup_r+0x6a>
 8008858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800885c:	4299      	cmp	r1, r3
 800885e:	d002      	beq.n	8008866 <__swsetup_r+0x66>
 8008860:	4630      	mov	r0, r6
 8008862:	f7ff fc0b 	bl	800807c <_free_r>
 8008866:	2300      	movs	r3, #0
 8008868:	6363      	str	r3, [r4, #52]	; 0x34
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008870:	81a3      	strh	r3, [r4, #12]
 8008872:	2300      	movs	r3, #0
 8008874:	6063      	str	r3, [r4, #4]
 8008876:	6923      	ldr	r3, [r4, #16]
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	f043 0308 	orr.w	r3, r3, #8
 8008880:	81a3      	strh	r3, [r4, #12]
 8008882:	6923      	ldr	r3, [r4, #16]
 8008884:	b94b      	cbnz	r3, 800889a <__swsetup_r+0x9a>
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800888c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008890:	d003      	beq.n	800889a <__swsetup_r+0x9a>
 8008892:	4621      	mov	r1, r4
 8008894:	4630      	mov	r0, r6
 8008896:	f000 fa07 	bl	8008ca8 <__smakebuf_r>
 800889a:	89a0      	ldrh	r0, [r4, #12]
 800889c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088a0:	f010 0301 	ands.w	r3, r0, #1
 80088a4:	d00a      	beq.n	80088bc <__swsetup_r+0xbc>
 80088a6:	2300      	movs	r3, #0
 80088a8:	60a3      	str	r3, [r4, #8]
 80088aa:	6963      	ldr	r3, [r4, #20]
 80088ac:	425b      	negs	r3, r3
 80088ae:	61a3      	str	r3, [r4, #24]
 80088b0:	6923      	ldr	r3, [r4, #16]
 80088b2:	b943      	cbnz	r3, 80088c6 <__swsetup_r+0xc6>
 80088b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088b8:	d1ba      	bne.n	8008830 <__swsetup_r+0x30>
 80088ba:	bd70      	pop	{r4, r5, r6, pc}
 80088bc:	0781      	lsls	r1, r0, #30
 80088be:	bf58      	it	pl
 80088c0:	6963      	ldrpl	r3, [r4, #20]
 80088c2:	60a3      	str	r3, [r4, #8]
 80088c4:	e7f4      	b.n	80088b0 <__swsetup_r+0xb0>
 80088c6:	2000      	movs	r0, #0
 80088c8:	e7f7      	b.n	80088ba <__swsetup_r+0xba>
 80088ca:	bf00      	nop
 80088cc:	2000001c 	.word	0x2000001c
 80088d0:	080093d8 	.word	0x080093d8
 80088d4:	080093f8 	.word	0x080093f8
 80088d8:	080093b8 	.word	0x080093b8

080088dc <abort>:
 80088dc:	b508      	push	{r3, lr}
 80088de:	2006      	movs	r0, #6
 80088e0:	f000 faa8 	bl	8008e34 <raise>
 80088e4:	2001      	movs	r0, #1
 80088e6:	f7f9 f8a9 	bl	8001a3c <_exit>
	...

080088ec <__sflush_r>:
 80088ec:	898a      	ldrh	r2, [r1, #12]
 80088ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f2:	4605      	mov	r5, r0
 80088f4:	0710      	lsls	r0, r2, #28
 80088f6:	460c      	mov	r4, r1
 80088f8:	d458      	bmi.n	80089ac <__sflush_r+0xc0>
 80088fa:	684b      	ldr	r3, [r1, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	dc05      	bgt.n	800890c <__sflush_r+0x20>
 8008900:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008902:	2b00      	cmp	r3, #0
 8008904:	dc02      	bgt.n	800890c <__sflush_r+0x20>
 8008906:	2000      	movs	r0, #0
 8008908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800890c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800890e:	2e00      	cmp	r6, #0
 8008910:	d0f9      	beq.n	8008906 <__sflush_r+0x1a>
 8008912:	2300      	movs	r3, #0
 8008914:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008918:	682f      	ldr	r7, [r5, #0]
 800891a:	602b      	str	r3, [r5, #0]
 800891c:	d032      	beq.n	8008984 <__sflush_r+0x98>
 800891e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	075a      	lsls	r2, r3, #29
 8008924:	d505      	bpl.n	8008932 <__sflush_r+0x46>
 8008926:	6863      	ldr	r3, [r4, #4]
 8008928:	1ac0      	subs	r0, r0, r3
 800892a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800892c:	b10b      	cbz	r3, 8008932 <__sflush_r+0x46>
 800892e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008930:	1ac0      	subs	r0, r0, r3
 8008932:	2300      	movs	r3, #0
 8008934:	4602      	mov	r2, r0
 8008936:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008938:	6a21      	ldr	r1, [r4, #32]
 800893a:	4628      	mov	r0, r5
 800893c:	47b0      	blx	r6
 800893e:	1c43      	adds	r3, r0, #1
 8008940:	89a3      	ldrh	r3, [r4, #12]
 8008942:	d106      	bne.n	8008952 <__sflush_r+0x66>
 8008944:	6829      	ldr	r1, [r5, #0]
 8008946:	291d      	cmp	r1, #29
 8008948:	d82c      	bhi.n	80089a4 <__sflush_r+0xb8>
 800894a:	4a2a      	ldr	r2, [pc, #168]	; (80089f4 <__sflush_r+0x108>)
 800894c:	40ca      	lsrs	r2, r1
 800894e:	07d6      	lsls	r6, r2, #31
 8008950:	d528      	bpl.n	80089a4 <__sflush_r+0xb8>
 8008952:	2200      	movs	r2, #0
 8008954:	6062      	str	r2, [r4, #4]
 8008956:	04d9      	lsls	r1, r3, #19
 8008958:	6922      	ldr	r2, [r4, #16]
 800895a:	6022      	str	r2, [r4, #0]
 800895c:	d504      	bpl.n	8008968 <__sflush_r+0x7c>
 800895e:	1c42      	adds	r2, r0, #1
 8008960:	d101      	bne.n	8008966 <__sflush_r+0x7a>
 8008962:	682b      	ldr	r3, [r5, #0]
 8008964:	b903      	cbnz	r3, 8008968 <__sflush_r+0x7c>
 8008966:	6560      	str	r0, [r4, #84]	; 0x54
 8008968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800896a:	602f      	str	r7, [r5, #0]
 800896c:	2900      	cmp	r1, #0
 800896e:	d0ca      	beq.n	8008906 <__sflush_r+0x1a>
 8008970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008974:	4299      	cmp	r1, r3
 8008976:	d002      	beq.n	800897e <__sflush_r+0x92>
 8008978:	4628      	mov	r0, r5
 800897a:	f7ff fb7f 	bl	800807c <_free_r>
 800897e:	2000      	movs	r0, #0
 8008980:	6360      	str	r0, [r4, #52]	; 0x34
 8008982:	e7c1      	b.n	8008908 <__sflush_r+0x1c>
 8008984:	6a21      	ldr	r1, [r4, #32]
 8008986:	2301      	movs	r3, #1
 8008988:	4628      	mov	r0, r5
 800898a:	47b0      	blx	r6
 800898c:	1c41      	adds	r1, r0, #1
 800898e:	d1c7      	bne.n	8008920 <__sflush_r+0x34>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0c4      	beq.n	8008920 <__sflush_r+0x34>
 8008996:	2b1d      	cmp	r3, #29
 8008998:	d001      	beq.n	800899e <__sflush_r+0xb2>
 800899a:	2b16      	cmp	r3, #22
 800899c:	d101      	bne.n	80089a2 <__sflush_r+0xb6>
 800899e:	602f      	str	r7, [r5, #0]
 80089a0:	e7b1      	b.n	8008906 <__sflush_r+0x1a>
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089a8:	81a3      	strh	r3, [r4, #12]
 80089aa:	e7ad      	b.n	8008908 <__sflush_r+0x1c>
 80089ac:	690f      	ldr	r7, [r1, #16]
 80089ae:	2f00      	cmp	r7, #0
 80089b0:	d0a9      	beq.n	8008906 <__sflush_r+0x1a>
 80089b2:	0793      	lsls	r3, r2, #30
 80089b4:	680e      	ldr	r6, [r1, #0]
 80089b6:	bf08      	it	eq
 80089b8:	694b      	ldreq	r3, [r1, #20]
 80089ba:	600f      	str	r7, [r1, #0]
 80089bc:	bf18      	it	ne
 80089be:	2300      	movne	r3, #0
 80089c0:	eba6 0807 	sub.w	r8, r6, r7
 80089c4:	608b      	str	r3, [r1, #8]
 80089c6:	f1b8 0f00 	cmp.w	r8, #0
 80089ca:	dd9c      	ble.n	8008906 <__sflush_r+0x1a>
 80089cc:	6a21      	ldr	r1, [r4, #32]
 80089ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089d0:	4643      	mov	r3, r8
 80089d2:	463a      	mov	r2, r7
 80089d4:	4628      	mov	r0, r5
 80089d6:	47b0      	blx	r6
 80089d8:	2800      	cmp	r0, #0
 80089da:	dc06      	bgt.n	80089ea <__sflush_r+0xfe>
 80089dc:	89a3      	ldrh	r3, [r4, #12]
 80089de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089e2:	81a3      	strh	r3, [r4, #12]
 80089e4:	f04f 30ff 	mov.w	r0, #4294967295
 80089e8:	e78e      	b.n	8008908 <__sflush_r+0x1c>
 80089ea:	4407      	add	r7, r0
 80089ec:	eba8 0800 	sub.w	r8, r8, r0
 80089f0:	e7e9      	b.n	80089c6 <__sflush_r+0xda>
 80089f2:	bf00      	nop
 80089f4:	20400001 	.word	0x20400001

080089f8 <_fflush_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	690b      	ldr	r3, [r1, #16]
 80089fc:	4605      	mov	r5, r0
 80089fe:	460c      	mov	r4, r1
 8008a00:	b913      	cbnz	r3, 8008a08 <_fflush_r+0x10>
 8008a02:	2500      	movs	r5, #0
 8008a04:	4628      	mov	r0, r5
 8008a06:	bd38      	pop	{r3, r4, r5, pc}
 8008a08:	b118      	cbz	r0, 8008a12 <_fflush_r+0x1a>
 8008a0a:	6983      	ldr	r3, [r0, #24]
 8008a0c:	b90b      	cbnz	r3, 8008a12 <_fflush_r+0x1a>
 8008a0e:	f000 f887 	bl	8008b20 <__sinit>
 8008a12:	4b14      	ldr	r3, [pc, #80]	; (8008a64 <_fflush_r+0x6c>)
 8008a14:	429c      	cmp	r4, r3
 8008a16:	d11b      	bne.n	8008a50 <_fflush_r+0x58>
 8008a18:	686c      	ldr	r4, [r5, #4]
 8008a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d0ef      	beq.n	8008a02 <_fflush_r+0xa>
 8008a22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a24:	07d0      	lsls	r0, r2, #31
 8008a26:	d404      	bmi.n	8008a32 <_fflush_r+0x3a>
 8008a28:	0599      	lsls	r1, r3, #22
 8008a2a:	d402      	bmi.n	8008a32 <_fflush_r+0x3a>
 8008a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a2e:	f000 f915 	bl	8008c5c <__retarget_lock_acquire_recursive>
 8008a32:	4628      	mov	r0, r5
 8008a34:	4621      	mov	r1, r4
 8008a36:	f7ff ff59 	bl	80088ec <__sflush_r>
 8008a3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a3c:	07da      	lsls	r2, r3, #31
 8008a3e:	4605      	mov	r5, r0
 8008a40:	d4e0      	bmi.n	8008a04 <_fflush_r+0xc>
 8008a42:	89a3      	ldrh	r3, [r4, #12]
 8008a44:	059b      	lsls	r3, r3, #22
 8008a46:	d4dd      	bmi.n	8008a04 <_fflush_r+0xc>
 8008a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a4a:	f000 f908 	bl	8008c5e <__retarget_lock_release_recursive>
 8008a4e:	e7d9      	b.n	8008a04 <_fflush_r+0xc>
 8008a50:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <_fflush_r+0x70>)
 8008a52:	429c      	cmp	r4, r3
 8008a54:	d101      	bne.n	8008a5a <_fflush_r+0x62>
 8008a56:	68ac      	ldr	r4, [r5, #8]
 8008a58:	e7df      	b.n	8008a1a <_fflush_r+0x22>
 8008a5a:	4b04      	ldr	r3, [pc, #16]	; (8008a6c <_fflush_r+0x74>)
 8008a5c:	429c      	cmp	r4, r3
 8008a5e:	bf08      	it	eq
 8008a60:	68ec      	ldreq	r4, [r5, #12]
 8008a62:	e7da      	b.n	8008a1a <_fflush_r+0x22>
 8008a64:	080093d8 	.word	0x080093d8
 8008a68:	080093f8 	.word	0x080093f8
 8008a6c:	080093b8 	.word	0x080093b8

08008a70 <std>:
 8008a70:	2300      	movs	r3, #0
 8008a72:	b510      	push	{r4, lr}
 8008a74:	4604      	mov	r4, r0
 8008a76:	e9c0 3300 	strd	r3, r3, [r0]
 8008a7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a7e:	6083      	str	r3, [r0, #8]
 8008a80:	8181      	strh	r1, [r0, #12]
 8008a82:	6643      	str	r3, [r0, #100]	; 0x64
 8008a84:	81c2      	strh	r2, [r0, #14]
 8008a86:	6183      	str	r3, [r0, #24]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	2208      	movs	r2, #8
 8008a8c:	305c      	adds	r0, #92	; 0x5c
 8008a8e:	f7fd fc11 	bl	80062b4 <memset>
 8008a92:	4b05      	ldr	r3, [pc, #20]	; (8008aa8 <std+0x38>)
 8008a94:	6263      	str	r3, [r4, #36]	; 0x24
 8008a96:	4b05      	ldr	r3, [pc, #20]	; (8008aac <std+0x3c>)
 8008a98:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a9a:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <std+0x40>)
 8008a9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a9e:	4b05      	ldr	r3, [pc, #20]	; (8008ab4 <std+0x44>)
 8008aa0:	6224      	str	r4, [r4, #32]
 8008aa2:	6323      	str	r3, [r4, #48]	; 0x30
 8008aa4:	bd10      	pop	{r4, pc}
 8008aa6:	bf00      	nop
 8008aa8:	08008e6d 	.word	0x08008e6d
 8008aac:	08008e8f 	.word	0x08008e8f
 8008ab0:	08008ec7 	.word	0x08008ec7
 8008ab4:	08008eeb 	.word	0x08008eeb

08008ab8 <_cleanup_r>:
 8008ab8:	4901      	ldr	r1, [pc, #4]	; (8008ac0 <_cleanup_r+0x8>)
 8008aba:	f000 b8af 	b.w	8008c1c <_fwalk_reent>
 8008abe:	bf00      	nop
 8008ac0:	080089f9 	.word	0x080089f9

08008ac4 <__sfmoreglue>:
 8008ac4:	b570      	push	{r4, r5, r6, lr}
 8008ac6:	1e4a      	subs	r2, r1, #1
 8008ac8:	2568      	movs	r5, #104	; 0x68
 8008aca:	4355      	muls	r5, r2
 8008acc:	460e      	mov	r6, r1
 8008ace:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ad2:	f7ff fb23 	bl	800811c <_malloc_r>
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	b140      	cbz	r0, 8008aec <__sfmoreglue+0x28>
 8008ada:	2100      	movs	r1, #0
 8008adc:	e9c0 1600 	strd	r1, r6, [r0]
 8008ae0:	300c      	adds	r0, #12
 8008ae2:	60a0      	str	r0, [r4, #8]
 8008ae4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ae8:	f7fd fbe4 	bl	80062b4 <memset>
 8008aec:	4620      	mov	r0, r4
 8008aee:	bd70      	pop	{r4, r5, r6, pc}

08008af0 <__sfp_lock_acquire>:
 8008af0:	4801      	ldr	r0, [pc, #4]	; (8008af8 <__sfp_lock_acquire+0x8>)
 8008af2:	f000 b8b3 	b.w	8008c5c <__retarget_lock_acquire_recursive>
 8008af6:	bf00      	nop
 8008af8:	20000da4 	.word	0x20000da4

08008afc <__sfp_lock_release>:
 8008afc:	4801      	ldr	r0, [pc, #4]	; (8008b04 <__sfp_lock_release+0x8>)
 8008afe:	f000 b8ae 	b.w	8008c5e <__retarget_lock_release_recursive>
 8008b02:	bf00      	nop
 8008b04:	20000da4 	.word	0x20000da4

08008b08 <__sinit_lock_acquire>:
 8008b08:	4801      	ldr	r0, [pc, #4]	; (8008b10 <__sinit_lock_acquire+0x8>)
 8008b0a:	f000 b8a7 	b.w	8008c5c <__retarget_lock_acquire_recursive>
 8008b0e:	bf00      	nop
 8008b10:	20000d9f 	.word	0x20000d9f

08008b14 <__sinit_lock_release>:
 8008b14:	4801      	ldr	r0, [pc, #4]	; (8008b1c <__sinit_lock_release+0x8>)
 8008b16:	f000 b8a2 	b.w	8008c5e <__retarget_lock_release_recursive>
 8008b1a:	bf00      	nop
 8008b1c:	20000d9f 	.word	0x20000d9f

08008b20 <__sinit>:
 8008b20:	b510      	push	{r4, lr}
 8008b22:	4604      	mov	r4, r0
 8008b24:	f7ff fff0 	bl	8008b08 <__sinit_lock_acquire>
 8008b28:	69a3      	ldr	r3, [r4, #24]
 8008b2a:	b11b      	cbz	r3, 8008b34 <__sinit+0x14>
 8008b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b30:	f7ff bff0 	b.w	8008b14 <__sinit_lock_release>
 8008b34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b38:	6523      	str	r3, [r4, #80]	; 0x50
 8008b3a:	4b13      	ldr	r3, [pc, #76]	; (8008b88 <__sinit+0x68>)
 8008b3c:	4a13      	ldr	r2, [pc, #76]	; (8008b8c <__sinit+0x6c>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b42:	42a3      	cmp	r3, r4
 8008b44:	bf04      	itt	eq
 8008b46:	2301      	moveq	r3, #1
 8008b48:	61a3      	streq	r3, [r4, #24]
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f000 f820 	bl	8008b90 <__sfp>
 8008b50:	6060      	str	r0, [r4, #4]
 8008b52:	4620      	mov	r0, r4
 8008b54:	f000 f81c 	bl	8008b90 <__sfp>
 8008b58:	60a0      	str	r0, [r4, #8]
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f000 f818 	bl	8008b90 <__sfp>
 8008b60:	2200      	movs	r2, #0
 8008b62:	60e0      	str	r0, [r4, #12]
 8008b64:	2104      	movs	r1, #4
 8008b66:	6860      	ldr	r0, [r4, #4]
 8008b68:	f7ff ff82 	bl	8008a70 <std>
 8008b6c:	68a0      	ldr	r0, [r4, #8]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	2109      	movs	r1, #9
 8008b72:	f7ff ff7d 	bl	8008a70 <std>
 8008b76:	68e0      	ldr	r0, [r4, #12]
 8008b78:	2202      	movs	r2, #2
 8008b7a:	2112      	movs	r1, #18
 8008b7c:	f7ff ff78 	bl	8008a70 <std>
 8008b80:	2301      	movs	r3, #1
 8008b82:	61a3      	str	r3, [r4, #24]
 8008b84:	e7d2      	b.n	8008b2c <__sinit+0xc>
 8008b86:	bf00      	nop
 8008b88:	0800903c 	.word	0x0800903c
 8008b8c:	08008ab9 	.word	0x08008ab9

08008b90 <__sfp>:
 8008b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b92:	4607      	mov	r7, r0
 8008b94:	f7ff ffac 	bl	8008af0 <__sfp_lock_acquire>
 8008b98:	4b1e      	ldr	r3, [pc, #120]	; (8008c14 <__sfp+0x84>)
 8008b9a:	681e      	ldr	r6, [r3, #0]
 8008b9c:	69b3      	ldr	r3, [r6, #24]
 8008b9e:	b913      	cbnz	r3, 8008ba6 <__sfp+0x16>
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	f7ff ffbd 	bl	8008b20 <__sinit>
 8008ba6:	3648      	adds	r6, #72	; 0x48
 8008ba8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008bac:	3b01      	subs	r3, #1
 8008bae:	d503      	bpl.n	8008bb8 <__sfp+0x28>
 8008bb0:	6833      	ldr	r3, [r6, #0]
 8008bb2:	b30b      	cbz	r3, 8008bf8 <__sfp+0x68>
 8008bb4:	6836      	ldr	r6, [r6, #0]
 8008bb6:	e7f7      	b.n	8008ba8 <__sfp+0x18>
 8008bb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008bbc:	b9d5      	cbnz	r5, 8008bf4 <__sfp+0x64>
 8008bbe:	4b16      	ldr	r3, [pc, #88]	; (8008c18 <__sfp+0x88>)
 8008bc0:	60e3      	str	r3, [r4, #12]
 8008bc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008bc6:	6665      	str	r5, [r4, #100]	; 0x64
 8008bc8:	f000 f847 	bl	8008c5a <__retarget_lock_init_recursive>
 8008bcc:	f7ff ff96 	bl	8008afc <__sfp_lock_release>
 8008bd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008bd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008bd8:	6025      	str	r5, [r4, #0]
 8008bda:	61a5      	str	r5, [r4, #24]
 8008bdc:	2208      	movs	r2, #8
 8008bde:	4629      	mov	r1, r5
 8008be0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008be4:	f7fd fb66 	bl	80062b4 <memset>
 8008be8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bf4:	3468      	adds	r4, #104	; 0x68
 8008bf6:	e7d9      	b.n	8008bac <__sfp+0x1c>
 8008bf8:	2104      	movs	r1, #4
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	f7ff ff62 	bl	8008ac4 <__sfmoreglue>
 8008c00:	4604      	mov	r4, r0
 8008c02:	6030      	str	r0, [r6, #0]
 8008c04:	2800      	cmp	r0, #0
 8008c06:	d1d5      	bne.n	8008bb4 <__sfp+0x24>
 8008c08:	f7ff ff78 	bl	8008afc <__sfp_lock_release>
 8008c0c:	230c      	movs	r3, #12
 8008c0e:	603b      	str	r3, [r7, #0]
 8008c10:	e7ee      	b.n	8008bf0 <__sfp+0x60>
 8008c12:	bf00      	nop
 8008c14:	0800903c 	.word	0x0800903c
 8008c18:	ffff0001 	.word	0xffff0001

08008c1c <_fwalk_reent>:
 8008c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c20:	4606      	mov	r6, r0
 8008c22:	4688      	mov	r8, r1
 8008c24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c28:	2700      	movs	r7, #0
 8008c2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c2e:	f1b9 0901 	subs.w	r9, r9, #1
 8008c32:	d505      	bpl.n	8008c40 <_fwalk_reent+0x24>
 8008c34:	6824      	ldr	r4, [r4, #0]
 8008c36:	2c00      	cmp	r4, #0
 8008c38:	d1f7      	bne.n	8008c2a <_fwalk_reent+0xe>
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c40:	89ab      	ldrh	r3, [r5, #12]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d907      	bls.n	8008c56 <_fwalk_reent+0x3a>
 8008c46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	d003      	beq.n	8008c56 <_fwalk_reent+0x3a>
 8008c4e:	4629      	mov	r1, r5
 8008c50:	4630      	mov	r0, r6
 8008c52:	47c0      	blx	r8
 8008c54:	4307      	orrs	r7, r0
 8008c56:	3568      	adds	r5, #104	; 0x68
 8008c58:	e7e9      	b.n	8008c2e <_fwalk_reent+0x12>

08008c5a <__retarget_lock_init_recursive>:
 8008c5a:	4770      	bx	lr

08008c5c <__retarget_lock_acquire_recursive>:
 8008c5c:	4770      	bx	lr

08008c5e <__retarget_lock_release_recursive>:
 8008c5e:	4770      	bx	lr

08008c60 <__swhatbuf_r>:
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	460e      	mov	r6, r1
 8008c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c68:	2900      	cmp	r1, #0
 8008c6a:	b096      	sub	sp, #88	; 0x58
 8008c6c:	4614      	mov	r4, r2
 8008c6e:	461d      	mov	r5, r3
 8008c70:	da07      	bge.n	8008c82 <__swhatbuf_r+0x22>
 8008c72:	2300      	movs	r3, #0
 8008c74:	602b      	str	r3, [r5, #0]
 8008c76:	89b3      	ldrh	r3, [r6, #12]
 8008c78:	061a      	lsls	r2, r3, #24
 8008c7a:	d410      	bmi.n	8008c9e <__swhatbuf_r+0x3e>
 8008c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c80:	e00e      	b.n	8008ca0 <__swhatbuf_r+0x40>
 8008c82:	466a      	mov	r2, sp
 8008c84:	f000 f964 	bl	8008f50 <_fstat_r>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	dbf2      	blt.n	8008c72 <__swhatbuf_r+0x12>
 8008c8c:	9a01      	ldr	r2, [sp, #4]
 8008c8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c96:	425a      	negs	r2, r3
 8008c98:	415a      	adcs	r2, r3
 8008c9a:	602a      	str	r2, [r5, #0]
 8008c9c:	e7ee      	b.n	8008c7c <__swhatbuf_r+0x1c>
 8008c9e:	2340      	movs	r3, #64	; 0x40
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	6023      	str	r3, [r4, #0]
 8008ca4:	b016      	add	sp, #88	; 0x58
 8008ca6:	bd70      	pop	{r4, r5, r6, pc}

08008ca8 <__smakebuf_r>:
 8008ca8:	898b      	ldrh	r3, [r1, #12]
 8008caa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cac:	079d      	lsls	r5, r3, #30
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	d507      	bpl.n	8008cc4 <__smakebuf_r+0x1c>
 8008cb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cb8:	6023      	str	r3, [r4, #0]
 8008cba:	6123      	str	r3, [r4, #16]
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	6163      	str	r3, [r4, #20]
 8008cc0:	b002      	add	sp, #8
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	ab01      	add	r3, sp, #4
 8008cc6:	466a      	mov	r2, sp
 8008cc8:	f7ff ffca 	bl	8008c60 <__swhatbuf_r>
 8008ccc:	9900      	ldr	r1, [sp, #0]
 8008cce:	4605      	mov	r5, r0
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	f7ff fa23 	bl	800811c <_malloc_r>
 8008cd6:	b948      	cbnz	r0, 8008cec <__smakebuf_r+0x44>
 8008cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cdc:	059a      	lsls	r2, r3, #22
 8008cde:	d4ef      	bmi.n	8008cc0 <__smakebuf_r+0x18>
 8008ce0:	f023 0303 	bic.w	r3, r3, #3
 8008ce4:	f043 0302 	orr.w	r3, r3, #2
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	e7e3      	b.n	8008cb4 <__smakebuf_r+0xc>
 8008cec:	4b0d      	ldr	r3, [pc, #52]	; (8008d24 <__smakebuf_r+0x7c>)
 8008cee:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cf0:	89a3      	ldrh	r3, [r4, #12]
 8008cf2:	6020      	str	r0, [r4, #0]
 8008cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cf8:	81a3      	strh	r3, [r4, #12]
 8008cfa:	9b00      	ldr	r3, [sp, #0]
 8008cfc:	6163      	str	r3, [r4, #20]
 8008cfe:	9b01      	ldr	r3, [sp, #4]
 8008d00:	6120      	str	r0, [r4, #16]
 8008d02:	b15b      	cbz	r3, 8008d1c <__smakebuf_r+0x74>
 8008d04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d08:	4630      	mov	r0, r6
 8008d0a:	f000 f933 	bl	8008f74 <_isatty_r>
 8008d0e:	b128      	cbz	r0, 8008d1c <__smakebuf_r+0x74>
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	f023 0303 	bic.w	r3, r3, #3
 8008d16:	f043 0301 	orr.w	r3, r3, #1
 8008d1a:	81a3      	strh	r3, [r4, #12]
 8008d1c:	89a0      	ldrh	r0, [r4, #12]
 8008d1e:	4305      	orrs	r5, r0
 8008d20:	81a5      	strh	r5, [r4, #12]
 8008d22:	e7cd      	b.n	8008cc0 <__smakebuf_r+0x18>
 8008d24:	08008ab9 	.word	0x08008ab9

08008d28 <__ascii_mbtowc>:
 8008d28:	b082      	sub	sp, #8
 8008d2a:	b901      	cbnz	r1, 8008d2e <__ascii_mbtowc+0x6>
 8008d2c:	a901      	add	r1, sp, #4
 8008d2e:	b142      	cbz	r2, 8008d42 <__ascii_mbtowc+0x1a>
 8008d30:	b14b      	cbz	r3, 8008d46 <__ascii_mbtowc+0x1e>
 8008d32:	7813      	ldrb	r3, [r2, #0]
 8008d34:	600b      	str	r3, [r1, #0]
 8008d36:	7812      	ldrb	r2, [r2, #0]
 8008d38:	1e10      	subs	r0, r2, #0
 8008d3a:	bf18      	it	ne
 8008d3c:	2001      	movne	r0, #1
 8008d3e:	b002      	add	sp, #8
 8008d40:	4770      	bx	lr
 8008d42:	4610      	mov	r0, r2
 8008d44:	e7fb      	b.n	8008d3e <__ascii_mbtowc+0x16>
 8008d46:	f06f 0001 	mvn.w	r0, #1
 8008d4a:	e7f8      	b.n	8008d3e <__ascii_mbtowc+0x16>

08008d4c <memmove>:
 8008d4c:	4288      	cmp	r0, r1
 8008d4e:	b510      	push	{r4, lr}
 8008d50:	eb01 0402 	add.w	r4, r1, r2
 8008d54:	d902      	bls.n	8008d5c <memmove+0x10>
 8008d56:	4284      	cmp	r4, r0
 8008d58:	4623      	mov	r3, r4
 8008d5a:	d807      	bhi.n	8008d6c <memmove+0x20>
 8008d5c:	1e43      	subs	r3, r0, #1
 8008d5e:	42a1      	cmp	r1, r4
 8008d60:	d008      	beq.n	8008d74 <memmove+0x28>
 8008d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d6a:	e7f8      	b.n	8008d5e <memmove+0x12>
 8008d6c:	4402      	add	r2, r0
 8008d6e:	4601      	mov	r1, r0
 8008d70:	428a      	cmp	r2, r1
 8008d72:	d100      	bne.n	8008d76 <memmove+0x2a>
 8008d74:	bd10      	pop	{r4, pc}
 8008d76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d7e:	e7f7      	b.n	8008d70 <memmove+0x24>

08008d80 <__malloc_lock>:
 8008d80:	4801      	ldr	r0, [pc, #4]	; (8008d88 <__malloc_lock+0x8>)
 8008d82:	f7ff bf6b 	b.w	8008c5c <__retarget_lock_acquire_recursive>
 8008d86:	bf00      	nop
 8008d88:	20000da0 	.word	0x20000da0

08008d8c <__malloc_unlock>:
 8008d8c:	4801      	ldr	r0, [pc, #4]	; (8008d94 <__malloc_unlock+0x8>)
 8008d8e:	f7ff bf66 	b.w	8008c5e <__retarget_lock_release_recursive>
 8008d92:	bf00      	nop
 8008d94:	20000da0 	.word	0x20000da0

08008d98 <_realloc_r>:
 8008d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9a:	4607      	mov	r7, r0
 8008d9c:	4614      	mov	r4, r2
 8008d9e:	460e      	mov	r6, r1
 8008da0:	b921      	cbnz	r1, 8008dac <_realloc_r+0x14>
 8008da2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008da6:	4611      	mov	r1, r2
 8008da8:	f7ff b9b8 	b.w	800811c <_malloc_r>
 8008dac:	b922      	cbnz	r2, 8008db8 <_realloc_r+0x20>
 8008dae:	f7ff f965 	bl	800807c <_free_r>
 8008db2:	4625      	mov	r5, r4
 8008db4:	4628      	mov	r0, r5
 8008db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008db8:	f000 f8fe 	bl	8008fb8 <_malloc_usable_size_r>
 8008dbc:	42a0      	cmp	r0, r4
 8008dbe:	d20f      	bcs.n	8008de0 <_realloc_r+0x48>
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	f7ff f9aa 	bl	800811c <_malloc_r>
 8008dc8:	4605      	mov	r5, r0
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	d0f2      	beq.n	8008db4 <_realloc_r+0x1c>
 8008dce:	4631      	mov	r1, r6
 8008dd0:	4622      	mov	r2, r4
 8008dd2:	f7fe fdb7 	bl	8007944 <memcpy>
 8008dd6:	4631      	mov	r1, r6
 8008dd8:	4638      	mov	r0, r7
 8008dda:	f7ff f94f 	bl	800807c <_free_r>
 8008dde:	e7e9      	b.n	8008db4 <_realloc_r+0x1c>
 8008de0:	4635      	mov	r5, r6
 8008de2:	e7e7      	b.n	8008db4 <_realloc_r+0x1c>

08008de4 <_raise_r>:
 8008de4:	291f      	cmp	r1, #31
 8008de6:	b538      	push	{r3, r4, r5, lr}
 8008de8:	4604      	mov	r4, r0
 8008dea:	460d      	mov	r5, r1
 8008dec:	d904      	bls.n	8008df8 <_raise_r+0x14>
 8008dee:	2316      	movs	r3, #22
 8008df0:	6003      	str	r3, [r0, #0]
 8008df2:	f04f 30ff 	mov.w	r0, #4294967295
 8008df6:	bd38      	pop	{r3, r4, r5, pc}
 8008df8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008dfa:	b112      	cbz	r2, 8008e02 <_raise_r+0x1e>
 8008dfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e00:	b94b      	cbnz	r3, 8008e16 <_raise_r+0x32>
 8008e02:	4620      	mov	r0, r4
 8008e04:	f000 f830 	bl	8008e68 <_getpid_r>
 8008e08:	462a      	mov	r2, r5
 8008e0a:	4601      	mov	r1, r0
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e12:	f000 b817 	b.w	8008e44 <_kill_r>
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d00a      	beq.n	8008e30 <_raise_r+0x4c>
 8008e1a:	1c59      	adds	r1, r3, #1
 8008e1c:	d103      	bne.n	8008e26 <_raise_r+0x42>
 8008e1e:	2316      	movs	r3, #22
 8008e20:	6003      	str	r3, [r0, #0]
 8008e22:	2001      	movs	r0, #1
 8008e24:	e7e7      	b.n	8008df6 <_raise_r+0x12>
 8008e26:	2400      	movs	r4, #0
 8008e28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	4798      	blx	r3
 8008e30:	2000      	movs	r0, #0
 8008e32:	e7e0      	b.n	8008df6 <_raise_r+0x12>

08008e34 <raise>:
 8008e34:	4b02      	ldr	r3, [pc, #8]	; (8008e40 <raise+0xc>)
 8008e36:	4601      	mov	r1, r0
 8008e38:	6818      	ldr	r0, [r3, #0]
 8008e3a:	f7ff bfd3 	b.w	8008de4 <_raise_r>
 8008e3e:	bf00      	nop
 8008e40:	2000001c 	.word	0x2000001c

08008e44 <_kill_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	4d07      	ldr	r5, [pc, #28]	; (8008e64 <_kill_r+0x20>)
 8008e48:	2300      	movs	r3, #0
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	4611      	mov	r1, r2
 8008e50:	602b      	str	r3, [r5, #0]
 8008e52:	f7f8 fde3 	bl	8001a1c <_kill>
 8008e56:	1c43      	adds	r3, r0, #1
 8008e58:	d102      	bne.n	8008e60 <_kill_r+0x1c>
 8008e5a:	682b      	ldr	r3, [r5, #0]
 8008e5c:	b103      	cbz	r3, 8008e60 <_kill_r+0x1c>
 8008e5e:	6023      	str	r3, [r4, #0]
 8008e60:	bd38      	pop	{r3, r4, r5, pc}
 8008e62:	bf00      	nop
 8008e64:	20000da8 	.word	0x20000da8

08008e68 <_getpid_r>:
 8008e68:	f7f8 bdd0 	b.w	8001a0c <_getpid>

08008e6c <__sread>:
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	460c      	mov	r4, r1
 8008e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e74:	f000 f8a8 	bl	8008fc8 <_read_r>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	bfab      	itete	ge
 8008e7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e7e:	89a3      	ldrhlt	r3, [r4, #12]
 8008e80:	181b      	addge	r3, r3, r0
 8008e82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e86:	bfac      	ite	ge
 8008e88:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e8a:	81a3      	strhlt	r3, [r4, #12]
 8008e8c:	bd10      	pop	{r4, pc}

08008e8e <__swrite>:
 8008e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e92:	461f      	mov	r7, r3
 8008e94:	898b      	ldrh	r3, [r1, #12]
 8008e96:	05db      	lsls	r3, r3, #23
 8008e98:	4605      	mov	r5, r0
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	4616      	mov	r6, r2
 8008e9e:	d505      	bpl.n	8008eac <__swrite+0x1e>
 8008ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f000 f874 	bl	8008f94 <_lseek_r>
 8008eac:	89a3      	ldrh	r3, [r4, #12]
 8008eae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008eb6:	81a3      	strh	r3, [r4, #12]
 8008eb8:	4632      	mov	r2, r6
 8008eba:	463b      	mov	r3, r7
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec2:	f000 b823 	b.w	8008f0c <_write_r>

08008ec6 <__sseek>:
 8008ec6:	b510      	push	{r4, lr}
 8008ec8:	460c      	mov	r4, r1
 8008eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ece:	f000 f861 	bl	8008f94 <_lseek_r>
 8008ed2:	1c43      	adds	r3, r0, #1
 8008ed4:	89a3      	ldrh	r3, [r4, #12]
 8008ed6:	bf15      	itete	ne
 8008ed8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008eda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ee2:	81a3      	strheq	r3, [r4, #12]
 8008ee4:	bf18      	it	ne
 8008ee6:	81a3      	strhne	r3, [r4, #12]
 8008ee8:	bd10      	pop	{r4, pc}

08008eea <__sclose>:
 8008eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eee:	f000 b81f 	b.w	8008f30 <_close_r>

08008ef2 <__ascii_wctomb>:
 8008ef2:	b149      	cbz	r1, 8008f08 <__ascii_wctomb+0x16>
 8008ef4:	2aff      	cmp	r2, #255	; 0xff
 8008ef6:	bf85      	ittet	hi
 8008ef8:	238a      	movhi	r3, #138	; 0x8a
 8008efa:	6003      	strhi	r3, [r0, #0]
 8008efc:	700a      	strbls	r2, [r1, #0]
 8008efe:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f02:	bf98      	it	ls
 8008f04:	2001      	movls	r0, #1
 8008f06:	4770      	bx	lr
 8008f08:	4608      	mov	r0, r1
 8008f0a:	4770      	bx	lr

08008f0c <_write_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	4d07      	ldr	r5, [pc, #28]	; (8008f2c <_write_r+0x20>)
 8008f10:	4604      	mov	r4, r0
 8008f12:	4608      	mov	r0, r1
 8008f14:	4611      	mov	r1, r2
 8008f16:	2200      	movs	r2, #0
 8008f18:	602a      	str	r2, [r5, #0]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	f7f8 fdb5 	bl	8001a8a <_write>
 8008f20:	1c43      	adds	r3, r0, #1
 8008f22:	d102      	bne.n	8008f2a <_write_r+0x1e>
 8008f24:	682b      	ldr	r3, [r5, #0]
 8008f26:	b103      	cbz	r3, 8008f2a <_write_r+0x1e>
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	bd38      	pop	{r3, r4, r5, pc}
 8008f2c:	20000da8 	.word	0x20000da8

08008f30 <_close_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	4d06      	ldr	r5, [pc, #24]	; (8008f4c <_close_r+0x1c>)
 8008f34:	2300      	movs	r3, #0
 8008f36:	4604      	mov	r4, r0
 8008f38:	4608      	mov	r0, r1
 8008f3a:	602b      	str	r3, [r5, #0]
 8008f3c:	f7f8 fdc1 	bl	8001ac2 <_close>
 8008f40:	1c43      	adds	r3, r0, #1
 8008f42:	d102      	bne.n	8008f4a <_close_r+0x1a>
 8008f44:	682b      	ldr	r3, [r5, #0]
 8008f46:	b103      	cbz	r3, 8008f4a <_close_r+0x1a>
 8008f48:	6023      	str	r3, [r4, #0]
 8008f4a:	bd38      	pop	{r3, r4, r5, pc}
 8008f4c:	20000da8 	.word	0x20000da8

08008f50 <_fstat_r>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	4d07      	ldr	r5, [pc, #28]	; (8008f70 <_fstat_r+0x20>)
 8008f54:	2300      	movs	r3, #0
 8008f56:	4604      	mov	r4, r0
 8008f58:	4608      	mov	r0, r1
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	602b      	str	r3, [r5, #0]
 8008f5e:	f7f8 fdbc 	bl	8001ada <_fstat>
 8008f62:	1c43      	adds	r3, r0, #1
 8008f64:	d102      	bne.n	8008f6c <_fstat_r+0x1c>
 8008f66:	682b      	ldr	r3, [r5, #0]
 8008f68:	b103      	cbz	r3, 8008f6c <_fstat_r+0x1c>
 8008f6a:	6023      	str	r3, [r4, #0]
 8008f6c:	bd38      	pop	{r3, r4, r5, pc}
 8008f6e:	bf00      	nop
 8008f70:	20000da8 	.word	0x20000da8

08008f74 <_isatty_r>:
 8008f74:	b538      	push	{r3, r4, r5, lr}
 8008f76:	4d06      	ldr	r5, [pc, #24]	; (8008f90 <_isatty_r+0x1c>)
 8008f78:	2300      	movs	r3, #0
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	4608      	mov	r0, r1
 8008f7e:	602b      	str	r3, [r5, #0]
 8008f80:	f7f8 fdbb 	bl	8001afa <_isatty>
 8008f84:	1c43      	adds	r3, r0, #1
 8008f86:	d102      	bne.n	8008f8e <_isatty_r+0x1a>
 8008f88:	682b      	ldr	r3, [r5, #0]
 8008f8a:	b103      	cbz	r3, 8008f8e <_isatty_r+0x1a>
 8008f8c:	6023      	str	r3, [r4, #0]
 8008f8e:	bd38      	pop	{r3, r4, r5, pc}
 8008f90:	20000da8 	.word	0x20000da8

08008f94 <_lseek_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	4d07      	ldr	r5, [pc, #28]	; (8008fb4 <_lseek_r+0x20>)
 8008f98:	4604      	mov	r4, r0
 8008f9a:	4608      	mov	r0, r1
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	602a      	str	r2, [r5, #0]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	f7f8 fdb4 	bl	8001b10 <_lseek>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d102      	bne.n	8008fb2 <_lseek_r+0x1e>
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	b103      	cbz	r3, 8008fb2 <_lseek_r+0x1e>
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	bd38      	pop	{r3, r4, r5, pc}
 8008fb4:	20000da8 	.word	0x20000da8

08008fb8 <_malloc_usable_size_r>:
 8008fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fbc:	1f18      	subs	r0, r3, #4
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	bfbc      	itt	lt
 8008fc2:	580b      	ldrlt	r3, [r1, r0]
 8008fc4:	18c0      	addlt	r0, r0, r3
 8008fc6:	4770      	bx	lr

08008fc8 <_read_r>:
 8008fc8:	b538      	push	{r3, r4, r5, lr}
 8008fca:	4d07      	ldr	r5, [pc, #28]	; (8008fe8 <_read_r+0x20>)
 8008fcc:	4604      	mov	r4, r0
 8008fce:	4608      	mov	r0, r1
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	602a      	str	r2, [r5, #0]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	f7f8 fd3a 	bl	8001a50 <_read>
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	d102      	bne.n	8008fe6 <_read_r+0x1e>
 8008fe0:	682b      	ldr	r3, [r5, #0]
 8008fe2:	b103      	cbz	r3, 8008fe6 <_read_r+0x1e>
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	bd38      	pop	{r3, r4, r5, pc}
 8008fe8:	20000da8 	.word	0x20000da8

08008fec <_init>:
 8008fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fee:	bf00      	nop
 8008ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ff2:	bc08      	pop	{r3}
 8008ff4:	469e      	mov	lr, r3
 8008ff6:	4770      	bx	lr

08008ff8 <_fini>:
 8008ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffa:	bf00      	nop
 8008ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ffe:	bc08      	pop	{r3}
 8009000:	469e      	mov	lr, r3
 8009002:	4770      	bx	lr
